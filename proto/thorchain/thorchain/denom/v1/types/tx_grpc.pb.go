// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: thorchain/denom/v1/types/tx.proto

package denomv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_CreateDenom_FullMethodName      = "/thorchain.denom.v1.Msg/CreateDenom"
	Msg_MintTokens_FullMethodName       = "/thorchain.denom.v1.Msg/MintTokens"
	Msg_BurnTokens_FullMethodName       = "/thorchain.denom.v1.Msg/BurnTokens"
	Msg_ChangeDenomAdmin_FullMethodName = "/thorchain.denom.v1.Msg/ChangeDenomAdmin"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	CreateDenom(ctx context.Context, in *MsgCreateDenom, opts ...grpc.CallOption) (*MsgCreateDenomResponse, error)
	MintTokens(ctx context.Context, in *MsgMintTokens, opts ...grpc.CallOption) (*MsgMintTokensResponse, error)
	BurnTokens(ctx context.Context, in *MsgBurnTokens, opts ...grpc.CallOption) (*MsgBurnTokensResponse, error)
	ChangeDenomAdmin(ctx context.Context, in *MsgChangeDenomAdmin, opts ...grpc.CallOption) (*MsgChangeDenomAdminResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateDenom(ctx context.Context, in *MsgCreateDenom, opts ...grpc.CallOption) (*MsgCreateDenomResponse, error) {
	out := new(MsgCreateDenomResponse)
	err := c.cc.Invoke(ctx, Msg_CreateDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintTokens(ctx context.Context, in *MsgMintTokens, opts ...grpc.CallOption) (*MsgMintTokensResponse, error) {
	out := new(MsgMintTokensResponse)
	err := c.cc.Invoke(ctx, Msg_MintTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BurnTokens(ctx context.Context, in *MsgBurnTokens, opts ...grpc.CallOption) (*MsgBurnTokensResponse, error) {
	out := new(MsgBurnTokensResponse)
	err := c.cc.Invoke(ctx, Msg_BurnTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeDenomAdmin(ctx context.Context, in *MsgChangeDenomAdmin, opts ...grpc.CallOption) (*MsgChangeDenomAdminResponse, error) {
	out := new(MsgChangeDenomAdminResponse)
	err := c.cc.Invoke(ctx, Msg_ChangeDenomAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	CreateDenom(context.Context, *MsgCreateDenom) (*MsgCreateDenomResponse, error)
	MintTokens(context.Context, *MsgMintTokens) (*MsgMintTokensResponse, error)
	BurnTokens(context.Context, *MsgBurnTokens) (*MsgBurnTokensResponse, error)
	ChangeDenomAdmin(context.Context, *MsgChangeDenomAdmin) (*MsgChangeDenomAdminResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) CreateDenom(context.Context, *MsgCreateDenom) (*MsgCreateDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDenom not implemented")
}
func (UnimplementedMsgServer) MintTokens(context.Context, *MsgMintTokens) (*MsgMintTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintTokens not implemented")
}
func (UnimplementedMsgServer) BurnTokens(context.Context, *MsgBurnTokens) (*MsgBurnTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnTokens not implemented")
}
func (UnimplementedMsgServer) ChangeDenomAdmin(context.Context, *MsgChangeDenomAdmin) (*MsgChangeDenomAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDenomAdmin not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_CreateDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateDenom(ctx, req.(*MsgCreateDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintTokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_MintTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintTokens(ctx, req.(*MsgMintTokens))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BurnTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnTokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BurnTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_BurnTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BurnTokens(ctx, req.(*MsgBurnTokens))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeDenomAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeDenomAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeDenomAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ChangeDenomAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeDenomAdmin(ctx, req.(*MsgChangeDenomAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thorchain.denom.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDenom",
			Handler:    _Msg_CreateDenom_Handler,
		},
		{
			MethodName: "MintTokens",
			Handler:    _Msg_MintTokens_Handler,
		},
		{
			MethodName: "BurnTokens",
			Handler:    _Msg_BurnTokens_Handler,
		},
		{
			MethodName: "ChangeDenomAdmin",
			Handler:    _Msg_ChangeDenomAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thorchain/denom/v1/types/tx.proto",
}
