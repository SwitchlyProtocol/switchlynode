// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/server_bifrost_localhost.proto

package ebifrost

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	common "github.com/switchlyprotocol/switchlynode/v3/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SendQuorumTxResult is the empty return type
type SendQuorumTxResult struct {
}

func (m *SendQuorumTxResult) Reset()         { *m = SendQuorumTxResult{} }
func (m *SendQuorumTxResult) String() string { return proto.CompactTextString(m) }
func (*SendQuorumTxResult) ProtoMessage()    {}
func (*SendQuorumTxResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7177b2ff595545a4, []int{0}
}
func (m *SendQuorumTxResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendQuorumTxResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendQuorumTxResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendQuorumTxResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendQuorumTxResult.Merge(m, src)
}
func (m *SendQuorumTxResult) XXX_Size() int {
	return m.Size()
}
func (m *SendQuorumTxResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SendQuorumTxResult.DiscardUnknown(m)
}

var xxx_messageInfo_SendQuorumTxResult proto.InternalMessageInfo

type SubscribeRequest struct {
	// Optional fields to filter what events to subscribe to
	EventTypes []string `protobuf:"bytes,1,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7177b2ff595545a4, []int{1}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetEventTypes() []string {
	if m != nil {
		return m.EventTypes
	}
	return nil
}

type EventNotification struct {
	EventType string `protobuf:"bytes,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Payload   []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *EventNotification) Reset()         { *m = EventNotification{} }
func (m *EventNotification) String() string { return proto.CompactTextString(m) }
func (*EventNotification) ProtoMessage()    {}
func (*EventNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_7177b2ff595545a4, []int{2}
}
func (m *EventNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNotification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNotification.Merge(m, src)
}
func (m *EventNotification) XXX_Size() int {
	return m.Size()
}
func (m *EventNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNotification.DiscardUnknown(m)
}

var xxx_messageInfo_EventNotification proto.InternalMessageInfo

func (m *EventNotification) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *EventNotification) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *EventNotification) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// SendQuorumNetworkFeeResult is the empty return type
type SendQuorumNetworkFeeResult struct {
}

func (m *SendQuorumNetworkFeeResult) Reset()         { *m = SendQuorumNetworkFeeResult{} }
func (m *SendQuorumNetworkFeeResult) String() string { return proto.CompactTextString(m) }
func (*SendQuorumNetworkFeeResult) ProtoMessage()    {}
func (*SendQuorumNetworkFeeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7177b2ff595545a4, []int{3}
}
func (m *SendQuorumNetworkFeeResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendQuorumNetworkFeeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendQuorumNetworkFeeResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendQuorumNetworkFeeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendQuorumNetworkFeeResult.Merge(m, src)
}
func (m *SendQuorumNetworkFeeResult) XXX_Size() int {
	return m.Size()
}
func (m *SendQuorumNetworkFeeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SendQuorumNetworkFeeResult.DiscardUnknown(m)
}

var xxx_messageInfo_SendQuorumNetworkFeeResult proto.InternalMessageInfo

// SendQuorumSolvencyResult is the empty return type
type SendQuorumSolvencyResult struct {
}

func (m *SendQuorumSolvencyResult) Reset()         { *m = SendQuorumSolvencyResult{} }
func (m *SendQuorumSolvencyResult) String() string { return proto.CompactTextString(m) }
func (*SendQuorumSolvencyResult) ProtoMessage()    {}
func (*SendQuorumSolvencyResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7177b2ff595545a4, []int{4}
}
func (m *SendQuorumSolvencyResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendQuorumSolvencyResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendQuorumSolvencyResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendQuorumSolvencyResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendQuorumSolvencyResult.Merge(m, src)
}
func (m *SendQuorumSolvencyResult) XXX_Size() int {
	return m.Size()
}
func (m *SendQuorumSolvencyResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SendQuorumSolvencyResult.DiscardUnknown(m)
}

var xxx_messageInfo_SendQuorumSolvencyResult proto.InternalMessageInfo

// SendQuorumErrataTxResult is the empty return type
type SendQuorumErrataTxResult struct {
}

func (m *SendQuorumErrataTxResult) Reset()         { *m = SendQuorumErrataTxResult{} }
func (m *SendQuorumErrataTxResult) String() string { return proto.CompactTextString(m) }
func (*SendQuorumErrataTxResult) ProtoMessage()    {}
func (*SendQuorumErrataTxResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7177b2ff595545a4, []int{5}
}
func (m *SendQuorumErrataTxResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendQuorumErrataTxResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendQuorumErrataTxResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendQuorumErrataTxResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendQuorumErrataTxResult.Merge(m, src)
}
func (m *SendQuorumErrataTxResult) XXX_Size() int {
	return m.Size()
}
func (m *SendQuorumErrataTxResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SendQuorumErrataTxResult.DiscardUnknown(m)
}

var xxx_messageInfo_SendQuorumErrataTxResult proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SendQuorumTxResult)(nil), "types.SendQuorumTxResult")
	proto.RegisterType((*SubscribeRequest)(nil), "types.SubscribeRequest")
	proto.RegisterType((*EventNotification)(nil), "types.EventNotification")
	proto.RegisterType((*SendQuorumNetworkFeeResult)(nil), "types.SendQuorumNetworkFeeResult")
	proto.RegisterType((*SendQuorumSolvencyResult)(nil), "types.SendQuorumSolvencyResult")
	proto.RegisterType((*SendQuorumErrataTxResult)(nil), "types.SendQuorumErrataTxResult")
}

func init() {
	proto.RegisterFile("types/server_bifrost_localhost.proto", fileDescriptor_7177b2ff595545a4)
}

var fileDescriptor_7177b2ff595545a4 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb3, 0x44, 0x80, 0x32, 0xf4, 0x90, 0x2e, 0x15, 0x2c, 0x56, 0x71, 0x43, 0xc4, 0x21,
	0xa7, 0x18, 0x91, 0x23, 0x07, 0xa4, 0x4a, 0x45, 0x1c, 0xa0, 0x12, 0x4e, 0x2e, 0x70, 0x89, 0x6c,
	0x67, 0x4a, 0x16, 0x6c, 0x4f, 0xd8, 0x5d, 0xa7, 0xcd, 0x3b, 0x70, 0xe0, 0xb1, 0x38, 0xf6, 0xc8,
	0x11, 0x25, 0x2f, 0x52, 0xc5, 0xf1, 0xda, 0x75, 0x9c, 0x93, 0xb5, 0xff, 0xec, 0xfc, 0x9a, 0xf9,
	0xfc, 0x2f, 0xbc, 0x36, 0xab, 0x05, 0x6a, 0x4f, 0xa3, 0x5a, 0xa2, 0x9a, 0x86, 0xf2, 0x4a, 0x91,
	0x36, 0xd3, 0x98, 0xa2, 0x20, 0x9e, 0x93, 0x36, 0xc3, 0x85, 0x22, 0x43, 0xfc, 0x61, 0x7e, 0xcb,
	0x79, 0x1a, 0x51, 0x92, 0x50, 0xea, 0xed, 0x3e, 0xbb, 0x5a, 0xff, 0x04, 0xf8, 0x18, 0xd3, 0xd9,
	0x97, 0x8c, 0x54, 0x96, 0x4c, 0x6e, 0x7c, 0xd4, 0x59, 0x6c, 0xfa, 0x23, 0xe8, 0x8e, 0xb3, 0x50,
	0x47, 0x4a, 0x86, 0xe8, 0xe3, 0xaf, 0x0c, 0xb5, 0xe1, 0x67, 0xf0, 0x04, 0x97, 0x98, 0x9a, 0x69,
	0xee, 0x26, 0x58, 0xaf, 0x3d, 0xe8, 0xf8, 0x90, 0x4b, 0x93, 0xad, 0xd2, 0xff, 0x01, 0xc7, 0x17,
	0xdb, 0xd3, 0x25, 0x19, 0x79, 0x25, 0xa3, 0xc0, 0x48, 0x4a, 0xf9, 0x4b, 0x80, 0xaa, 0x4b, 0xb0,
	0x1e, 0x1b, 0x74, 0xfc, 0x4e, 0xd9, 0xc4, 0x05, 0x3c, 0x5e, 0x04, 0xab, 0x98, 0x82, 0x99, 0x78,
	0xd0, 0x63, 0x83, 0x23, 0xdf, 0x1e, 0xf9, 0x29, 0x74, 0x8c, 0x4c, 0x50, 0x9b, 0x20, 0x59, 0x88,
	0x76, 0x8f, 0x0d, 0xda, 0x7e, 0x25, 0xf4, 0x4f, 0xc1, 0xa9, 0xc6, 0xbe, 0x44, 0x73, 0x4d, 0xea,
	0xe7, 0x07, 0xc4, 0x62, 0x7c, 0x07, 0x44, 0x55, 0x1d, 0x53, 0xbc, 0xc4, 0x34, 0x5a, 0x1d, 0xaa,
	0x5d, 0x28, 0x15, 0x98, 0xc0, 0xae, 0xfd, 0xf6, 0x77, 0x1b, 0xba, 0x9f, 0x2c, 0xbc, 0xf3, 0x1d,
	0x4d, 0xfe, 0x0e, 0x8e, 0xee, 0x13, 0xe2, 0xdd, 0x61, 0x01, 0xd0, 0x2a, 0xce, 0x8b, 0x61, 0x8e,
	0x64, 0xd8, 0x04, 0xc9, 0xc7, 0x70, 0x72, 0x68, 0x4e, 0x2e, 0xea, 0x26, 0x55, 0xc5, 0x79, 0xd5,
	0x30, 0xdb, 0x5f, 0x8f, 0x7f, 0xbe, 0xff, 0xcf, 0xec, 0x7a, 0xfc, 0x59, 0xdd, 0xd2, 0xea, 0xce,
	0x59, 0xc3, 0xb0, 0x4e, 0xa4, 0x6e, 0x67, 0x89, 0xec, 0xdb, 0x59, 0xfd, 0x80, 0x5d, 0x1d, 0x22,
	0xff, 0x08, 0xc7, 0x65, 0x76, 0x26, 0x94, 0x27, 0x42, 0xf3, 0xe7, 0xb6, 0x6b, 0x2f, 0x55, 0x8e,
	0x28, 0x0a, 0x8d, 0xe4, 0xbc, 0x61, 0xe7, 0x5f, 0xff, 0xae, 0x5d, 0x76, 0xbb, 0x76, 0xd9, 0xff,
	0xb5, 0xcb, 0xfe, 0x6c, 0xdc, 0xd6, 0xed, 0xc6, 0x6d, 0xfd, 0xdb, 0xb8, 0xad, 0x6f, 0xef, 0xbf,
	0x4b, 0x33, 0xcf, 0xc2, 0xed, 0x88, 0x9e, 0xbe, 0x96, 0x26, 0x9a, 0xc7, 0xab, 0x3c, 0xcf, 0x11,
	0xc5, 0xa5, 0x90, 0xd2, 0x0c, 0xbd, 0xe5, 0xc8, 0xbb, 0x29, 0x15, 0x0f, 0x8b, 0x27, 0x12, 0x3e,
	0xca, 0x6f, 0x8f, 0xee, 0x02, 0x00, 0x00, 0xff, 0xff, 0x36, 0x92, 0x7f, 0x14, 0x41, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LocalhostBifrostClient is the client API for LocalhostBifrost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocalhostBifrostClient interface {
	SendQuorumTx(ctx context.Context, in *common.QuorumTx, opts ...grpc.CallOption) (*SendQuorumTxResult, error)
	SendQuorumNetworkFee(ctx context.Context, in *common.QuorumNetworkFee, opts ...grpc.CallOption) (*SendQuorumNetworkFeeResult, error)
	SendQuorumSolvency(ctx context.Context, in *common.QuorumSolvency, opts ...grpc.CallOption) (*SendQuorumSolvencyResult, error)
	SendQuorumErrataTx(ctx context.Context, in *common.QuorumErrataTx, opts ...grpc.CallOption) (*SendQuorumErrataTxResult, error)
	// Server streaming for notifications
	SubscribeToEvents(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (LocalhostBifrost_SubscribeToEventsClient, error)
}

type localhostBifrostClient struct {
	cc grpc1.ClientConn
}

func NewLocalhostBifrostClient(cc grpc1.ClientConn) LocalhostBifrostClient {
	return &localhostBifrostClient{cc}
}

func (c *localhostBifrostClient) SendQuorumTx(ctx context.Context, in *common.QuorumTx, opts ...grpc.CallOption) (*SendQuorumTxResult, error) {
	out := new(SendQuorumTxResult)
	err := c.cc.Invoke(ctx, "/types.LocalhostBifrost/SendQuorumTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localhostBifrostClient) SendQuorumNetworkFee(ctx context.Context, in *common.QuorumNetworkFee, opts ...grpc.CallOption) (*SendQuorumNetworkFeeResult, error) {
	out := new(SendQuorumNetworkFeeResult)
	err := c.cc.Invoke(ctx, "/types.LocalhostBifrost/SendQuorumNetworkFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localhostBifrostClient) SendQuorumSolvency(ctx context.Context, in *common.QuorumSolvency, opts ...grpc.CallOption) (*SendQuorumSolvencyResult, error) {
	out := new(SendQuorumSolvencyResult)
	err := c.cc.Invoke(ctx, "/types.LocalhostBifrost/SendQuorumSolvency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localhostBifrostClient) SendQuorumErrataTx(ctx context.Context, in *common.QuorumErrataTx, opts ...grpc.CallOption) (*SendQuorumErrataTxResult, error) {
	out := new(SendQuorumErrataTxResult)
	err := c.cc.Invoke(ctx, "/types.LocalhostBifrost/SendQuorumErrataTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localhostBifrostClient) SubscribeToEvents(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (LocalhostBifrost_SubscribeToEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalhostBifrost_serviceDesc.Streams[0], "/types.LocalhostBifrost/SubscribeToEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &localhostBifrostSubscribeToEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LocalhostBifrost_SubscribeToEventsClient interface {
	Recv() (*EventNotification, error)
	grpc.ClientStream
}

type localhostBifrostSubscribeToEventsClient struct {
	grpc.ClientStream
}

func (x *localhostBifrostSubscribeToEventsClient) Recv() (*EventNotification, error) {
	m := new(EventNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LocalhostBifrostServer is the server API for LocalhostBifrost service.
type LocalhostBifrostServer interface {
	SendQuorumTx(context.Context, *common.QuorumTx) (*SendQuorumTxResult, error)
	SendQuorumNetworkFee(context.Context, *common.QuorumNetworkFee) (*SendQuorumNetworkFeeResult, error)
	SendQuorumSolvency(context.Context, *common.QuorumSolvency) (*SendQuorumSolvencyResult, error)
	SendQuorumErrataTx(context.Context, *common.QuorumErrataTx) (*SendQuorumErrataTxResult, error)
	// Server streaming for notifications
	SubscribeToEvents(*SubscribeRequest, LocalhostBifrost_SubscribeToEventsServer) error
}

// UnimplementedLocalhostBifrostServer can be embedded to have forward compatible implementations.
type UnimplementedLocalhostBifrostServer struct {
}

func (*UnimplementedLocalhostBifrostServer) SendQuorumTx(ctx context.Context, req *common.QuorumTx) (*SendQuorumTxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendQuorumTx not implemented")
}
func (*UnimplementedLocalhostBifrostServer) SendQuorumNetworkFee(ctx context.Context, req *common.QuorumNetworkFee) (*SendQuorumNetworkFeeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendQuorumNetworkFee not implemented")
}
func (*UnimplementedLocalhostBifrostServer) SendQuorumSolvency(ctx context.Context, req *common.QuorumSolvency) (*SendQuorumSolvencyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendQuorumSolvency not implemented")
}
func (*UnimplementedLocalhostBifrostServer) SendQuorumErrataTx(ctx context.Context, req *common.QuorumErrataTx) (*SendQuorumErrataTxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendQuorumErrataTx not implemented")
}
func (*UnimplementedLocalhostBifrostServer) SubscribeToEvents(req *SubscribeRequest, srv LocalhostBifrost_SubscribeToEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToEvents not implemented")
}

func RegisterLocalhostBifrostServer(s grpc1.Server, srv LocalhostBifrostServer) {
	s.RegisterService(&_LocalhostBifrost_serviceDesc, srv)
}

func _LocalhostBifrost_SendQuorumTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.QuorumTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalhostBifrostServer).SendQuorumTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.LocalhostBifrost/SendQuorumTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalhostBifrostServer).SendQuorumTx(ctx, req.(*common.QuorumTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalhostBifrost_SendQuorumNetworkFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.QuorumNetworkFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalhostBifrostServer).SendQuorumNetworkFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.LocalhostBifrost/SendQuorumNetworkFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalhostBifrostServer).SendQuorumNetworkFee(ctx, req.(*common.QuorumNetworkFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalhostBifrost_SendQuorumSolvency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.QuorumSolvency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalhostBifrostServer).SendQuorumSolvency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.LocalhostBifrost/SendQuorumSolvency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalhostBifrostServer).SendQuorumSolvency(ctx, req.(*common.QuorumSolvency))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalhostBifrost_SendQuorumErrataTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.QuorumErrataTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalhostBifrostServer).SendQuorumErrataTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.LocalhostBifrost/SendQuorumErrataTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalhostBifrostServer).SendQuorumErrataTx(ctx, req.(*common.QuorumErrataTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalhostBifrost_SubscribeToEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocalhostBifrostServer).SubscribeToEvents(m, &localhostBifrostSubscribeToEventsServer{stream})
}

type LocalhostBifrost_SubscribeToEventsServer interface {
	Send(*EventNotification) error
	grpc.ServerStream
}

type localhostBifrostSubscribeToEventsServer struct {
	grpc.ServerStream
}

func (x *localhostBifrostSubscribeToEventsServer) Send(m *EventNotification) error {
	return x.ServerStream.SendMsg(m)
}

var _LocalhostBifrost_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.LocalhostBifrost",
	HandlerType: (*LocalhostBifrostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendQuorumTx",
			Handler:    _LocalhostBifrost_SendQuorumTx_Handler,
		},
		{
			MethodName: "SendQuorumNetworkFee",
			Handler:    _LocalhostBifrost_SendQuorumNetworkFee_Handler,
		},
		{
			MethodName: "SendQuorumSolvency",
			Handler:    _LocalhostBifrost_SendQuorumSolvency_Handler,
		},
		{
			MethodName: "SendQuorumErrataTx",
			Handler:    _LocalhostBifrost_SendQuorumErrataTx_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToEvents",
			Handler:       _LocalhostBifrost_SubscribeToEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "types/server_bifrost_localhost.proto",
}

func (m *SendQuorumTxResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendQuorumTxResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendQuorumTxResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventTypes) > 0 {
		for iNdEx := len(m.EventTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EventTypes[iNdEx])
			copy(dAtA[i:], m.EventTypes[iNdEx])
			i = encodeVarintServerBifrostLocalhost(dAtA, i, uint64(len(m.EventTypes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EventNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintServerBifrostLocalhost(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintServerBifrostLocalhost(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EventType) > 0 {
		i -= len(m.EventType)
		copy(dAtA[i:], m.EventType)
		i = encodeVarintServerBifrostLocalhost(dAtA, i, uint64(len(m.EventType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendQuorumNetworkFeeResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendQuorumNetworkFeeResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendQuorumNetworkFeeResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SendQuorumSolvencyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendQuorumSolvencyResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendQuorumSolvencyResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SendQuorumErrataTxResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendQuorumErrataTxResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendQuorumErrataTxResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintServerBifrostLocalhost(dAtA []byte, offset int, v uint64) int {
	offset -= sovServerBifrostLocalhost(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SendQuorumTxResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SubscribeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EventTypes) > 0 {
		for _, s := range m.EventTypes {
			l = len(s)
			n += 1 + l + sovServerBifrostLocalhost(uint64(l))
		}
	}
	return n
}

func (m *EventNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventType)
	if l > 0 {
		n += 1 + l + sovServerBifrostLocalhost(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovServerBifrostLocalhost(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovServerBifrostLocalhost(uint64(m.Timestamp))
	}
	return n
}

func (m *SendQuorumNetworkFeeResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SendQuorumSolvencyResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SendQuorumErrataTxResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovServerBifrostLocalhost(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServerBifrostLocalhost(x uint64) (n int) {
	return sovServerBifrostLocalhost(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SendQuorumTxResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerBifrostLocalhost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendQuorumTxResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendQuorumTxResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServerBifrostLocalhost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerBifrostLocalhost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerBifrostLocalhost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerBifrostLocalhost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerBifrostLocalhost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerBifrostLocalhost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventTypes = append(m.EventTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerBifrostLocalhost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerBifrostLocalhost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerBifrostLocalhost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerBifrostLocalhost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerBifrostLocalhost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerBifrostLocalhost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerBifrostLocalhost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServerBifrostLocalhost
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServerBifrostLocalhost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerBifrostLocalhost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServerBifrostLocalhost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerBifrostLocalhost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendQuorumNetworkFeeResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerBifrostLocalhost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendQuorumNetworkFeeResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendQuorumNetworkFeeResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServerBifrostLocalhost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerBifrostLocalhost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendQuorumSolvencyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerBifrostLocalhost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendQuorumSolvencyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendQuorumSolvencyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServerBifrostLocalhost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerBifrostLocalhost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendQuorumErrataTxResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerBifrostLocalhost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendQuorumErrataTxResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendQuorumErrataTxResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServerBifrostLocalhost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerBifrostLocalhost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServerBifrostLocalhost(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServerBifrostLocalhost
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServerBifrostLocalhost
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServerBifrostLocalhost
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServerBifrostLocalhost
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServerBifrostLocalhost
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServerBifrostLocalhost
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServerBifrostLocalhost        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServerBifrostLocalhost          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServerBifrostLocalhost = fmt.Errorf("proto: unexpected end of group")
)
