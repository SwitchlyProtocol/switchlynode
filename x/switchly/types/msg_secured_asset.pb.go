// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/msg_secured_asset.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "github.com/switchlyprotocol/switchlynode/v3/common"
	github_com_switchlyprotocol_switchlynode_v3_common "github.com/switchlyprotocol/switchlynode/v3/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgSecuredAssetDeposit struct {
	Tx      common.Tx                                                `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx"`
	Asset   github_com_switchlyprotocol_switchlynode_v3_common.Asset `protobuf:"bytes,2,opt,name=asset,proto3,customtype=github.com/switchlyprotocol/switchlynode/v3/common.Asset" json:"asset"`
	Amount  cosmossdk_io_math.Uint                                   `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Uint" json:"amount"`
	Address github_com_cosmos_cosmos_sdk_types.AccAddress            `protobuf:"bytes,4,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty"`
	Signer  github_com_cosmos_cosmos_sdk_types.AccAddress            `protobuf:"bytes,5,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgSecuredAssetDeposit) Reset()         { *m = MsgSecuredAssetDeposit{} }
func (m *MsgSecuredAssetDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgSecuredAssetDeposit) ProtoMessage()    {}
func (*MsgSecuredAssetDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_03eaff23360313b1, []int{0}
}
func (m *MsgSecuredAssetDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecuredAssetDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecuredAssetDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecuredAssetDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecuredAssetDeposit.Merge(m, src)
}
func (m *MsgSecuredAssetDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecuredAssetDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecuredAssetDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecuredAssetDeposit proto.InternalMessageInfo

func (m *MsgSecuredAssetDeposit) GetTx() common.Tx {
	if m != nil {
		return m.Tx
	}
	return common.Tx{}
}

func (m *MsgSecuredAssetDeposit) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *MsgSecuredAssetDeposit) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

type MsgSecuredAssetWithdraw struct {
	Tx           common.Tx                                                  `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx"`
	Asset        github_com_switchlyprotocol_switchlynode_v3_common.Asset   `protobuf:"bytes,2,opt,name=asset,proto3,customtype=github.com/switchlyprotocol/switchlynode/v3/common.Asset" json:"asset"`
	Amount       cosmossdk_io_math.Uint                                     `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Uint" json:"amount"`
	AssetAddress github_com_switchlyprotocol_switchlynode_v3_common.Address `protobuf:"bytes,4,opt,name=asset_address,json=assetAddress,proto3,casttype=github.com/switchlyprotocol/switchlynode/v3/common.Address" json:"asset_address,omitempty"`
	Signer       github_com_cosmos_cosmos_sdk_types.AccAddress              `protobuf:"bytes,5,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgSecuredAssetWithdraw) Reset()         { *m = MsgSecuredAssetWithdraw{} }
func (m *MsgSecuredAssetWithdraw) String() string { return proto.CompactTextString(m) }
func (*MsgSecuredAssetWithdraw) ProtoMessage()    {}
func (*MsgSecuredAssetWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_03eaff23360313b1, []int{1}
}
func (m *MsgSecuredAssetWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecuredAssetWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecuredAssetWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecuredAssetWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecuredAssetWithdraw.Merge(m, src)
}
func (m *MsgSecuredAssetWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecuredAssetWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecuredAssetWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecuredAssetWithdraw proto.InternalMessageInfo

func (m *MsgSecuredAssetWithdraw) GetTx() common.Tx {
	if m != nil {
		return m.Tx
	}
	return common.Tx{}
}

func (m *MsgSecuredAssetWithdraw) GetAssetAddress() github_com_switchlyprotocol_switchlynode_v3_common.Address {
	if m != nil {
		return m.AssetAddress
	}
	return ""
}

func (m *MsgSecuredAssetWithdraw) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgSecuredAssetDeposit)(nil), "types.MsgSecuredAssetDeposit")
	proto.RegisterType((*MsgSecuredAssetWithdraw)(nil), "types.MsgSecuredAssetWithdraw")
}

func init() { proto.RegisterFile("types/msg_secured_asset.proto", fileDescriptor_03eaff23360313b1) }

var fileDescriptor_03eaff23360313b1 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x91, 0x3f, 0x6b, 0xdb, 0x40,
	0x18, 0xc6, 0x25, 0xf9, 0x4f, 0xf1, 0xd5, 0x5e, 0xd4, 0xe2, 0x0a, 0x43, 0x25, 0xe1, 0xc9, 0x8b,
	0x75, 0xb4, 0x86, 0x52, 0x4a, 0x29, 0x95, 0xe8, 0x52, 0x42, 0x16, 0xe5, 0x1f, 0x64, 0x31, 0xf2,
	0xe9, 0x90, 0x84, 0x2d, 0x9d, 0xd1, 0x9d, 0x63, 0xf9, 0x2b, 0x64, 0xca, 0xc7, 0xf2, 0xe8, 0x31,
	0x64, 0x10, 0xc1, 0xfe, 0x04, 0x59, 0x3d, 0x05, 0xdd, 0xc9, 0xc6, 0x64, 0x8b, 0xc9, 0x92, 0xe9,
	0x5e, 0xde, 0xf7, 0x79, 0x7f, 0xef, 0xc3, 0x73, 0xe0, 0x2b, 0x5b, 0x4c, 0x31, 0x85, 0x31, 0x0d,
	0x86, 0x14, 0xa3, 0x59, 0x8a, 0xfd, 0xa1, 0x47, 0x29, 0x66, 0xd6, 0x34, 0x25, 0x8c, 0xa8, 0x35,
	0x3e, 0xee, 0x7c, 0x42, 0x24, 0x8e, 0x49, 0x02, 0xc5, 0x23, 0x66, 0x9d, 0xcf, 0x01, 0x09, 0x08,
	0x2f, 0x61, 0x51, 0x89, 0x6e, 0xf7, 0x49, 0x01, 0xed, 0x53, 0x1a, 0x9c, 0x09, 0x98, 0x5d, 0xb0,
	0xfe, 0xe1, 0x29, 0xa1, 0x11, 0x53, 0x4d, 0xa0, 0xb0, 0x4c, 0x93, 0x4d, 0xb9, 0xf7, 0xf1, 0x3b,
	0xb0, 0x4a, 0xd6, 0x79, 0xe6, 0x54, 0x97, 0xb9, 0x21, 0xb9, 0x0a, 0xcb, 0x54, 0x0c, 0x6a, 0xfc,
	0xba, 0xa6, 0x70, 0x51, 0x6b, 0x27, 0xe2, 0x18, 0xe7, 0x6f, 0xa1, 0x7b, 0xc8, 0x8d, 0x9f, 0x41,
	0xc4, 0xc2, 0xd9, 0xa8, 0x18, 0x42, 0x3a, 0x8f, 0x18, 0x0a, 0x27, 0x0b, 0x7e, 0x1c, 0x91, 0xc9,
	0xbe, 0x91, 0x10, 0x1f, 0xc3, 0x9b, 0x01, 0x3c, 0x24, 0xb8, 0x82, 0xae, 0xfe, 0x00, 0x75, 0x2f,
	0x26, 0xb3, 0x84, 0x69, 0x15, 0x53, 0xee, 0x35, 0x1c, 0xbd, 0x04, 0xb7, 0x11, 0xa1, 0x31, 0xa1,
	0xd4, 0x1f, 0x5b, 0x11, 0x81, 0xb1, 0xc7, 0x42, 0xeb, 0x22, 0x4a, 0x98, 0x5b, 0xaa, 0xd5, 0x13,
	0xf0, 0xc1, 0xf3, 0xfd, 0x14, 0x53, 0xaa, 0x55, 0x4d, 0xb9, 0xd7, 0x74, 0xbe, 0x6d, 0x73, 0xa3,
	0x7f, 0xe0, 0x46, 0xec, 0x97, 0x4f, 0x9f, 0xfa, 0x63, 0xc8, 0xf3, 0xb3, 0x6c, 0x84, 0x6c, 0xb1,
	0xe8, 0xee, 0x08, 0xea, 0x7f, 0x50, 0xa7, 0x51, 0x90, 0xe0, 0x54, 0xab, 0x1d, 0xcb, 0x2a, 0x01,
	0xdd, 0xdb, 0x0a, 0xf8, 0xf2, 0x22, 0xf3, 0xab, 0x88, 0x85, 0x7e, 0xea, 0xcd, 0xdf, 0x7f, 0xe8,
	0x08, 0xb4, 0x38, 0x60, 0x78, 0x18, 0x7d, 0xc3, 0xf9, 0xb3, 0xcd, 0x8d, 0x5f, 0xc7, 0x78, 0x2a,
	0xb3, 0x6b, 0x72, 0xa8, 0xfd, 0xe6, 0x9f, 0xe1, 0x5c, 0x2e, 0xd7, 0xba, 0xbc, 0x5a, 0xeb, 0xf2,
	0xe3, 0x5a, 0x97, 0xef, 0x36, 0xba, 0xb4, 0xda, 0xe8, 0xd2, 0xfd, 0x46, 0x97, 0xae, 0x7f, 0xbf,
	0xc6, 0x6e, 0xb6, 0xef, 0x88, 0x53, 0xa3, 0x3a, 0x97, 0x0e, 0x9e, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xa6, 0x8a, 0x03, 0xef, 0xb2, 0x03, 0x00, 0x00,
}

func (m *MsgSecuredAssetDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecuredAssetDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecuredAssetDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgSecuredAsset(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMsgSecuredAsset(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgSecuredAsset(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Asset.Size()
		i -= size
		if _, err := m.Asset.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgSecuredAsset(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgSecuredAsset(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgSecuredAssetWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecuredAssetWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecuredAssetWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgSecuredAsset(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AssetAddress) > 0 {
		i -= len(m.AssetAddress)
		copy(dAtA[i:], m.AssetAddress)
		i = encodeVarintMsgSecuredAsset(dAtA, i, uint64(len(m.AssetAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgSecuredAsset(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Asset.Size()
		i -= size
		if _, err := m.Asset.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgSecuredAsset(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgSecuredAsset(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMsgSecuredAsset(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgSecuredAsset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSecuredAssetDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tx.Size()
	n += 1 + l + sovMsgSecuredAsset(uint64(l))
	l = m.Asset.Size()
	n += 1 + l + sovMsgSecuredAsset(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovMsgSecuredAsset(uint64(l))
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMsgSecuredAsset(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgSecuredAsset(uint64(l))
	}
	return n
}

func (m *MsgSecuredAssetWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tx.Size()
	n += 1 + l + sovMsgSecuredAsset(uint64(l))
	l = m.Asset.Size()
	n += 1 + l + sovMsgSecuredAsset(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovMsgSecuredAsset(uint64(l))
	l = len(m.AssetAddress)
	if l > 0 {
		n += 1 + l + sovMsgSecuredAsset(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgSecuredAsset(uint64(l))
	}
	return n
}

func sovMsgSecuredAsset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgSecuredAsset(x uint64) (n int) {
	return sovMsgSecuredAsset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSecuredAssetDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSecuredAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecuredAssetDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecuredAssetDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSecuredAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSecuredAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSecuredAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSecuredAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSecuredAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSecuredAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecuredAssetWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSecuredAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecuredAssetWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecuredAssetWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSecuredAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSecuredAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSecuredAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSecuredAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetAddress = github_com_switchlyprotocol_switchlynode_v3_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSecuredAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSecuredAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgSecuredAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgSecuredAsset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgSecuredAsset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgSecuredAsset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgSecuredAsset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgSecuredAsset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgSecuredAsset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgSecuredAsset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgSecuredAsset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgSecuredAsset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgSecuredAsset = fmt.Errorf("proto: unexpected end of group")
)
