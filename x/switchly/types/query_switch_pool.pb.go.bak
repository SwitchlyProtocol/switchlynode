// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_switch_pool.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QuerySwitchPoolRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QuerySwitchPoolRequest) Reset()         { *m = QuerySwitchPoolRequest{} }
func (m *QuerySwitchPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySwitchPoolRequest) ProtoMessage()    {}
func (*QuerySwitchPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4645cb1d53df638d, []int{0}
}
func (m *QuerySwitchPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySwitchPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySwitchPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySwitchPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySwitchPoolRequest.Merge(m, src)
}
func (m *QuerySwitchPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySwitchPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySwitchPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySwitchPoolRequest proto.InternalMessageInfo

func (m *QuerySwitchPoolRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QuerySwitchPoolResponse struct {
	Pol       *POL                 `protobuf:"bytes,1,opt,name=pol,proto3" json:"pol"`
	Providers *SwitchPoolProviders `protobuf:"bytes,2,opt,name=providers,proto3" json:"providers"`
	Reserve   *SwitchPoolReserve   `protobuf:"bytes,3,opt,name=reserve,proto3" json:"reserve"`
}

func (m *QuerySwitchPoolResponse) Reset()         { *m = QuerySwitchPoolResponse{} }
func (m *QuerySwitchPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySwitchPoolResponse) ProtoMessage()    {}
func (*QuerySwitchPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4645cb1d53df638d, []int{1}
}
func (m *QuerySwitchPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySwitchPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySwitchPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySwitchPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySwitchPoolResponse.Merge(m, src)
}
func (m *QuerySwitchPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySwitchPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySwitchPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySwitchPoolResponse proto.InternalMessageInfo

func (m *QuerySwitchPoolResponse) GetPol() *POL {
	if m != nil {
		return m.Pol
	}
	return nil
}

func (m *QuerySwitchPoolResponse) GetProviders() *SwitchPoolProviders {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *QuerySwitchPoolResponse) GetReserve() *SwitchPoolReserve {
	if m != nil {
		return m.Reserve
	}
	return nil
}

type POL struct {
	// total amount of SWITCH deposited into the pools
	SwitchDeposited string `protobuf:"bytes,1,opt,name=switch_deposited,json=switchDeposited,proto3" json:"switch_deposited"`
	// total amount of SWITCH withdrawn from the pools
	SwitchWithdrawn string `protobuf:"bytes,2,opt,name=switch_withdrawn,json=switchWithdrawn,proto3" json:"switch_withdrawn"`
	// total value of protocol's LP position in SWITCH value
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value"`
	// profit and loss of protocol owned liquidity
	Pnl string `protobuf:"bytes,4,opt,name=pnl,proto3" json:"pnl"`
	// current amount of switch deposited
	CurrentDeposit string `protobuf:"bytes,5,opt,name=current_deposit,json=currentDeposit,proto3" json:"current_deposit"`
}

func (m *POL) Reset()         { *m = POL{} }
func (m *POL) String() string { return proto.CompactTextString(m) }
func (*POL) ProtoMessage()    {}
func (*POL) Descriptor() ([]byte, []int) {
	return fileDescriptor_4645cb1d53df638d, []int{2}
}
func (m *POL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *POL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_POL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *POL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_POL.Merge(m, src)
}
func (m *POL) XXX_Size() int {
	return m.Size()
}
func (m *POL) XXX_DiscardUnknown() {
	xxx_messageInfo_POL.DiscardUnknown(m)
}

var xxx_messageInfo_POL proto.InternalMessageInfo

func (m *POL) GetSwitchDeposited() string {
	if m != nil {
		return m.SwitchDeposited
	}
	return ""
}

func (m *POL) GetSwitchWithdrawn() string {
	if m != nil {
		return m.SwitchWithdrawn
	}
	return ""
}

func (m *POL) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *POL) GetPnl() string {
	if m != nil {
		return m.Pnl
	}
	return ""
}

func (m *POL) GetCurrentDeposit() string {
	if m != nil {
		return m.CurrentDeposit
	}
	return ""
}

type SwitchPoolProviders struct {
	// the units of SwitchPool owned by providers (including pending)
	Units string `protobuf:"bytes,1,opt,name=units,proto3" json:"units"`
	// the units of SwitchPool owned by providers that remain pending
	PendingUnits string `protobuf:"bytes,2,opt,name=pending_units,json=pendingUnits,proto3" json:"pending_units"`
	// the amount of SWITCH pending
	PendingSwitch string `protobuf:"bytes,3,opt,name=pending_switch,json=pendingSwitch,proto3" json:"pending_switch"`
	// the value of the provider share of the SwitchPool (includes pending SWITCH)
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value"`
	// the profit and loss of the provider share of the SwitchPool
	Pnl string `protobuf:"bytes,5,opt,name=pnl,proto3" json:"pnl"`
	// the current SWITCH deposited by providers
	CurrentDeposit string `protobuf:"bytes,6,opt,name=current_deposit,json=currentDeposit,proto3" json:"current_deposit"`
}

func (m *SwitchPoolProviders) Reset()         { *m = SwitchPoolProviders{} }
func (m *SwitchPoolProviders) String() string { return proto.CompactTextString(m) }
func (*SwitchPoolProviders) ProtoMessage()    {}
func (*SwitchPoolProviders) Descriptor() ([]byte, []int) {
	return fileDescriptor_4645cb1d53df638d, []int{3}
}
func (m *SwitchPoolProviders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwitchPoolProviders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwitchPoolProviders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwitchPoolProviders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwitchPoolProviders.Merge(m, src)
}
func (m *SwitchPoolProviders) XXX_Size() int {
	return m.Size()
}
func (m *SwitchPoolProviders) XXX_DiscardUnknown() {
	xxx_messageInfo_SwitchPoolProviders.DiscardUnknown(m)
}

var xxx_messageInfo_SwitchPoolProviders proto.InternalMessageInfo

func (m *SwitchPoolProviders) GetUnits() string {
	if m != nil {
		return m.Units
	}
	return ""
}

func (m *SwitchPoolProviders) GetPendingUnits() string {
	if m != nil {
		return m.PendingUnits
	}
	return ""
}

func (m *SwitchPoolProviders) GetPendingSwitch() string {
	if m != nil {
		return m.PendingSwitch
	}
	return ""
}

func (m *SwitchPoolProviders) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SwitchPoolProviders) GetPnl() string {
	if m != nil {
		return m.Pnl
	}
	return ""
}

func (m *SwitchPoolProviders) GetCurrentDeposit() string {
	if m != nil {
		return m.CurrentDeposit
	}
	return ""
}

type SwitchPoolReserve struct {
	// the units of SwitchPool owned by the reserve
	Units string `protobuf:"bytes,1,opt,name=units,proto3" json:"units"`
	// the value of the reserve share of the SwitchPool
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	// the profit and loss of the reserve share of the SwitchPool
	Pnl string `protobuf:"bytes,3,opt,name=pnl,proto3" json:"pnl"`
	// the current SWITCH deposited by the reserve
	CurrentDeposit string `protobuf:"bytes,4,opt,name=current_deposit,json=currentDeposit,proto3" json:"current_deposit"`
}

func (m *SwitchPoolReserve) Reset()         { *m = SwitchPoolReserve{} }
func (m *SwitchPoolReserve) String() string { return proto.CompactTextString(m) }
func (*SwitchPoolReserve) ProtoMessage()    {}
func (*SwitchPoolReserve) Descriptor() ([]byte, []int) {
	return fileDescriptor_4645cb1d53df638d, []int{4}
}
func (m *SwitchPoolReserve) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwitchPoolReserve) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwitchPoolReserve.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwitchPoolReserve) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwitchPoolReserve.Merge(m, src)
}
func (m *SwitchPoolReserve) XXX_Size() int {
	return m.Size()
}
func (m *SwitchPoolReserve) XXX_DiscardUnknown() {
	xxx_messageInfo_SwitchPoolReserve.DiscardUnknown(m)
}

var xxx_messageInfo_SwitchPoolReserve proto.InternalMessageInfo

func (m *SwitchPoolReserve) GetUnits() string {
	if m != nil {
		return m.Units
	}
	return ""
}

func (m *SwitchPoolReserve) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SwitchPoolReserve) GetPnl() string {
	if m != nil {
		return m.Pnl
	}
	return ""
}

func (m *SwitchPoolReserve) GetCurrentDeposit() string {
	if m != nil {
		return m.CurrentDeposit
	}
	return ""
}

func init() {
	proto.RegisterType((*QuerySwitchPoolRequest)(nil), "types.QuerySwitchPoolRequest")
	proto.RegisterType((*QuerySwitchPoolResponse)(nil), "types.QuerySwitchPoolResponse")
	proto.RegisterType((*POL)(nil), "types.POL")
	proto.RegisterType((*SwitchPoolProviders)(nil), "types.SwitchPoolProviders")
	proto.RegisterType((*SwitchPoolReserve)(nil), "types.SwitchPoolReserve")
}

func init() { proto.RegisterFile("types/query_switch_pool.proto", fileDescriptor_4645cb1d53df638d) }

var fileDescriptor_4645cb1d53df638d = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x41, 0x6b, 0x13, 0x41,
	0x18, 0xcd, 0x66, 0x93, 0x94, 0x4c, 0x6d, 0x6b, 0xa7, 0xa5, 0xae, 0x05, 0x77, 0x24, 0x20, 0x78,
	0xca, 0x8a, 0x05, 0x41, 0x28, 0x14, 0x16, 0xc1, 0x4b, 0xa1, 0x71, 0x44, 0x05, 0x2f, 0xa1, 0xcd,
	0x0e, 0xbb, 0x0b, 0xeb, 0xcc, 0x74, 0x66, 0x36, 0x31, 0x47, 0xff, 0x81, 0xff, 0xc1, 0xbb, 0xbf,
	0x43, 0x3c, 0xf5, 0xe8, 0x69, 0x91, 0xe4, 0xb6, 0xbf, 0x42, 0x76, 0x66, 0x27, 0xb1, 0x8d, 0xc4,
	0x5c, 0xb2, 0x33, 0xef, 0xbd, 0xef, 0xe5, 0x7d, 0x8f, 0x64, 0xc1, 0x23, 0x35, 0xe5, 0x44, 0x06,
	0xd7, 0x39, 0x11, 0xd3, 0xa1, 0x9c, 0xa4, 0x6a, 0x94, 0x0c, 0x39, 0x63, 0x59, 0x9f, 0x0b, 0xa6,
	0x18, 0x6c, 0x6b, 0xfa, 0xf8, 0x30, 0x66, 0x31, 0xd3, 0x48, 0x50, 0x9d, 0x0c, 0xd9, 0x7b, 0x06,
	0x8e, 0xde, 0x54, 0x73, 0x6f, 0xf5, 0xd8, 0x80, 0xb1, 0x0c, 0x93, 0xeb, 0x9c, 0x48, 0x05, 0x8f,
	0x40, 0x27, 0x21, 0x69, 0x9c, 0x28, 0xcf, 0x79, 0xec, 0x3c, 0xed, 0xe2, 0xfa, 0xd6, 0xfb, 0xe9,
	0x80, 0x07, 0x2b, 0x23, 0x92, 0x33, 0x2a, 0x09, 0x7c, 0x02, 0x5c, 0xce, 0x32, 0x3d, 0xb0, 0xfd,
	0x1c, 0xf4, 0xf5, 0x17, 0xf7, 0x07, 0x17, 0xe7, 0xe1, 0x56, 0x59, 0xa0, 0x8a, 0xc2, 0xd5, 0x07,
	0x7c, 0x0d, 0xba, 0x5c, 0xb0, 0x71, 0x1a, 0x11, 0x21, 0xbd, 0xa6, 0x16, 0x1f, 0xd7, 0xe2, 0xa5,
	0xe9, 0xc0, 0x2a, 0xc2, 0x9d, 0xb2, 0x40, 0xcb, 0x01, 0xbc, 0x3c, 0xc2, 0x33, 0xb0, 0x25, 0x88,
	0x24, 0x62, 0x4c, 0x3c, 0x57, 0xdb, 0x78, 0x2b, 0x36, 0xd8, 0xf0, 0xe1, 0x76, 0x59, 0x20, 0x2b,
	0xc6, 0xf6, 0xd0, 0xfb, 0xd2, 0x04, 0xee, 0xe0, 0xe2, 0x1c, 0x9e, 0x81, 0xfb, 0x75, 0x71, 0x11,
	0xe1, 0x4c, 0xa6, 0x8a, 0x44, 0x66, 0xed, 0xf0, 0xb0, 0x2c, 0xd0, 0x0a, 0x87, 0xf7, 0x0c, 0xf2,
	0xca, 0x02, 0x7f, 0x19, 0x4c, 0x52, 0x95, 0x44, 0xe2, 0x72, 0x42, 0xf5, 0x66, 0xb7, 0x0d, 0x16,
	0x9c, 0x35, 0xf8, 0x60, 0x01, 0x88, 0x40, 0x7b, 0x7c, 0x99, 0xe5, 0x66, 0x91, 0x6e, 0xd8, 0x2d,
	0x0b, 0x64, 0x00, 0x6c, 0x1e, 0xf0, 0x21, 0x70, 0x39, 0xcd, 0xbc, 0x96, 0xa6, 0x4d, 0x9f, 0xb4,
	0xea, 0x93, 0x66, 0xf0, 0x14, 0xec, 0x8d, 0x72, 0x21, 0x08, 0x55, 0x36, 0xa2, 0xd7, 0xd6, 0xb2,
	0x83, 0xb2, 0x40, 0x77, 0x29, 0xbc, 0x5b, 0x03, 0x75, 0xf8, 0xde, 0xb7, 0x26, 0x38, 0xf8, 0x47,
	0xed, 0x55, 0xa2, 0x9c, 0xa6, 0x4a, 0xd6, 0x45, 0xe8, 0x44, 0x1a, 0xc0, 0xe6, 0x01, 0x5f, 0x80,
	0x1d, 0x4e, 0x68, 0x94, 0xd2, 0x78, 0x68, 0x84, 0x66, 0xe1, 0xfd, 0xb2, 0x40, 0xb7, 0x09, 0x7c,
	0xaf, 0xbe, 0xbe, 0xd3, 0x73, 0x2f, 0xc1, 0xae, 0xa5, 0x4d, 0x0b, 0xf5, 0xce, 0xb0, 0x2c, 0xd0,
	0x1d, 0x06, 0x5b, 0x23, 0x13, 0x70, 0xd9, 0x52, 0x6b, 0x7d, 0x4b, 0xed, 0xcd, 0x5a, 0xea, 0x6c,
	0xde, 0xd2, 0x77, 0x07, 0xec, 0xaf, 0xfc, 0xaa, 0xfe, 0xdf, 0xd1, 0x22, 0x70, 0x73, 0x7d, 0x60,
	0x77, 0xb3, 0xc0, 0xad, 0x8d, 0x03, 0x87, 0xef, 0x7f, 0xcc, 0x7c, 0xe7, 0x66, 0xe6, 0x3b, 0xbf,
	0x67, 0xbe, 0xf3, 0x75, 0xee, 0x37, 0x6e, 0xe6, 0x7e, 0xe3, 0xd7, 0xdc, 0x6f, 0x7c, 0x3c, 0x8d,
	0x53, 0x95, 0xe4, 0x57, 0xfd, 0x11, 0xfb, 0x14, 0x98, 0x9a, 0xb3, 0xa9, 0x7e, 0x1b, 0x8c, 0x58,
	0xb6, 0x00, 0x28, 0x8b, 0x48, 0x30, 0x3e, 0x09, 0x3e, 0x2f, 0x90, 0x40, 0xff, 0xb5, 0xae, 0x3a,
	0x5a, 0x7a, 0xf2, 0x27, 0x00, 0x00, 0xff, 0xff, 0x80, 0x75, 0x6a, 0xfd, 0x76, 0x04, 0x00, 0x00,
}

func (m *QuerySwitchPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySwitchPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySwitchPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQuerySwitchPool(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySwitchPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySwitchPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySwitchPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reserve != nil {
		{
			size, err := m.Reserve.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerySwitchPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Providers != nil {
		{
			size, err := m.Providers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerySwitchPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pol != nil {
		{
			size, err := m.Pol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerySwitchPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *POL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *POL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *POL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentDeposit) > 0 {
		i -= len(m.CurrentDeposit)
		copy(dAtA[i:], m.CurrentDeposit)
		i = encodeVarintQuerySwitchPool(dAtA, i, uint64(len(m.CurrentDeposit)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Pnl) > 0 {
		i -= len(m.Pnl)
		copy(dAtA[i:], m.Pnl)
		i = encodeVarintQuerySwitchPool(dAtA, i, uint64(len(m.Pnl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuerySwitchPool(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SwitchWithdrawn) > 0 {
		i -= len(m.SwitchWithdrawn)
		copy(dAtA[i:], m.SwitchWithdrawn)
		i = encodeVarintQuerySwitchPool(dAtA, i, uint64(len(m.SwitchWithdrawn)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SwitchDeposited) > 0 {
		i -= len(m.SwitchDeposited)
		copy(dAtA[i:], m.SwitchDeposited)
		i = encodeVarintQuerySwitchPool(dAtA, i, uint64(len(m.SwitchDeposited)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwitchPoolProviders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwitchPoolProviders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwitchPoolProviders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentDeposit) > 0 {
		i -= len(m.CurrentDeposit)
		copy(dAtA[i:], m.CurrentDeposit)
		i = encodeVarintQuerySwitchPool(dAtA, i, uint64(len(m.CurrentDeposit)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Pnl) > 0 {
		i -= len(m.Pnl)
		copy(dAtA[i:], m.Pnl)
		i = encodeVarintQuerySwitchPool(dAtA, i, uint64(len(m.Pnl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuerySwitchPool(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PendingSwitch) > 0 {
		i -= len(m.PendingSwitch)
		copy(dAtA[i:], m.PendingSwitch)
		i = encodeVarintQuerySwitchPool(dAtA, i, uint64(len(m.PendingSwitch)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PendingUnits) > 0 {
		i -= len(m.PendingUnits)
		copy(dAtA[i:], m.PendingUnits)
		i = encodeVarintQuerySwitchPool(dAtA, i, uint64(len(m.PendingUnits)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Units) > 0 {
		i -= len(m.Units)
		copy(dAtA[i:], m.Units)
		i = encodeVarintQuerySwitchPool(dAtA, i, uint64(len(m.Units)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwitchPoolReserve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwitchPoolReserve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwitchPoolReserve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentDeposit) > 0 {
		i -= len(m.CurrentDeposit)
		copy(dAtA[i:], m.CurrentDeposit)
		i = encodeVarintQuerySwitchPool(dAtA, i, uint64(len(m.CurrentDeposit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Pnl) > 0 {
		i -= len(m.Pnl)
		copy(dAtA[i:], m.Pnl)
		i = encodeVarintQuerySwitchPool(dAtA, i, uint64(len(m.Pnl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuerySwitchPool(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Units) > 0 {
		i -= len(m.Units)
		copy(dAtA[i:], m.Units)
		i = encodeVarintQuerySwitchPool(dAtA, i, uint64(len(m.Units)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuerySwitchPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuerySwitchPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySwitchPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	return n
}

func (m *QuerySwitchPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pol != nil {
		l = m.Pol.Size()
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	if m.Providers != nil {
		l = m.Providers.Size()
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	if m.Reserve != nil {
		l = m.Reserve.Size()
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	return n
}

func (m *POL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SwitchDeposited)
	if l > 0 {
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	l = len(m.SwitchWithdrawn)
	if l > 0 {
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	l = len(m.Pnl)
	if l > 0 {
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	l = len(m.CurrentDeposit)
	if l > 0 {
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	return n
}

func (m *SwitchPoolProviders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Units)
	if l > 0 {
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	l = len(m.PendingUnits)
	if l > 0 {
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	l = len(m.PendingSwitch)
	if l > 0 {
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	l = len(m.Pnl)
	if l > 0 {
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	l = len(m.CurrentDeposit)
	if l > 0 {
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	return n
}

func (m *SwitchPoolReserve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Units)
	if l > 0 {
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	l = len(m.Pnl)
	if l > 0 {
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	l = len(m.CurrentDeposit)
	if l > 0 {
		n += 1 + l + sovQuerySwitchPool(uint64(l))
	}
	return n
}

func sovQuerySwitchPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerySwitchPool(x uint64) (n int) {
	return sovQuerySwitchPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySwitchPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerySwitchPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySwitchPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySwitchPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerySwitchPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySwitchPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerySwitchPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySwitchPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySwitchPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pol == nil {
				m.Pol = &POL{}
			}
			if err := m.Pol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Providers == nil {
				m.Providers = &SwitchPoolProviders{}
			}
			if err := m.Providers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reserve == nil {
				m.Reserve = &SwitchPoolReserve{}
			}
			if err := m.Reserve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerySwitchPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *POL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerySwitchPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: POL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: POL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchDeposited", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwitchDeposited = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchWithdrawn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwitchWithdrawn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pnl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pnl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentDeposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerySwitchPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwitchPoolProviders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerySwitchPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwitchPoolProviders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwitchPoolProviders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingUnits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingSwitch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingSwitch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pnl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pnl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentDeposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerySwitchPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwitchPoolReserve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerySwitchPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwitchPoolReserve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwitchPoolReserve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pnl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pnl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentDeposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerySwitchPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerySwitchPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerySwitchPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerySwitchPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerySwitchPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuerySwitchPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuerySwitchPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuerySwitchPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuerySwitchPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerySwitchPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuerySwitchPool = fmt.Errorf("proto: unexpected end of group")
)
