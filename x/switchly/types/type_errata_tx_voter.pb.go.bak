// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/type_errata_tx_voter.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_switchlyprotocol_switchlynode_v3_common "github.com/switchlyprotocol/switchlynode/v3/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ErrataTxVoter struct {
	TxID        github_com_switchlyprotocol_switchlynode_v3_common.TxID  `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3,casttype=github.com/switchlyprotocol/switchlynode/v3/common.TxID" json:"tx_id,omitempty"`
	Chain       github_com_switchlyprotocol_switchlynode_v3_common.Chain `protobuf:"bytes,2,opt,name=chain,proto3,casttype=github.com/switchlyprotocol/switchlynode/v3/common.Chain" json:"chain,omitempty"`
	BlockHeight int64                                                    `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Signers     []string                                                 `protobuf:"bytes,4,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *ErrataTxVoter) Reset()      { *m = ErrataTxVoter{} }
func (*ErrataTxVoter) ProtoMessage() {}
func (*ErrataTxVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbd88b378975a5a7, []int{0}
}
func (m *ErrataTxVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrataTxVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrataTxVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrataTxVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrataTxVoter.Merge(m, src)
}
func (m *ErrataTxVoter) XXX_Size() int {
	return m.Size()
}
func (m *ErrataTxVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrataTxVoter.DiscardUnknown(m)
}

var xxx_messageInfo_ErrataTxVoter proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ErrataTxVoter)(nil), "types.ErrataTxVoter")
}

func init() { proto.RegisterFile("types/type_errata_tx_voter.proto", fileDescriptor_bbd88b378975a5a7) }

var fileDescriptor_bbd88b378975a5a7 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x31, 0x4f, 0x83, 0x40,
	0x18, 0x86, 0xef, 0x04, 0x34, 0x3d, 0x75, 0x21, 0x0e, 0xc4, 0xe1, 0x40, 0x27, 0x26, 0x18, 0x3a,
	0xe8, 0xd0, 0xa9, 0xd5, 0xc4, 0xae, 0xa4, 0x31, 0xc6, 0x85, 0xc0, 0x71, 0x81, 0x8b, 0xc0, 0x35,
	0x70, 0xd6, 0xeb, 0xe6, 0x4f, 0xf0, 0x67, 0x75, 0xec, 0xd8, 0x89, 0x58, 0xf8, 0x17, 0x4c, 0x86,
	0x6b, 0xec, 0xae, 0xcb, 0xe5, 0xee, 0xb9, 0xf7, 0x7d, 0xf2, 0x25, 0x1f, 0x72, 0xc4, 0x7a, 0x49,
	0x6b, 0x7f, 0x38, 0x43, 0x5a, 0x55, 0x91, 0x88, 0x42, 0x21, 0xc3, 0x15, 0x17, 0xb4, 0xf2, 0x96,
	0x15, 0x17, 0xdc, 0x34, 0x54, 0xe2, 0xfa, 0x2a, 0xe5, 0x29, 0x57, 0xc4, 0x1f, 0x6e, 0x87, 0xcf,
	0xdb, 0x1e, 0xa2, 0xcb, 0x47, 0x55, 0x5b, 0xc8, 0xe7, 0xa1, 0x64, 0xbe, 0x20, 0x43, 0xc8, 0x90,
	0x25, 0x16, 0x74, 0xa0, 0x3b, 0x9a, 0xce, 0xda, 0xc6, 0xd6, 0x17, 0x72, 0xfe, 0xd0, 0x37, 0xf6,
	0x5d, 0xca, 0x44, 0xf6, 0x1e, 0x7b, 0x84, 0x17, 0x7e, 0xfd, 0xc1, 0x04, 0xc9, 0xf2, 0xb5, 0xd2,
	0x10, 0x9e, 0x1f, 0x41, 0xc9, 0x13, 0xea, 0xaf, 0xc6, 0x3e, 0xe1, 0x45, 0xc1, 0x4b, 0x6f, 0xa8,
	0x06, 0xba, 0x90, 0xf3, 0xc4, 0x0c, 0x90, 0x41, 0xb2, 0x88, 0x95, 0xd6, 0x89, 0x32, 0x4f, 0xfa,
	0xc6, 0xbe, 0xff, 0x87, 0x71, 0x36, 0x38, 0x82, 0x83, 0xca, 0xbc, 0x41, 0x17, 0x71, 0xce, 0xc9,
	0x5b, 0x98, 0x51, 0x96, 0x66, 0xc2, 0xd2, 0x1c, 0xe8, 0x6a, 0xc1, 0xb9, 0x62, 0x4f, 0x0a, 0x99,
	0x16, 0x3a, 0xab, 0x59, 0x5a, 0xd2, 0xaa, 0xb6, 0x74, 0x47, 0x73, 0x47, 0xc1, 0xef, 0x73, 0x1a,
	0x6f, 0xf6, 0x18, 0xec, 0xf6, 0x18, 0x7c, 0xb6, 0x18, 0x6c, 0x5a, 0x0c, 0xb7, 0x2d, 0x86, 0xdf,
	0x2d, 0x86, 0x5f, 0x1d, 0x06, 0xdb, 0x0e, 0x83, 0x5d, 0x87, 0xc1, 0xeb, 0xe4, 0x2f, 0x33, 0xca,
	0x23, 0x51, 0x2b, 0xa9, 0xe3, 0x53, 0x15, 0x1d, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xfd, 0xf1,
	0x41, 0x97, 0xa8, 0x01, 0x00, 0x00,
}

func (m *ErrataTxVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrataTxVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrataTxVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTypeErrataTxVoter(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTypeErrataTxVoter(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypeErrataTxVoter(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintTypeErrataTxVoter(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypeErrataTxVoter(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeErrataTxVoter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ErrataTxVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovTypeErrataTxVoter(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypeErrataTxVoter(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTypeErrataTxVoter(uint64(m.BlockHeight))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTypeErrataTxVoter(uint64(l))
		}
	}
	return n
}

func sovTypeErrataTxVoter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeErrataTxVoter(x uint64) (n int) {
	return sovTypeErrataTxVoter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ErrataTxVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeErrataTxVoter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrataTxVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrataTxVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeErrataTxVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeErrataTxVoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeErrataTxVoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = github_com_switchlyprotocol_switchlynode_v3_common.TxID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeErrataTxVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeErrataTxVoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeErrataTxVoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = github_com_switchlyprotocol_switchlynode_v3_common.Chain(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeErrataTxVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeErrataTxVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeErrataTxVoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeErrataTxVoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeErrataTxVoter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeErrataTxVoter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeErrataTxVoter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeErrataTxVoter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeErrataTxVoter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeErrataTxVoter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeErrataTxVoter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeErrataTxVoter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeErrataTxVoter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeErrataTxVoter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeErrataTxVoter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeErrataTxVoter = fmt.Errorf("proto: unexpected end of group")
)
