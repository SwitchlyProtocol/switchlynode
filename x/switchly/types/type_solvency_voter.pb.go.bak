// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/type_solvency_voter.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "github.com/switchlyprotocol/switchlynode/v3/common"
	github_com_switchlyprotocol_switchlynode_v3_common "github.com/switchlyprotocol/switchlynode/v3/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SolvencyVoter struct {
	Id                   github_com_switchlyprotocol_switchlynode_v3_common.TxID   `protobuf:"bytes,1,opt,name=id,proto3,casttype=github.com/switchlyprotocol/switchlynode/v3/common.TxID" json:"id,omitempty"`
	Chain                github_com_switchlyprotocol_switchlynode_v3_common.Chain  `protobuf:"bytes,2,opt,name=chain,proto3,casttype=github.com/switchlyprotocol/switchlynode/v3/common.Chain" json:"chain,omitempty"`
	PubKey               github_com_switchlyprotocol_switchlynode_v3_common.PubKey `protobuf:"bytes,3,opt,name=pub_key,json=pubKey,proto3,casttype=github.com/switchlyprotocol/switchlynode/v3/common.PubKey" json:"pub_key,omitempty"`
	Coins                github_com_switchlyprotocol_switchlynode_v3_common.Coins  `protobuf:"bytes,4,rep,name=coins,proto3,castrepeated=github.com/switchlyprotocol/switchlynode/v3/common.Coins" json:"coins"`
	Height               int64                                                     `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	ConsensusBlockHeight int64                                                     `protobuf:"varint,6,opt,name=consensus_block_height,json=consensusBlockHeight,proto3" json:"consensus_block_height,omitempty"`
	Signers              []string                                                  `protobuf:"bytes,7,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *SolvencyVoter) Reset()      { *m = SolvencyVoter{} }
func (*SolvencyVoter) ProtoMessage() {}
func (*SolvencyVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f0a8e59c04c645d, []int{0}
}
func (m *SolvencyVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SolvencyVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SolvencyVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SolvencyVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolvencyVoter.Merge(m, src)
}
func (m *SolvencyVoter) XXX_Size() int {
	return m.Size()
}
func (m *SolvencyVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_SolvencyVoter.DiscardUnknown(m)
}

var xxx_messageInfo_SolvencyVoter proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SolvencyVoter)(nil), "types.SolvencyVoter")
}

func init() { proto.RegisterFile("types/type_solvency_voter.proto", fileDescriptor_6f0a8e59c04c645d) }

var fileDescriptor_6f0a8e59c04c645d = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xb1, 0x6e, 0x9b, 0x40,
	0x18, 0xc7, 0xc1, 0x14, 0x2c, 0x5f, 0xdb, 0x85, 0x5a, 0x16, 0xf2, 0x70, 0xa0, 0x4e, 0x4c, 0x46,
	0xaa, 0x2b, 0xb5, 0x55, 0x5d, 0xa9, 0xa2, 0x1d, 0x12, 0x79, 0x89, 0x48, 0xe4, 0x21, 0x0b, 0x0a,
	0xc7, 0x09, 0x4e, 0xc6, 0x77, 0xc8, 0x07, 0x8e, 0xd9, 0xf2, 0x08, 0x79, 0x8e, 0x3c, 0x89, 0x47,
	0x4f, 0x91, 0x27, 0x12, 0xe3, 0xb7, 0xf0, 0x14, 0x71, 0xd8, 0xde, 0xe3, 0xe5, 0xbe, 0xfb, 0xfe,
	0xff, 0xff, 0xf7, 0xbb, 0x3b, 0xe9, 0x80, 0x99, 0x15, 0x29, 0xe6, 0x4e, 0xbd, 0xfa, 0x9c, 0x25,
	0x0b, 0x4c, 0x51, 0xe1, 0x2f, 0x58, 0x86, 0xe7, 0x83, 0x74, 0xce, 0x32, 0xa6, 0xab, 0x22, 0xd0,
	0xef, 0x46, 0x2c, 0x62, 0x42, 0x71, 0xea, 0x5d, 0x63, 0xf6, 0xbf, 0x20, 0x36, 0x9b, 0x31, 0xea,
	0x34, 0xa5, 0x11, 0xbf, 0x3e, 0x2b, 0xe0, 0xf3, 0xf5, 0x01, 0x35, 0xa9, 0x49, 0xfa, 0x18, 0xb4,
	0x48, 0x68, 0xc8, 0x96, 0x6c, 0x77, 0xdc, 0xdf, 0xfb, 0xd2, 0xfc, 0x11, 0x91, 0x2c, 0xce, 0x83,
	0x01, 0x62, 0x33, 0x87, 0xdf, 0x93, 0x0c, 0xc5, 0x49, 0x21, 0x66, 0x11, 0x4b, 0x4e, 0x02, 0x65,
	0x21, 0x76, 0x16, 0xc3, 0x23, 0xfb, 0x66, 0x79, 0xf9, 0xdf, 0x6b, 0x91, 0x50, 0xf7, 0x80, 0x8a,
	0xe2, 0x3b, 0x42, 0x8d, 0x96, 0xe0, 0x8d, 0xf6, 0xa5, 0xf9, 0xf3, 0x0c, 0xde, 0xbf, 0x9a, 0xe1,
	0x35, 0x28, 0x7d, 0x02, 0xda, 0x69, 0x1e, 0xf8, 0x53, 0x5c, 0x18, 0x8a, 0xa0, 0xfe, 0xd9, 0x97,
	0xe6, 0xaf, 0x33, 0xa8, 0x57, 0x79, 0x30, 0xc6, 0x85, 0xa7, 0xa5, 0xa2, 0xea, 0x21, 0x50, 0x11,
	0x23, 0x94, 0x1b, 0x1f, 0x2c, 0xc5, 0xfe, 0xf8, 0xed, 0xd3, 0xe0, 0x78, 0x38, 0x23, 0xd4, 0xfd,
	0xbb, 0x2a, 0x4d, 0xe9, 0xe9, 0xe5, 0xbc, 0xdb, 0xd7, 0x54, 0xaf, 0x81, 0xeb, 0x3d, 0xa0, 0xc5,
	0x98, 0x44, 0x71, 0x66, 0xa8, 0x96, 0x6c, 0x2b, 0xde, 0xa1, 0xd3, 0xbf, 0x83, 0x1e, 0x62, 0x94,
	0x63, 0xca, 0x73, 0xee, 0x07, 0x09, 0x43, 0x53, 0xff, 0x90, 0xd3, 0x44, 0xae, 0x7b, 0x72, 0xdd,
	0xda, 0xbc, 0x68, 0xa6, 0x0c, 0xd0, 0xe6, 0x24, 0xa2, 0x78, 0xce, 0x8d, 0xb6, 0xa5, 0xd8, 0x1d,
	0xef, 0xd8, 0xba, 0xc1, 0x6a, 0x0b, 0xa5, 0xcd, 0x16, 0x4a, 0x0f, 0x15, 0x94, 0x56, 0x15, 0x94,
	0xd7, 0x15, 0x94, 0x5f, 0x2b, 0x28, 0x3f, 0xee, 0xa0, 0xb4, 0xde, 0x41, 0x69, 0xb3, 0x83, 0xd2,
	0xed, 0xe8, 0x3d, 0xcf, 0x59, 0x9e, 0x14, 0xf1, 0x05, 0x79, 0xa0, 0x89, 0xe8, 0xf0, 0x2d, 0x00,
	0x00, 0xff, 0xff, 0xbc, 0xcc, 0xb2, 0x24, 0x98, 0x02, 0x00, 0x00,
}

func (m *SolvencyVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SolvencyVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SolvencyVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTypeSolvencyVoter(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.ConsensusBlockHeight != 0 {
		i = encodeVarintTypeSolvencyVoter(dAtA, i, uint64(m.ConsensusBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.Height != 0 {
		i = encodeVarintTypeSolvencyVoter(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypeSolvencyVoter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintTypeSolvencyVoter(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypeSolvencyVoter(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypeSolvencyVoter(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypeSolvencyVoter(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeSolvencyVoter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SolvencyVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypeSolvencyVoter(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypeSolvencyVoter(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovTypeSolvencyVoter(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovTypeSolvencyVoter(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovTypeSolvencyVoter(uint64(m.Height))
	}
	if m.ConsensusBlockHeight != 0 {
		n += 1 + sovTypeSolvencyVoter(uint64(m.ConsensusBlockHeight))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTypeSolvencyVoter(uint64(l))
		}
	}
	return n
}

func sovTypeSolvencyVoter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeSolvencyVoter(x uint64) (n int) {
	return sovTypeSolvencyVoter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SolvencyVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeSolvencyVoter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SolvencyVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SolvencyVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSolvencyVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeSolvencyVoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeSolvencyVoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = github_com_switchlyprotocol_switchlynode_v3_common.TxID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSolvencyVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeSolvencyVoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeSolvencyVoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = github_com_switchlyprotocol_switchlynode_v3_common.Chain(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSolvencyVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeSolvencyVoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeSolvencyVoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = github_com_switchlyprotocol_switchlynode_v3_common.PubKey(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSolvencyVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeSolvencyVoter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeSolvencyVoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, common.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSolvencyVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusBlockHeight", wireType)
			}
			m.ConsensusBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSolvencyVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsensusBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSolvencyVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeSolvencyVoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeSolvencyVoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeSolvencyVoter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeSolvencyVoter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeSolvencyVoter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeSolvencyVoter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeSolvencyVoter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeSolvencyVoter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeSolvencyVoter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeSolvencyVoter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeSolvencyVoter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeSolvencyVoter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeSolvencyVoter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeSolvencyVoter = fmt.Errorf("proto: unexpected end of group")
)
