// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/msg_network_fee.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "github.com/switchlyprotocol/switchlynode/v3/common"
	github_com_switchlyprotocol_switchlynode_v3_common "github.com/switchlyprotocol/switchlynode/v3/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgNetworkFee struct {
	BlockHeight        int64                                                    `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Chain              github_com_switchlyprotocol_switchlynode_v3_common.Chain `protobuf:"bytes,2,opt,name=chain,proto3,casttype=github.com/switchlyprotocol/switchlynode/v3/common.Chain" json:"chain,omitempty"`
	TransactionSize    uint64                                                   `protobuf:"varint,3,opt,name=transaction_size,json=transactionSize,proto3" json:"transaction_size,omitempty"`
	TransactionFeeRate uint64                                                   `protobuf:"varint,4,opt,name=transaction_fee_rate,json=transactionFeeRate,proto3" json:"transaction_fee_rate,omitempty"`
	Signer             github_com_cosmos_cosmos_sdk_types.AccAddress            `protobuf:"bytes,5,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgNetworkFee) Reset()         { *m = MsgNetworkFee{} }
func (m *MsgNetworkFee) String() string { return proto.CompactTextString(m) }
func (*MsgNetworkFee) ProtoMessage()    {}
func (*MsgNetworkFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_1281a46dde06c1b1, []int{0}
}
func (m *MsgNetworkFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNetworkFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNetworkFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNetworkFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNetworkFee.Merge(m, src)
}
func (m *MsgNetworkFee) XXX_Size() int {
	return m.Size()
}
func (m *MsgNetworkFee) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNetworkFee.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNetworkFee proto.InternalMessageInfo

func (m *MsgNetworkFee) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgNetworkFee) GetChain() github_com_switchlyprotocol_switchlynode_v3_common.Chain {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgNetworkFee) GetTransactionSize() uint64 {
	if m != nil {
		return m.TransactionSize
	}
	return 0
}

func (m *MsgNetworkFee) GetTransactionFeeRate() uint64 {
	if m != nil {
		return m.TransactionFeeRate
	}
	return 0
}

func (m *MsgNetworkFee) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

type MsgNetworkFeeQuorum struct {
	QuoNetFee *common.QuorumNetworkFee                      `protobuf:"bytes,1,opt,name=quoNetFee,proto3" json:"quoNetFee,omitempty"`
	Signer    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgNetworkFeeQuorum) Reset()         { *m = MsgNetworkFeeQuorum{} }
func (m *MsgNetworkFeeQuorum) String() string { return proto.CompactTextString(m) }
func (*MsgNetworkFeeQuorum) ProtoMessage()    {}
func (*MsgNetworkFeeQuorum) Descriptor() ([]byte, []int) {
	return fileDescriptor_1281a46dde06c1b1, []int{1}
}
func (m *MsgNetworkFeeQuorum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNetworkFeeQuorum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNetworkFeeQuorum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNetworkFeeQuorum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNetworkFeeQuorum.Merge(m, src)
}
func (m *MsgNetworkFeeQuorum) XXX_Size() int {
	return m.Size()
}
func (m *MsgNetworkFeeQuorum) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNetworkFeeQuorum.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNetworkFeeQuorum proto.InternalMessageInfo

func (m *MsgNetworkFeeQuorum) GetQuoNetFee() *common.QuorumNetworkFee {
	if m != nil {
		return m.QuoNetFee
	}
	return nil
}

func (m *MsgNetworkFeeQuorum) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgNetworkFee)(nil), "types.MsgNetworkFee")
	proto.RegisterType((*MsgNetworkFeeQuorum)(nil), "types.MsgNetworkFeeQuorum")
}

func init() { proto.RegisterFile("types/msg_network_fee.proto", fileDescriptor_1281a46dde06c1b1) }

var fileDescriptor_1281a46dde06c1b1 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0x41, 0x6b, 0xd4, 0x40,
	0x18, 0x86, 0x77, 0xb6, 0xdd, 0x85, 0x4e, 0x2b, 0xea, 0xb4, 0x48, 0x68, 0x25, 0x6e, 0x7b, 0x5a,
	0x0b, 0xcd, 0x48, 0x17, 0x44, 0xa4, 0x97, 0x56, 0x58, 0xbc, 0x58, 0x30, 0x8a, 0x07, 0x2f, 0x21,
	0x99, 0x7c, 0x4d, 0x86, 0xdd, 0xcc, 0x57, 0x33, 0x13, 0x6b, 0xfb, 0x13, 0x3c, 0x79, 0xf6, 0x57,
	0xf4, 0x57, 0x88, 0xc7, 0x9e, 0xc4, 0x93, 0xc8, 0xee, 0xa1, 0xff, 0xc1, 0x93, 0xec, 0x4c, 0xda,
	0x66, 0xc1, 0x8b, 0xd0, 0x4b, 0x26, 0x3c, 0xdf, 0x9b, 0x2f, 0xef, 0xfb, 0x0e, 0xdd, 0x30, 0xa7,
	0xc7, 0xa0, 0x79, 0xa1, 0xb3, 0x48, 0x81, 0x39, 0xc1, 0x72, 0x14, 0x1d, 0x01, 0x04, 0xc7, 0x25,
	0x1a, 0x64, 0x1d, 0x3b, 0x5c, 0x5f, 0xcb, 0x30, 0x43, 0x4b, 0xf8, 0xec, 0xcd, 0x0d, 0xd7, 0xef,
	0xc7, 0x85, 0x54, 0xc8, 0xed, 0xb3, 0x46, 0xab, 0x02, 0x8b, 0x02, 0x15, 0x77, 0x87, 0x83, 0x5b,
	0x3f, 0xda, 0xf4, 0xce, 0x2b, 0x9d, 0x1d, 0xba, 0xed, 0x43, 0x00, 0xb6, 0x49, 0x57, 0x92, 0x31,
	0x8a, 0x51, 0x94, 0x83, 0xcc, 0x72, 0xe3, 0x91, 0x1e, 0xe9, 0x2f, 0x84, 0xcb, 0x96, 0xbd, 0xb4,
	0x88, 0x85, 0xb4, 0x23, 0xf2, 0x58, 0x2a, 0xaf, 0xdd, 0x23, 0xfd, 0xa5, 0x83, 0xbd, 0x3f, 0xbf,
	0x1e, 0x3d, 0xcb, 0xa4, 0xc9, 0xab, 0x24, 0x10, 0x58, 0x70, 0x7d, 0x22, 0x8d, 0xc8, 0xc7, 0xa7,
	0xf6, 0x0f, 0x02, 0xc7, 0xd7, 0x40, 0x61, 0x0a, 0xfc, 0xe3, 0xe0, 0xca, 0xc1, 0x8b, 0xd9, 0x8e,
	0xd0, 0xad, 0x62, 0x8f, 0xe9, 0x3d, 0x53, 0xc6, 0x4a, 0xc7, 0xc2, 0x48, 0x54, 0x91, 0x96, 0x67,
	0xe0, 0x2d, 0xf4, 0x48, 0x7f, 0x31, 0xbc, 0xdb, 0xe0, 0x6f, 0xe4, 0x19, 0xb0, 0x27, 0x74, 0xad,
	0x29, 0x3d, 0x02, 0x88, 0xca, 0xd8, 0x80, 0xb7, 0x68, 0xe5, 0xac, 0x31, 0x1b, 0x02, 0x84, 0xb1,
	0x01, 0xf6, 0x96, 0x76, 0xb5, 0xcc, 0x14, 0x94, 0x5e, 0xa7, 0x47, 0xfa, 0x2b, 0xd6, 0xf1, 0x4e,
	0xc3, 0xb1, 0x40, 0x5d, 0xa0, 0xae, 0x8f, 0x1d, 0x9d, 0x8e, 0xb8, 0xed, 0x36, 0xd8, 0x17, 0x62,
	0x3f, 0x4d, 0x4b, 0xd0, 0xfa, 0xeb, 0xe5, 0xf9, 0x76, 0x37, 0x01, 0x91, 0x0f, 0x76, 0xc3, 0x7a,
	0xd7, 0xf3, 0x8d, 0xcf, 0x97, 0xe7, 0xdb, 0x0f, 0xae, 0xc2, 0xf1, 0xb9, 0x1a, 0xb7, 0xbe, 0x11,
	0xba, 0x3a, 0x47, 0x5e, 0x57, 0x58, 0x56, 0x05, 0x7b, 0x4a, 0x97, 0x3e, 0x54, 0x78, 0x08, 0x66,
	0x08, 0x60, 0xbb, 0x5d, 0xde, 0xf5, 0x82, 0xba, 0x10, 0x27, 0xb9, 0xf9, 0x24, 0xbc, 0x91, 0x36,
	0x22, 0xb4, 0x6f, 0x31, 0xc2, 0xe6, 0x2c, 0xc2, 0xc3, 0x7f, 0x47, 0x70, 0x6e, 0x0e, 0xde, 0x7d,
	0x9f, 0xf8, 0xe4, 0x62, 0xe2, 0x93, 0xdf, 0x13, 0x9f, 0x7c, 0x99, 0xfa, 0xad, 0x8b, 0xa9, 0xdf,
	0xfa, 0x39, 0xf5, 0x5b, 0xef, 0xf7, 0xfe, 0xe7, 0xce, 0x3f, 0x5d, 0x13, 0x67, 0x2c, 0xe9, 0x5a,
	0xe9, 0xe0, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xc3, 0x09, 0x5e, 0xe4, 0x02, 0x00, 0x00,
}

func (m *MsgNetworkFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNetworkFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNetworkFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgNetworkFee(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TransactionFeeRate != 0 {
		i = encodeVarintMsgNetworkFee(dAtA, i, uint64(m.TransactionFeeRate))
		i--
		dAtA[i] = 0x20
	}
	if m.TransactionSize != 0 {
		i = encodeVarintMsgNetworkFee(dAtA, i, uint64(m.TransactionSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintMsgNetworkFee(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if m.BlockHeight != 0 {
		i = encodeVarintMsgNetworkFee(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgNetworkFeeQuorum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNetworkFeeQuorum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNetworkFeeQuorum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgNetworkFee(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.QuoNetFee != nil {
		{
			size, err := m.QuoNetFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgNetworkFee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgNetworkFee(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgNetworkFee(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgNetworkFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovMsgNetworkFee(uint64(m.BlockHeight))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovMsgNetworkFee(uint64(l))
	}
	if m.TransactionSize != 0 {
		n += 1 + sovMsgNetworkFee(uint64(m.TransactionSize))
	}
	if m.TransactionFeeRate != 0 {
		n += 1 + sovMsgNetworkFee(uint64(m.TransactionFeeRate))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgNetworkFee(uint64(l))
	}
	return n
}

func (m *MsgNetworkFeeQuorum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QuoNetFee != nil {
		l = m.QuoNetFee.Size()
		n += 1 + l + sovMsgNetworkFee(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgNetworkFee(uint64(l))
	}
	return n
}

func sovMsgNetworkFee(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgNetworkFee(x uint64) (n int) {
	return sovMsgNetworkFee(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgNetworkFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgNetworkFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNetworkFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNetworkFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNetworkFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNetworkFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgNetworkFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNetworkFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = github_com_switchlyprotocol_switchlynode_v3_common.Chain(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionSize", wireType)
			}
			m.TransactionSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNetworkFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionFeeRate", wireType)
			}
			m.TransactionFeeRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNetworkFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionFeeRate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNetworkFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgNetworkFee
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNetworkFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgNetworkFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgNetworkFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNetworkFeeQuorum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgNetworkFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNetworkFeeQuorum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNetworkFeeQuorum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoNetFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNetworkFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgNetworkFee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNetworkFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuoNetFee == nil {
				m.QuoNetFee = &common.QuorumNetworkFee{}
			}
			if err := m.QuoNetFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgNetworkFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgNetworkFee
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgNetworkFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgNetworkFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgNetworkFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgNetworkFee(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgNetworkFee
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgNetworkFee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgNetworkFee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgNetworkFee
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgNetworkFee
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgNetworkFee
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgNetworkFee        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgNetworkFee          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgNetworkFee = fmt.Errorf("proto: unexpected end of group")
)
