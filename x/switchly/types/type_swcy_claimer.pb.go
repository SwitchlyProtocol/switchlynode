// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/type_swcy_claimer.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/switchlyprotocol/switchlynode/v3/common"
	github_com_switchlyprotocol_switchlynode_v3_common "github.com/switchlyprotocol/switchlynode/v3/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SWCYClaimer struct {
	Asset     github_com_switchlyprotocol_switchlynode_v3_common.Asset   `protobuf:"bytes,1,opt,name=asset,proto3,customtype=github.com/switchlyprotocol/switchlynode/v3/common.Asset" json:"asset"`
	L1Address github_com_switchlyprotocol_switchlynode_v3_common.Address `protobuf:"bytes,2,opt,name=l1_address,json=l1Address,proto3,casttype=github.com/switchlyprotocol/switchlynode/v3/common.Address" json:"l1_address,omitempty"`
	Amount    cosmossdk_io_math.Uint                                     `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Uint" json:"amount"`
}

func (m *SWCYClaimer) Reset()         { *m = SWCYClaimer{} }
func (m *SWCYClaimer) String() string { return proto.CompactTextString(m) }
func (*SWCYClaimer) ProtoMessage()    {}
func (*SWCYClaimer) Descriptor() ([]byte, []int) {
	return fileDescriptor_67087ec6b1767bcb, []int{0}
}
func (m *SWCYClaimer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SWCYClaimer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SWCYClaimer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SWCYClaimer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SWCYClaimer.Merge(m, src)
}
func (m *SWCYClaimer) XXX_Size() int {
	return m.Size()
}
func (m *SWCYClaimer) XXX_DiscardUnknown() {
	xxx_messageInfo_SWCYClaimer.DiscardUnknown(m)
}

var xxx_messageInfo_SWCYClaimer proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SWCYClaimer)(nil), "types.SWCYClaimer")
}

func init() { proto.RegisterFile("types/type_swcy_claimer.proto", fileDescriptor_67087ec6b1767bcb) }

var fileDescriptor_67087ec6b1767bcb = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0xa9, 0x2c, 0x48,
	0x2d, 0xd6, 0x07, 0x91, 0xf1, 0xc5, 0xe5, 0xc9, 0x95, 0xf1, 0xc9, 0x39, 0x89, 0x99, 0xb9, 0xa9,
	0x45, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xac, 0x60, 0x69, 0x29, 0x91, 0xf4, 0xfc, 0xf4,
	0x7c, 0xb0, 0x88, 0x3e, 0x88, 0x05, 0x91, 0x94, 0x12, 0x4e, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0xd3,
	0x87, 0x50, 0x10, 0x41, 0xa5, 0x6e, 0x26, 0x2e, 0xee, 0xe0, 0x70, 0xe7, 0x48, 0x67, 0x88, 0x39,
	0x42, 0xa9, 0x5c, 0xac, 0x89, 0xc5, 0xc5, 0xa9, 0x25, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46,
	0xbc, 0x7a, 0x50, 0xd5, 0x8e, 0x20, 0x41, 0x27, 0x87, 0x13, 0xf7, 0xe4, 0x19, 0x6e, 0xdd, 0x93,
	0xb7, 0x48, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0x02, 0x49, 0xea, 0x17, 0x97, 0x67, 0x96, 0x24, 0x67,
	0xe4, 0x54, 0x82, 0xcd, 0x4b, 0xce, 0xcf, 0x81, 0x0b, 0xe4, 0xe5, 0xa7, 0xa4, 0xea, 0x97, 0x19,
	0xeb, 0x23, 0x9b, 0x10, 0x04, 0x31, 0x5d, 0x28, 0x96, 0x8b, 0x2b, 0xc7, 0x30, 0x3e, 0x31, 0x25,
	0xa5, 0x28, 0xb5, 0xb8, 0x58, 0x82, 0x49, 0x81, 0x51, 0x83, 0xd3, 0xc9, 0xee, 0xd7, 0x3d, 0x79,
	0x2b, 0x72, 0x0c, 0x86, 0x98, 0x12, 0xc4, 0x99, 0x63, 0x08, 0x65, 0x0a, 0x99, 0x71, 0xb1, 0x25,
	0xe6, 0xe6, 0x97, 0xe6, 0x95, 0x48, 0x30, 0x83, 0x8d, 0x96, 0x83, 0xba, 0x5b, 0x2c, 0x39, 0xbf,
	0x38, 0x37, 0xbf, 0xb8, 0x38, 0x25, 0x5b, 0x2f, 0x33, 0x5f, 0x3f, 0x37, 0xb1, 0x24, 0x43, 0x2f,
	0x34, 0x33, 0xaf, 0x24, 0x08, 0xaa, 0xda, 0x29, 0xea, 0xc4, 0x43, 0x39, 0x86, 0x13, 0x8f, 0xe4,
	0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f,
	0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xb2, 0x21, 0xc5, 0x71, 0x15, 0x70, 0x11, 0x70, 0x6c,
	0x15, 0x27, 0xb1, 0x81, 0x95, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xc5, 0x15, 0xac,
	0xc3, 0x01, 0x00, 0x00,
}

func (m *SWCYClaimer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SWCYClaimer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SWCYClaimer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeSwcyClaimer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.L1Address) > 0 {
		i -= len(m.L1Address)
		copy(dAtA[i:], m.L1Address)
		i = encodeVarintTypeSwcyClaimer(dAtA, i, uint64(len(m.L1Address)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Asset.Size()
		i -= size
		if _, err := m.Asset.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeSwcyClaimer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypeSwcyClaimer(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeSwcyClaimer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SWCYClaimer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Asset.Size()
	n += 1 + l + sovTypeSwcyClaimer(uint64(l))
	l = len(m.L1Address)
	if l > 0 {
		n += 1 + l + sovTypeSwcyClaimer(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTypeSwcyClaimer(uint64(l))
	return n
}

func sovTypeSwcyClaimer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeSwcyClaimer(x uint64) (n int) {
	return sovTypeSwcyClaimer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SWCYClaimer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeSwcyClaimer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SWCYClaimer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SWCYClaimer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSwcyClaimer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeSwcyClaimer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeSwcyClaimer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSwcyClaimer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeSwcyClaimer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeSwcyClaimer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L1Address = github_com_switchlyprotocol_switchlynode_v3_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSwcyClaimer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeSwcyClaimer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeSwcyClaimer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeSwcyClaimer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeSwcyClaimer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeSwcyClaimer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeSwcyClaimer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeSwcyClaimer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeSwcyClaimer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeSwcyClaimer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeSwcyClaimer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeSwcyClaimer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeSwcyClaimer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeSwcyClaimer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeSwcyClaimer = fmt.Errorf("proto: unexpected end of group")
)
