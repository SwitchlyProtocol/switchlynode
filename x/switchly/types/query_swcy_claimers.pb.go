// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_swcy_claimers.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QuerySWCYClaimerRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Height  string `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QuerySWCYClaimerRequest) Reset()         { *m = QuerySWCYClaimerRequest{} }
func (m *QuerySWCYClaimerRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySWCYClaimerRequest) ProtoMessage()    {}
func (*QuerySWCYClaimerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8df819680e84381a, []int{0}
}
func (m *QuerySWCYClaimerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySWCYClaimerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySWCYClaimerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySWCYClaimerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySWCYClaimerRequest.Merge(m, src)
}
func (m *QuerySWCYClaimerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySWCYClaimerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySWCYClaimerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySWCYClaimerRequest proto.InternalMessageInfo

func (m *QuerySWCYClaimerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QuerySWCYClaimerRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

// Can we replace this with SWCYClaimer proto? Check json fields...
type QuerySWCYClaimerResponse struct {
	SwcyClaimer []*QuerySWCYClaimer `protobuf:"bytes,1,rep,name=swcy_claimer,json=swcyClaimer,proto3" json:"swcy_claimer,omitempty"`
}

func (m *QuerySWCYClaimerResponse) Reset()         { *m = QuerySWCYClaimerResponse{} }
func (m *QuerySWCYClaimerResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySWCYClaimerResponse) ProtoMessage()    {}
func (*QuerySWCYClaimerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8df819680e84381a, []int{1}
}
func (m *QuerySWCYClaimerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySWCYClaimerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySWCYClaimerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySWCYClaimerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySWCYClaimerResponse.Merge(m, src)
}
func (m *QuerySWCYClaimerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySWCYClaimerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySWCYClaimerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySWCYClaimerResponse proto.InternalMessageInfo

func (m *QuerySWCYClaimerResponse) GetSwcyClaimer() []*QuerySWCYClaimer {
	if m != nil {
		return m.SwcyClaimer
	}
	return nil
}

type QuerySWCYClaimer struct {
	Asset     string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset"`
	L1Address string `protobuf:"bytes,2,opt,name=l1_address,json=l1Address,proto3" json:"l1_address,omitempty"`
	Amount    string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *QuerySWCYClaimer) Reset()         { *m = QuerySWCYClaimer{} }
func (m *QuerySWCYClaimer) String() string { return proto.CompactTextString(m) }
func (*QuerySWCYClaimer) ProtoMessage()    {}
func (*QuerySWCYClaimer) Descriptor() ([]byte, []int) {
	return fileDescriptor_8df819680e84381a, []int{2}
}
func (m *QuerySWCYClaimer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySWCYClaimer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySWCYClaimer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySWCYClaimer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySWCYClaimer.Merge(m, src)
}
func (m *QuerySWCYClaimer) XXX_Size() int {
	return m.Size()
}
func (m *QuerySWCYClaimer) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySWCYClaimer.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySWCYClaimer proto.InternalMessageInfo

func (m *QuerySWCYClaimer) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *QuerySWCYClaimer) GetL1Address() string {
	if m != nil {
		return m.L1Address
	}
	return ""
}

func (m *QuerySWCYClaimer) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type QuerySWCYClaimersRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QuerySWCYClaimersRequest) Reset()         { *m = QuerySWCYClaimersRequest{} }
func (m *QuerySWCYClaimersRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySWCYClaimersRequest) ProtoMessage()    {}
func (*QuerySWCYClaimersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8df819680e84381a, []int{3}
}
func (m *QuerySWCYClaimersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySWCYClaimersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySWCYClaimersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySWCYClaimersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySWCYClaimersRequest.Merge(m, src)
}
func (m *QuerySWCYClaimersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySWCYClaimersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySWCYClaimersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySWCYClaimersRequest proto.InternalMessageInfo

func (m *QuerySWCYClaimersRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QuerySWCYClaimersResponse struct {
	SwcyClaimers []*QuerySWCYClaimer `protobuf:"bytes,1,rep,name=swcy_claimers,json=swcyClaimers,proto3" json:"swcy_claimers,omitempty"`
}

func (m *QuerySWCYClaimersResponse) Reset()         { *m = QuerySWCYClaimersResponse{} }
func (m *QuerySWCYClaimersResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySWCYClaimersResponse) ProtoMessage()    {}
func (*QuerySWCYClaimersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8df819680e84381a, []int{4}
}
func (m *QuerySWCYClaimersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySWCYClaimersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySWCYClaimersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySWCYClaimersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySWCYClaimersResponse.Merge(m, src)
}
func (m *QuerySWCYClaimersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySWCYClaimersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySWCYClaimersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySWCYClaimersResponse proto.InternalMessageInfo

func (m *QuerySWCYClaimersResponse) GetSwcyClaimers() []*QuerySWCYClaimer {
	if m != nil {
		return m.SwcyClaimers
	}
	return nil
}

func init() {
	proto.RegisterType((*QuerySWCYClaimerRequest)(nil), "types.QuerySWCYClaimerRequest")
	proto.RegisterType((*QuerySWCYClaimerResponse)(nil), "types.QuerySWCYClaimerResponse")
	proto.RegisterType((*QuerySWCYClaimer)(nil), "types.QuerySWCYClaimer")
	proto.RegisterType((*QuerySWCYClaimersRequest)(nil), "types.QuerySWCYClaimersRequest")
	proto.RegisterType((*QuerySWCYClaimersResponse)(nil), "types.QuerySWCYClaimersResponse")
}

func init() { proto.RegisterFile("types/query_swcy_claimers.proto", fileDescriptor_8df819680e84381a) }

var fileDescriptor_8df819680e84381a = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x65, 0x25, 0x60, 0x18, 0x30, 0x31, 0x8d, 0x91, 0x6a, 0x62, 0x4b, 0x7a, 0xe2, 0xd4, 0x06,
	0xb8, 0x19, 0x2e, 0xc2, 0xd1, 0x93, 0x35, 0xc1, 0xe0, 0x85, 0x94, 0xb2, 0x69, 0x9b, 0x14, 0x16,
	0x3a, 0x5b, 0xb0, 0x7f, 0xe1, 0x67, 0x79, 0xe4, 0xe8, 0x89, 0x18, 0xb8, 0xf1, 0x15, 0x86, 0xed,
	0x82, 0x60, 0x4d, 0x3c, 0x6d, 0xe7, 0xcd, 0x7b, 0xd3, 0x37, 0x6f, 0x40, 0xe7, 0xc9, 0x94, 0xa2,
	0x35, 0x8b, 0x69, 0x94, 0x0c, 0x70, 0xe1, 0x26, 0x03, 0x37, 0x74, 0x82, 0x31, 0x8d, 0xd0, 0x9c,
	0x46, 0x8c, 0x33, 0xa5, 0x20, 0x08, 0xb7, 0x57, 0x1e, 0xf3, 0x98, 0x40, 0xac, 0xdd, 0x57, 0xda,
	0x34, 0x1e, 0xa1, 0xfa, 0xb4, 0x53, 0x3e, 0xbf, 0x74, 0xfb, 0xdd, 0x54, 0x67, 0xd3, 0x59, 0x4c,
	0x91, 0x2b, 0x2a, 0x9c, 0x3b, 0xa3, 0x51, 0x44, 0x11, 0x55, 0x52, 0x23, 0xf5, 0x92, 0xbd, 0x2f,
	0x95, 0x6b, 0x28, 0xfa, 0x34, 0xf0, 0x7c, 0xae, 0x9e, 0x89, 0x86, 0xac, 0x8c, 0x1e, 0xa8, 0xd9,
	0x61, 0x38, 0x65, 0x13, 0xa4, 0xca, 0x3d, 0x54, 0x8e, 0xcd, 0xa9, 0xa4, 0x96, 0xaf, 0x97, 0x9b,
	0x55, 0x53, 0x98, 0x33, 0x33, 0xb2, 0xf2, 0x8e, 0x2c, 0x0b, 0x63, 0x0e, 0x97, 0xbf, 0x09, 0x8a,
	0x0e, 0x05, 0x07, 0x91, 0xf2, 0xd4, 0x5b, 0xa7, 0xb4, 0x5d, 0xe9, 0x29, 0x60, 0xa7, 0x8f, 0x72,
	0x07, 0x10, 0x36, 0x06, 0xfb, 0x0d, 0x52, 0xa3, 0xa5, 0xb0, 0xf1, 0x20, 0x77, 0x30, 0xa0, 0xe8,
	0x8c, 0x59, 0x3c, 0xe1, 0x6a, 0x5e, 0x0c, 0x80, 0xed, 0x4a, 0x97, 0x88, 0x2d, 0x5f, 0xa3, 0x99,
	0xdd, 0x07, 0xf7, 0xe9, 0xfc, 0x64, 0x40, 0x4e, 0x32, 0xe8, 0xc3, 0xcd, 0x1f, 0x1a, 0x19, 0x42,
	0x1b, 0x2e, 0x4e, 0x2e, 0xf4, 0x5f, 0x0a, 0x95, 0xa3, 0x14, 0xb0, 0xd3, 0xfb, 0x58, 0x6b, 0x64,
	0xb9, 0xd6, 0xc8, 0xd7, 0x5a, 0x23, 0xef, 0x1b, 0x2d, 0xb7, 0xdc, 0x68, 0xb9, 0xcf, 0x8d, 0x96,
	0x7b, 0x6d, 0x7b, 0x01, 0xf7, 0xe3, 0xa1, 0xe9, 0xb2, 0xb1, 0x85, 0x8b, 0x80, 0xbb, 0x7e, 0x98,
	0x88, 0xfb, 0xba, 0x2c, 0x3c, 0x00, 0x13, 0x36, 0xa2, 0xd6, 0xbc, 0x65, 0xbd, 0x1d, 0x10, 0x4b,
	0xfc, 0x76, 0x58, 0x14, 0xd4, 0xd6, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x81, 0xf6, 0x1a, 0x09,
	0x4a, 0x02, 0x00, 0x00,
}

func (m *QuerySWCYClaimerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySWCYClaimerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySWCYClaimerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQuerySwcyClaimers(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuerySwcyClaimers(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySWCYClaimerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySWCYClaimerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySWCYClaimerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwcyClaimer) > 0 {
		for iNdEx := len(m.SwcyClaimer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwcyClaimer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerySwcyClaimers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySWCYClaimer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySWCYClaimer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySWCYClaimer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuerySwcyClaimers(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.L1Address) > 0 {
		i -= len(m.L1Address)
		copy(dAtA[i:], m.L1Address)
		i = encodeVarintQuerySwcyClaimers(dAtA, i, uint64(len(m.L1Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintQuerySwcyClaimers(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySWCYClaimersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySWCYClaimersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySWCYClaimersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQuerySwcyClaimers(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySWCYClaimersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySWCYClaimersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySWCYClaimersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwcyClaimers) > 0 {
		for iNdEx := len(m.SwcyClaimers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwcyClaimers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerySwcyClaimers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuerySwcyClaimers(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuerySwcyClaimers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySWCYClaimerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuerySwcyClaimers(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQuerySwcyClaimers(uint64(l))
	}
	return n
}

func (m *QuerySWCYClaimerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SwcyClaimer) > 0 {
		for _, e := range m.SwcyClaimer {
			l = e.Size()
			n += 1 + l + sovQuerySwcyClaimers(uint64(l))
		}
	}
	return n
}

func (m *QuerySWCYClaimer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovQuerySwcyClaimers(uint64(l))
	}
	l = len(m.L1Address)
	if l > 0 {
		n += 1 + l + sovQuerySwcyClaimers(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuerySwcyClaimers(uint64(l))
	}
	return n
}

func (m *QuerySWCYClaimersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQuerySwcyClaimers(uint64(l))
	}
	return n
}

func (m *QuerySWCYClaimersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SwcyClaimers) > 0 {
		for _, e := range m.SwcyClaimers {
			l = e.Size()
			n += 1 + l + sovQuerySwcyClaimers(uint64(l))
		}
	}
	return n
}

func sovQuerySwcyClaimers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerySwcyClaimers(x uint64) (n int) {
	return sovQuerySwcyClaimers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySWCYClaimerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerySwcyClaimers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySWCYClaimerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySWCYClaimerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwcyClaimers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwcyClaimers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerySwcyClaimers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySWCYClaimerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerySwcyClaimers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySWCYClaimerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySWCYClaimerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwcyClaimer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwcyClaimers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwcyClaimer = append(m.SwcyClaimer, &QuerySWCYClaimer{})
			if err := m.SwcyClaimer[len(m.SwcyClaimer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerySwcyClaimers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySWCYClaimer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerySwcyClaimers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySWCYClaimer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySWCYClaimer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwcyClaimers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwcyClaimers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L1Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwcyClaimers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerySwcyClaimers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySWCYClaimersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerySwcyClaimers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySWCYClaimersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySWCYClaimersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwcyClaimers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerySwcyClaimers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySWCYClaimersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerySwcyClaimers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySWCYClaimersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySWCYClaimersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwcyClaimers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwcyClaimers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwcyClaimers = append(m.SwcyClaimers, &QuerySWCYClaimer{})
			if err := m.SwcyClaimers[len(m.SwcyClaimers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerySwcyClaimers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerySwcyClaimers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerySwcyClaimers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerySwcyClaimers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerySwcyClaimers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerySwcyClaimers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuerySwcyClaimers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuerySwcyClaimers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuerySwcyClaimers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuerySwcyClaimers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerySwcyClaimers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuerySwcyClaimers = fmt.Errorf("proto: unexpected end of group")
)
