// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_outbound.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "github.com/switchlyprotocol/switchlynode/v3/common"
	github_com_switchlyprotocol_switchlynode_v3_common "github.com/switchlyprotocol/switchlynode/v3/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryScheduledOutboundRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryScheduledOutboundRequest) Reset()         { *m = QueryScheduledOutboundRequest{} }
func (m *QueryScheduledOutboundRequest) String() string { return proto.CompactTextString(m) }
func (*QueryScheduledOutboundRequest) ProtoMessage()    {}
func (*QueryScheduledOutboundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1b4ec75ddefb0b2, []int{0}
}
func (m *QueryScheduledOutboundRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryScheduledOutboundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryScheduledOutboundRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryScheduledOutboundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryScheduledOutboundRequest.Merge(m, src)
}
func (m *QueryScheduledOutboundRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryScheduledOutboundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryScheduledOutboundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryScheduledOutboundRequest proto.InternalMessageInfo

func (m *QueryScheduledOutboundRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryPendingOutboundRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryPendingOutboundRequest) Reset()         { *m = QueryPendingOutboundRequest{} }
func (m *QueryPendingOutboundRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingOutboundRequest) ProtoMessage()    {}
func (*QueryPendingOutboundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1b4ec75ddefb0b2, []int{1}
}
func (m *QueryPendingOutboundRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingOutboundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingOutboundRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingOutboundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingOutboundRequest.Merge(m, src)
}
func (m *QueryPendingOutboundRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingOutboundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingOutboundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingOutboundRequest proto.InternalMessageInfo

func (m *QueryPendingOutboundRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryOutboundResponse struct {
	TxOutItems []*QueryTxOutItem `protobuf:"bytes,1,rep,name=tx_out_items,json=txOutItems,proto3" json:"tx_out_items,omitempty"`
}

func (m *QueryOutboundResponse) Reset()         { *m = QueryOutboundResponse{} }
func (m *QueryOutboundResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOutboundResponse) ProtoMessage()    {}
func (*QueryOutboundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1b4ec75ddefb0b2, []int{2}
}
func (m *QueryOutboundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutboundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutboundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutboundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutboundResponse.Merge(m, src)
}
func (m *QueryOutboundResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutboundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutboundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutboundResponse proto.InternalMessageInfo

func (m *QueryOutboundResponse) GetTxOutItems() []*QueryTxOutItem {
	if m != nil {
		return m.TxOutItems
	}
	return nil
}

// Fields are rearranged for querier response readability while preserving their field numbers.
type QueryTxOutItem struct {
	Height                int64                                                  `protobuf:"varint,10,opt,name=height,proto3" json:"height,omitempty"`
	VaultPubKey           string                                                 `protobuf:"bytes,3,opt,name=vault_pub_key,json=vaultPubKey,proto3" json:"vault_pub_key,omitempty"`
	InHash                string                                                 `protobuf:"bytes,8,opt,name=in_hash,json=inHash,proto3" json:"in_hash,omitempty"`
	OutHash               string                                                 `protobuf:"bytes,9,opt,name=out_hash,json=outHash,proto3" json:"out_hash,omitempty"`
	Chain                 string                                                 `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain"`
	ToAddress             string                                                 `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address"`
	Coin                  *common.Coin                                           `protobuf:"bytes,4,opt,name=coin,proto3" json:"coin"`
	MaxGas                github_com_switchlyprotocol_switchlynode_v3_common.Gas `protobuf:"bytes,6,rep,name=max_gas,json=maxGas,proto3,castrepeated=github.com/switchlyprotocol/switchlynode/v3/common.Gas" json:"max_gas"`
	GasRate               int64                                                  `protobuf:"varint,7,opt,name=gas_rate,json=gasRate,proto3" json:"gas_rate,omitempty"`
	Memo                  string                                                 `protobuf:"bytes,5,opt,name=memo,proto3" json:"memo,omitempty"`
	Aggregator            string                                                 `protobuf:"bytes,12,opt,name=aggregator,proto3" json:"aggregator,omitempty"`
	AggregatorTargetAsset string                                                 `protobuf:"bytes,13,opt,name=aggregator_target_asset,json=aggregatorTargetAsset,proto3" json:"aggregator_target_asset,omitempty"`
	AggregatorTargetLimit string                                                 `protobuf:"bytes,14,opt,name=aggregator_target_limit,json=aggregatorTargetLimit,proto3" json:"aggregator_target_limit,omitempty"`
	// clout spent in SWITCH for the outbound
	CloutSpent string `protobuf:"bytes,11,opt,name=clout_spent,json=cloutSpent,proto3" json:"clout_spent,omitempty"`
}

func (m *QueryTxOutItem) Reset()         { *m = QueryTxOutItem{} }
func (m *QueryTxOutItem) String() string { return proto.CompactTextString(m) }
func (*QueryTxOutItem) ProtoMessage()    {}
func (*QueryTxOutItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1b4ec75ddefb0b2, []int{3}
}
func (m *QueryTxOutItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxOutItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxOutItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxOutItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxOutItem.Merge(m, src)
}
func (m *QueryTxOutItem) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxOutItem) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxOutItem.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxOutItem proto.InternalMessageInfo

func (m *QueryTxOutItem) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryTxOutItem) GetVaultPubKey() string {
	if m != nil {
		return m.VaultPubKey
	}
	return ""
}

func (m *QueryTxOutItem) GetInHash() string {
	if m != nil {
		return m.InHash
	}
	return ""
}

func (m *QueryTxOutItem) GetOutHash() string {
	if m != nil {
		return m.OutHash
	}
	return ""
}

func (m *QueryTxOutItem) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *QueryTxOutItem) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *QueryTxOutItem) GetCoin() *common.Coin {
	if m != nil {
		return m.Coin
	}
	return nil
}

func (m *QueryTxOutItem) GetMaxGas() github_com_switchlyprotocol_switchlynode_v3_common.Gas {
	if m != nil {
		return m.MaxGas
	}
	return nil
}

func (m *QueryTxOutItem) GetGasRate() int64 {
	if m != nil {
		return m.GasRate
	}
	return 0
}

func (m *QueryTxOutItem) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *QueryTxOutItem) GetAggregator() string {
	if m != nil {
		return m.Aggregator
	}
	return ""
}

func (m *QueryTxOutItem) GetAggregatorTargetAsset() string {
	if m != nil {
		return m.AggregatorTargetAsset
	}
	return ""
}

func (m *QueryTxOutItem) GetAggregatorTargetLimit() string {
	if m != nil {
		return m.AggregatorTargetLimit
	}
	return ""
}

func (m *QueryTxOutItem) GetCloutSpent() string {
	if m != nil {
		return m.CloutSpent
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryScheduledOutboundRequest)(nil), "types.QueryScheduledOutboundRequest")
	proto.RegisterType((*QueryPendingOutboundRequest)(nil), "types.QueryPendingOutboundRequest")
	proto.RegisterType((*QueryOutboundResponse)(nil), "types.QueryOutboundResponse")
	proto.RegisterType((*QueryTxOutItem)(nil), "types.QueryTxOutItem")
}

func init() { proto.RegisterFile("types/query_outbound.proto", fileDescriptor_d1b4ec75ddefb0b2) }

var fileDescriptor_d1b4ec75ddefb0b2 = []byte{
	// 563 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4e, 0xdb, 0x4c,
	0x10, 0xc7, 0xe3, 0x8f, 0x90, 0x90, 0x0d, 0x70, 0xd8, 0xaf, 0x94, 0x2d, 0x55, 0xed, 0x28, 0xa7,
	0xa8, 0x52, 0x63, 0x09, 0x54, 0xb8, 0xf4, 0x02, 0x3d, 0x50, 0xd4, 0x4a, 0x50, 0x83, 0x7a, 0xe8,
	0xc5, 0xda, 0xd8, 0xab, 0xf5, 0xaa, 0xf6, 0xae, 0xf1, 0x8e, 0x69, 0xf2, 0x16, 0x7d, 0x8e, 0x3e,
	0x09, 0xa7, 0x8a, 0x63, 0x4f, 0x69, 0x05, 0xb7, 0x3c, 0x45, 0xe5, 0x31, 0x81, 0x20, 0x71, 0x68,
	0x2f, 0xf6, 0xec, 0xff, 0xf7, 0x9f, 0xdd, 0xd9, 0xd9, 0x21, 0x5b, 0x30, 0xc9, 0x85, 0xf5, 0xcf,
	0x4b, 0x51, 0x4c, 0x42, 0x53, 0xc2, 0xc8, 0x94, 0x3a, 0x1e, 0xe6, 0x85, 0x01, 0x43, 0x97, 0x91,
	0x6d, 0x3d, 0x91, 0x46, 0x1a, 0x54, 0xfc, 0x2a, 0xaa, 0xe1, 0xd6, 0xff, 0x91, 0xc9, 0x32, 0xa3,
	0xfd, 0xfa, 0x57, 0x8b, 0xfd, 0x3d, 0xf2, 0xe2, 0x63, 0xb5, 0xd3, 0x69, 0x94, 0x88, 0xb8, 0x4c,
	0x45, 0x7c, 0x7c, 0xbb, 0x63, 0x20, 0xce, 0x4b, 0x61, 0x81, 0x3e, 0x25, 0xad, 0x44, 0x28, 0x99,
	0x00, 0x73, 0x7a, 0xce, 0xa0, 0x13, 0xdc, 0xae, 0xfa, 0xaf, 0xc9, 0x73, 0x4c, 0x3c, 0x11, 0x3a,
	0x56, 0x5a, 0xfe, 0x6d, 0xda, 0x09, 0xd9, 0xc0, 0xb4, 0x7b, 0xbf, 0xcd, 0x8d, 0xb6, 0x82, 0xee,
	0x91, 0x55, 0x18, 0x57, 0xf7, 0x09, 0x15, 0x88, 0xcc, 0x32, 0xa7, 0xb7, 0x34, 0xe8, 0x6e, 0x6f,
	0x0c, 0xf1, 0x46, 0x43, 0xcc, 0x39, 0x1b, 0x1f, 0x97, 0x70, 0x04, 0x22, 0x0b, 0x08, 0xcc, 0x43,
	0xdb, 0xff, 0xd1, 0x24, 0xeb, 0x0f, 0xf1, 0xc2, 0xe1, 0xa4, 0xe7, 0x0c, 0x96, 0xe6, 0x87, 0xd3,
	0x3e, 0x59, 0xbb, 0xe0, 0x65, 0x0a, 0x61, 0x5e, 0x8e, 0xc2, 0x2f, 0x62, 0xc2, 0x96, 0xb0, 0xb6,
	0x2e, 0x8a, 0x27, 0xe5, 0xe8, 0xbd, 0x98, 0xd0, 0x4d, 0xd2, 0x56, 0x3a, 0x4c, 0xb8, 0x4d, 0xd8,
	0x4a, 0x5d, 0xb9, 0xd2, 0xef, 0xb8, 0x4d, 0xe8, 0x33, 0xb2, 0x52, 0x55, 0x87, 0xa4, 0x83, 0xa4,
	0x6d, 0x4a, 0x40, 0xe4, 0x91, 0xe5, 0x28, 0xe1, 0x4a, 0xd7, 0x77, 0x3d, 0xe8, 0xcc, 0xa6, 0x5e,
	0x2d, 0x04, 0xf5, 0x8f, 0xbe, 0x22, 0x04, 0x4c, 0xc8, 0xe3, 0xb8, 0x10, 0xd6, 0xb2, 0xff, 0xd0,
	0xb5, 0x3e, 0x9b, 0x7a, 0x0b, 0x6a, 0xd0, 0x01, 0xb3, 0x5f, 0x87, 0xf4, 0x25, 0x69, 0x46, 0x46,
	0x69, 0xd6, 0xec, 0x39, 0x83, 0xee, 0xf6, 0xea, 0xf0, 0xf6, 0xc5, 0xde, 0x1a, 0xa5, 0x0f, 0x56,
	0x66, 0x53, 0x0f, 0x69, 0x80, 0x5f, 0x9a, 0x93, 0x76, 0xc6, 0xc7, 0xa1, 0xe4, 0x96, 0xb5, 0xb0,
	0x65, 0x0f, 0xed, 0x47, 0x97, 0x53, 0xaf, 0x31, 0x9b, 0x7a, 0x73, 0xd3, 0xf7, 0x5f, 0xde, 0xae,
	0x54, 0x90, 0x94, 0xa3, 0xca, 0xe6, 0xdb, 0xaf, 0x0a, 0xa2, 0x24, 0x9d, 0xe0, 0x30, 0x44, 0x26,
	0xbd, 0x13, 0xb4, 0x89, 0x85, 0x7f, 0xb1, 0x33, 0x1f, 0x96, 0x43, 0x6e, 0x83, 0x56, 0xc6, 0xc7,
	0x87, 0xdc, 0x56, 0x8d, 0x90, 0xdc, 0x86, 0x05, 0x07, 0xc1, 0xda, 0xd8, 0xdf, 0xb6, 0xe4, 0x36,
	0xe0, 0x20, 0x28, 0x25, 0xcd, 0x4c, 0x64, 0x86, 0x2d, 0x63, 0x7f, 0x30, 0xa6, 0x2e, 0x21, 0x5c,
	0xca, 0x42, 0x48, 0x0e, 0xa6, 0x60, 0xab, 0x48, 0x16, 0x14, 0xba, 0x4b, 0x36, 0xef, 0x57, 0x21,
	0xf0, 0x42, 0x0a, 0x08, 0xb9, 0xb5, 0x02, 0xd8, 0x1a, 0x9a, 0x37, 0xee, 0xf1, 0x19, 0xd2, 0xfd,
	0x0a, 0x3e, 0x9e, 0x97, 0xaa, 0x4c, 0x01, 0x5b, 0x7f, 0x3c, 0xef, 0x43, 0x05, 0xa9, 0x47, 0xba,
	0x51, 0x5a, 0xbd, 0xa4, 0xcd, 0x85, 0x06, 0xd6, 0xad, 0x0b, 0x42, 0xe9, 0xb4, 0x52, 0x0e, 0x3e,
	0x5d, 0x5e, 0xbb, 0xce, 0xd5, 0xb5, 0xeb, 0xfc, 0xbe, 0x76, 0x9d, 0x6f, 0x37, 0x6e, 0xe3, 0xea,
	0xc6, 0x6d, 0xfc, 0xbc, 0x71, 0x1b, 0x9f, 0xdf, 0xfc, 0x4b, 0xe7, 0xc6, 0x77, 0x8a, 0x8f, 0x33,
	0x3c, 0x6a, 0xa1, 0x75, 0xe7, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x59, 0x37, 0x3d, 0xd7, 0xc1,
	0x03, 0x00, 0x00,
}

func (m *QueryScheduledOutboundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryScheduledOutboundRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryScheduledOutboundRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryOutbound(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingOutboundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingOutboundRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingOutboundRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryOutbound(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutboundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutboundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutboundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxOutItems) > 0 {
		for iNdEx := len(m.TxOutItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxOutItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryOutbound(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxOutItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxOutItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxOutItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AggregatorTargetLimit) > 0 {
		i -= len(m.AggregatorTargetLimit)
		copy(dAtA[i:], m.AggregatorTargetLimit)
		i = encodeVarintQueryOutbound(dAtA, i, uint64(len(m.AggregatorTargetLimit)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.AggregatorTargetAsset) > 0 {
		i -= len(m.AggregatorTargetAsset)
		copy(dAtA[i:], m.AggregatorTargetAsset)
		i = encodeVarintQueryOutbound(dAtA, i, uint64(len(m.AggregatorTargetAsset)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Aggregator) > 0 {
		i -= len(m.Aggregator)
		copy(dAtA[i:], m.Aggregator)
		i = encodeVarintQueryOutbound(dAtA, i, uint64(len(m.Aggregator)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.CloutSpent) > 0 {
		i -= len(m.CloutSpent)
		copy(dAtA[i:], m.CloutSpent)
		i = encodeVarintQueryOutbound(dAtA, i, uint64(len(m.CloutSpent)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Height != 0 {
		i = encodeVarintQueryOutbound(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x50
	}
	if len(m.OutHash) > 0 {
		i -= len(m.OutHash)
		copy(dAtA[i:], m.OutHash)
		i = encodeVarintQueryOutbound(dAtA, i, uint64(len(m.OutHash)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.InHash) > 0 {
		i -= len(m.InHash)
		copy(dAtA[i:], m.InHash)
		i = encodeVarintQueryOutbound(dAtA, i, uint64(len(m.InHash)))
		i--
		dAtA[i] = 0x42
	}
	if m.GasRate != 0 {
		i = encodeVarintQueryOutbound(dAtA, i, uint64(m.GasRate))
		i--
		dAtA[i] = 0x38
	}
	if len(m.MaxGas) > 0 {
		for iNdEx := len(m.MaxGas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxGas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryOutbound(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintQueryOutbound(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Coin != nil {
		{
			size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryOutbound(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.VaultPubKey) > 0 {
		i -= len(m.VaultPubKey)
		copy(dAtA[i:], m.VaultPubKey)
		i = encodeVarintQueryOutbound(dAtA, i, uint64(len(m.VaultPubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintQueryOutbound(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQueryOutbound(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryOutbound(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryOutbound(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryScheduledOutboundRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryOutbound(uint64(l))
	}
	return n
}

func (m *QueryPendingOutboundRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryOutbound(uint64(l))
	}
	return n
}

func (m *QueryOutboundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TxOutItems) > 0 {
		for _, e := range m.TxOutItems {
			l = e.Size()
			n += 1 + l + sovQueryOutbound(uint64(l))
		}
	}
	return n
}

func (m *QueryTxOutItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQueryOutbound(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovQueryOutbound(uint64(l))
	}
	l = len(m.VaultPubKey)
	if l > 0 {
		n += 1 + l + sovQueryOutbound(uint64(l))
	}
	if m.Coin != nil {
		l = m.Coin.Size()
		n += 1 + l + sovQueryOutbound(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovQueryOutbound(uint64(l))
	}
	if len(m.MaxGas) > 0 {
		for _, e := range m.MaxGas {
			l = e.Size()
			n += 1 + l + sovQueryOutbound(uint64(l))
		}
	}
	if m.GasRate != 0 {
		n += 1 + sovQueryOutbound(uint64(m.GasRate))
	}
	l = len(m.InHash)
	if l > 0 {
		n += 1 + l + sovQueryOutbound(uint64(l))
	}
	l = len(m.OutHash)
	if l > 0 {
		n += 1 + l + sovQueryOutbound(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQueryOutbound(uint64(m.Height))
	}
	l = len(m.CloutSpent)
	if l > 0 {
		n += 1 + l + sovQueryOutbound(uint64(l))
	}
	l = len(m.Aggregator)
	if l > 0 {
		n += 1 + l + sovQueryOutbound(uint64(l))
	}
	l = len(m.AggregatorTargetAsset)
	if l > 0 {
		n += 1 + l + sovQueryOutbound(uint64(l))
	}
	l = len(m.AggregatorTargetLimit)
	if l > 0 {
		n += 1 + l + sovQueryOutbound(uint64(l))
	}
	return n
}

func sovQueryOutbound(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryOutbound(x uint64) (n int) {
	return sovQueryOutbound(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryScheduledOutboundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryOutbound
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryScheduledOutboundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryScheduledOutboundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryOutbound(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingOutboundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryOutbound
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingOutboundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingOutboundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryOutbound(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutboundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryOutbound
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutboundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutboundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOutItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxOutItems = append(m.TxOutItems, &QueryTxOutItem{})
			if err := m.TxOutItems[len(m.TxOutItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryOutbound(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxOutItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryOutbound
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxOutItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxOutItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coin == nil {
				m.Coin = &common.Coin{}
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxGas = append(m.MaxGas, common.Coin{})
			if err := m.MaxGas[len(m.MaxGas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasRate", wireType)
			}
			m.GasRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloutSpent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloutSpent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aggregator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorTargetAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregatorTargetAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorTargetLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregatorTargetLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryOutbound(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryOutbound
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryOutbound(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryOutbound
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryOutbound
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryOutbound
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryOutbound
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryOutbound
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryOutbound        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryOutbound          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryOutbound = fmt.Errorf("proto: unexpected end of group")
)
