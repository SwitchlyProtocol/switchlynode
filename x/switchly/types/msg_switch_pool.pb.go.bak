// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/msg_switch_pool.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "github.com/switchlyprotocol/switchlynode/v3/common"
	github_com_switchlyprotocol_switchlynode_v3_common "github.com/switchlyprotocol/switchlynode/v3/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgSwitchPoolDeposit struct {
	Signer github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
	Tx     common.Tx                                     `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx"`
}

func (m *MsgSwitchPoolDeposit) Reset()         { *m = MsgSwitchPoolDeposit{} }
func (m *MsgSwitchPoolDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgSwitchPoolDeposit) ProtoMessage()    {}
func (*MsgSwitchPoolDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6c15e16af8528b2, []int{0}
}
func (m *MsgSwitchPoolDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwitchPoolDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwitchPoolDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwitchPoolDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwitchPoolDeposit.Merge(m, src)
}
func (m *MsgSwitchPoolDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwitchPoolDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwitchPoolDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwitchPoolDeposit proto.InternalMessageInfo

func (m *MsgSwitchPoolDeposit) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func (m *MsgSwitchPoolDeposit) GetTx() common.Tx {
	if m != nil {
		return m.Tx
	}
	return common.Tx{}
}

type MsgSwitchPoolWithdraw struct {
	Signer               github_com_cosmos_cosmos_sdk_types.AccAddress              `protobuf:"bytes,1,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
	Tx                   common.Tx                                                  `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx"`
	BasisPoints          cosmossdk_io_math.Uint                                     `protobuf:"bytes,3,opt,name=basis_points,json=basisPoints,proto3,customtype=cosmossdk.io/math.Uint" json:"basis_points"`
	AffiliateAddress     github_com_switchlyprotocol_switchlynode_v3_common.Address `protobuf:"bytes,4,opt,name=affiliate_address,json=affiliateAddress,proto3,casttype=github.com/switchlyprotocol/switchlynode/v3/common.Address" json:"affiliate_address,omitempty"`
	AffiliateBasisPoints cosmossdk_io_math.Uint                                     `protobuf:"bytes,5,opt,name=affiliate_basis_points,json=affiliateBasisPoints,proto3,customtype=cosmossdk.io/math.Uint" json:"affiliate_basis_points"`
}

func (m *MsgSwitchPoolWithdraw) Reset()         { *m = MsgSwitchPoolWithdraw{} }
func (m *MsgSwitchPoolWithdraw) String() string { return proto.CompactTextString(m) }
func (*MsgSwitchPoolWithdraw) ProtoMessage()    {}
func (*MsgSwitchPoolWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6c15e16af8528b2, []int{1}
}
func (m *MsgSwitchPoolWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwitchPoolWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwitchPoolWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwitchPoolWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwitchPoolWithdraw.Merge(m, src)
}
func (m *MsgSwitchPoolWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwitchPoolWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwitchPoolWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwitchPoolWithdraw proto.InternalMessageInfo

func (m *MsgSwitchPoolWithdraw) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func (m *MsgSwitchPoolWithdraw) GetTx() common.Tx {
	if m != nil {
		return m.Tx
	}
	return common.Tx{}
}

func (m *MsgSwitchPoolWithdraw) GetAffiliateAddress() github_com_switchlyprotocol_switchlynode_v3_common.Address {
	if m != nil {
		return m.AffiliateAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgSwitchPoolDeposit)(nil), "types.MsgSwitchPoolDeposit")
	proto.RegisterType((*MsgSwitchPoolWithdraw)(nil), "types.MsgSwitchPoolWithdraw")
}

func init() { proto.RegisterFile("types/msg_switch_pool.proto", fileDescriptor_e6c15e16af8528b2) }

var fileDescriptor_e6c15e16af8528b2 = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x91, 0xbf, 0x6f, 0xda, 0x40,
	0x14, 0xc7, 0x7d, 0xfc, 0x92, 0x7a, 0x30, 0xb4, 0x2e, 0x45, 0x16, 0x95, 0x6c, 0x8b, 0x89, 0x05,
	0x5b, 0x2d, 0x5b, 0x55, 0x55, 0xc2, 0xea, 0xd2, 0xa1, 0x12, 0xa2, 0x34, 0x91, 0xb2, 0x58, 0xc6,
	0x36, 0xf6, 0x09, 0xdb, 0xcf, 0xf2, 0x5d, 0x82, 0x99, 0xb3, 0x65, 0xca, 0x9f, 0xc5, 0xc8, 0x18,
	0x65, 0xb0, 0x22, 0xf8, 0x2f, 0x98, 0x22, 0xce, 0xc6, 0x84, 0x2d, 0x59, 0x32, 0xdd, 0xd3, 0xf7,
	0xdd, 0xfb, 0xbe, 0xcf, 0xd3, 0x17, 0x7f, 0x65, 0xab, 0xd8, 0xa5, 0x7a, 0x48, 0x3d, 0x93, 0x2e,
	0x09, 0xb3, 0x7d, 0x33, 0x06, 0x08, 0xb4, 0x38, 0x01, 0x06, 0x62, 0x9d, 0x37, 0xbb, 0x9f, 0x6d,
	0x08, 0x43, 0x88, 0xf4, 0xfc, 0xc9, 0x7b, 0xdd, 0xb6, 0x07, 0x1e, 0xf0, 0x52, 0x3f, 0x54, 0xb9,
	0xda, 0xbb, 0x45, 0xb8, 0xfd, 0x97, 0x7a, 0xff, 0xb8, 0xd5, 0x18, 0x20, 0xf8, 0xed, 0xc6, 0x40,
	0x09, 0x13, 0xff, 0xe0, 0x06, 0x25, 0x5e, 0xe4, 0x26, 0x12, 0x52, 0x51, 0xbf, 0x65, 0x7c, 0xdb,
	0x67, 0xca, 0xc0, 0x23, 0xcc, 0xbf, 0x9e, 0x69, 0x36, 0x84, 0xba, 0x0d, 0x34, 0x04, 0x5a, 0x3c,
	0x03, 0xea, 0x2c, 0x74, 0xbe, 0x5b, 0x1b, 0xd9, 0xf6, 0xc8, 0x71, 0x12, 0x97, 0xd2, 0x49, 0x61,
	0x20, 0xaa, 0xb8, 0xc2, 0x52, 0xa9, 0xa2, 0xa2, 0x7e, 0xf3, 0x3b, 0xd6, 0x0a, 0xa8, 0x69, 0x6a,
	0xd4, 0xd6, 0x99, 0x22, 0x4c, 0x2a, 0x2c, 0xed, 0xdd, 0x55, 0xf1, 0x97, 0x33, 0x8a, 0x4b, 0xc2,
	0x7c, 0x27, 0xb1, 0x96, 0xef, 0x8a, 0x21, 0x8e, 0x70, 0x6b, 0x66, 0x51, 0x42, 0xcd, 0x18, 0x48,
	0xc4, 0xa8, 0x54, 0x55, 0x51, 0xff, 0x83, 0x21, 0x1f, 0xfa, 0x8f, 0x99, 0xd2, 0xc9, 0x97, 0x50,
	0x67, 0xa1, 0x11, 0xd0, 0x43, 0x8b, 0xf9, 0xda, 0x7f, 0x12, 0xb1, 0x49, 0x93, 0xcf, 0x8c, 0xf9,
	0x88, 0xb8, 0xc0, 0x9f, 0xac, 0xf9, 0x9c, 0x04, 0xc4, 0x62, 0xae, 0x69, 0xe5, 0x04, 0x52, 0x8d,
	0xfb, 0xfc, 0xda, 0x67, 0xca, 0x8f, 0x17, 0xe8, 0x79, 0x7c, 0xc1, 0x8a, 0x07, 0x61, 0x43, 0x50,
	0x0a, 0x11, 0x38, 0xae, 0x7e, 0x33, 0x3c, 0xc6, 0x77, 0xbc, 0xe3, 0x63, 0x69, 0x5c, 0x28, 0xe2,
	0x14, 0x77, 0x4e, 0xcb, 0xce, 0xc8, 0xeb, 0xaf, 0x22, 0x6f, 0x97, 0xd3, 0xc6, 0xe9, 0x04, 0xe3,
	0x62, 0xbd, 0x95, 0xd1, 0x66, 0x2b, 0xa3, 0xa7, 0xad, 0x8c, 0xee, 0x77, 0xb2, 0xb0, 0xd9, 0xc9,
	0xc2, 0xc3, 0x4e, 0x16, 0xae, 0x7e, 0xbe, 0x85, 0x3e, 0x2d, 0x95, 0x3c, 0x92, 0x59, 0x83, 0x7f,
	0x1d, 0x3e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x17, 0xce, 0x2c, 0xc2, 0x02, 0x00, 0x00,
}

func (m *MsgSwitchPoolDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwitchPoolDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwitchPoolDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgSwitchPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgSwitchPool(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwitchPoolWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwitchPoolWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwitchPoolWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.AffiliateBasisPoints.Size()
		i -= size
		if _, err := m.AffiliateBasisPoints.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgSwitchPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.AffiliateAddress) > 0 {
		i -= len(m.AffiliateAddress)
		copy(dAtA[i:], m.AffiliateAddress)
		i = encodeVarintMsgSwitchPool(dAtA, i, uint64(len(m.AffiliateAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.BasisPoints.Size()
		i -= size
		if _, err := m.BasisPoints.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgSwitchPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgSwitchPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgSwitchPool(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgSwitchPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgSwitchPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSwitchPoolDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgSwitchPool(uint64(l))
	}
	l = m.Tx.Size()
	n += 1 + l + sovMsgSwitchPool(uint64(l))
	return n
}

func (m *MsgSwitchPoolWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgSwitchPool(uint64(l))
	}
	l = m.Tx.Size()
	n += 1 + l + sovMsgSwitchPool(uint64(l))
	l = m.BasisPoints.Size()
	n += 1 + l + sovMsgSwitchPool(uint64(l))
	l = len(m.AffiliateAddress)
	if l > 0 {
		n += 1 + l + sovMsgSwitchPool(uint64(l))
	}
	l = m.AffiliateBasisPoints.Size()
	n += 1 + l + sovMsgSwitchPool(uint64(l))
	return n
}

func sovMsgSwitchPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgSwitchPool(x uint64) (n int) {
	return sovMsgSwitchPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSwitchPoolDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSwitchPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwitchPoolDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwitchPoolDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgSwitchPool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSwitchPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSwitchPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgSwitchPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwitchPoolWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSwitchPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwitchPoolWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwitchPoolWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgSwitchPool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSwitchPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasisPoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BasisPoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliateAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AffiliateAddress = github_com_switchlyprotocol_switchlynode_v3_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliateBasisPoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwitchPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSwitchPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwitchPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AffiliateBasisPoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSwitchPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgSwitchPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgSwitchPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgSwitchPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgSwitchPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgSwitchPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgSwitchPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgSwitchPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgSwitchPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgSwitchPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgSwitchPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgSwitchPool = fmt.Errorf("proto: unexpected end of group")
)
