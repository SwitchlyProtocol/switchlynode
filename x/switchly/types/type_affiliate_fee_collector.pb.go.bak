// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/type_affiliate_fee_collector.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AffiliateFeeCollector struct {
	OwnerAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner_address,omitempty"`
	SwitchAmount cosmossdk_io_math.Uint                        `protobuf:"bytes,2,opt,name=switch_amount,json=switchAmount,proto3,customtype=cosmossdk.io/math.Uint" json:"switch_amount"`
}

func (m *AffiliateFeeCollector) Reset()         { *m = AffiliateFeeCollector{} }
func (m *AffiliateFeeCollector) String() string { return proto.CompactTextString(m) }
func (*AffiliateFeeCollector) ProtoMessage()    {}
func (*AffiliateFeeCollector) Descriptor() ([]byte, []int) {
	return fileDescriptor_733fb7c2eff10fa5, []int{0}
}
func (m *AffiliateFeeCollector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AffiliateFeeCollector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AffiliateFeeCollector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AffiliateFeeCollector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffiliateFeeCollector.Merge(m, src)
}
func (m *AffiliateFeeCollector) XXX_Size() int {
	return m.Size()
}
func (m *AffiliateFeeCollector) XXX_DiscardUnknown() {
	xxx_messageInfo_AffiliateFeeCollector.DiscardUnknown(m)
}

var xxx_messageInfo_AffiliateFeeCollector proto.InternalMessageInfo

func (m *AffiliateFeeCollector) GetOwnerAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.OwnerAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*AffiliateFeeCollector)(nil), "types.AffiliateFeeCollector")
}

func init() {
	proto.RegisterFile("types/type_affiliate_fee_collector.proto", fileDescriptor_733fb7c2eff10fa5)
}

var fileDescriptor_733fb7c2eff10fa5 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x33, 0x82, 0x82, 0x21, 0xdd, 0x04, 0x95, 0xe2, 0x62, 0x52, 0x5c, 0x65, 0xd3, 0x0c,
	0xd2, 0xad, 0x9b, 0xa4, 0xe0, 0x03, 0x14, 0xec, 0xc2, 0x4d, 0x48, 0x27, 0x37, 0xc9, 0xd0, 0x24,
	0xb7, 0x64, 0xa6, 0xd6, 0xbe, 0x85, 0x0f, 0xe3, 0x43, 0x74, 0xd9, 0xa5, 0xb8, 0x08, 0x92, 0xbc,
	0x85, 0x2b, 0xe9, 0x4c, 0x5b, 0xdc, 0xcc, 0xcf, 0xb9, 0xe7, 0x3b, 0x9c, 0x6b, 0xfb, 0x6a, 0xbb,
	0x02, 0xc9, 0x0e, 0x67, 0x9c, 0x64, 0x99, 0x28, 0x45, 0xa2, 0x20, 0xce, 0x00, 0x62, 0x8e, 0x65,
	0x09, 0x5c, 0x61, 0x13, 0xac, 0x1a, 0x54, 0xe8, 0x5e, 0x6a, 0xe7, 0xfd, 0x4d, 0x8e, 0x39, 0x6a,
	0x85, 0x1d, 0x5e, 0x66, 0xf8, 0xf0, 0x49, 0xec, 0xdb, 0xf0, 0x84, 0x3f, 0x03, 0x4c, 0x4f, 0xb0,
	0x3b, 0xb7, 0x07, 0xb8, 0xa9, 0xa1, 0x89, 0x93, 0x34, 0x6d, 0x40, 0xca, 0x21, 0x19, 0x11, 0xdf,
	0x89, 0x1e, 0x7f, 0x5b, 0x6f, 0x9c, 0x0b, 0x55, 0xac, 0x17, 0x01, 0xc7, 0x8a, 0x71, 0x94, 0x15,
	0xca, 0xe3, 0x35, 0x96, 0xe9, 0x52, 0x57, 0x92, 0x41, 0xc8, 0x79, 0x68, 0xc0, 0x99, 0xa3, 0x73,
	0x8e, 0x3f, 0x77, 0x6a, 0x0f, 0xe4, 0x46, 0x28, 0x5e, 0xc4, 0x49, 0x85, 0xeb, 0x5a, 0x0d, 0x2f,
	0x46, 0xc4, 0xbf, 0x8e, 0xe8, 0xae, 0xf5, 0xac, 0xef, 0xd6, 0xbb, 0x33, 0x49, 0x32, 0x5d, 0x06,
	0x02, 0x59, 0x95, 0xa8, 0x22, 0x78, 0x11, 0xb5, 0x9a, 0x39, 0x06, 0x0a, 0x35, 0x13, 0xcd, 0x77,
	0x1d, 0x25, 0xfb, 0x8e, 0x92, 0x9f, 0x8e, 0x92, 0x8f, 0x9e, 0x5a, 0xfb, 0x9e, 0x5a, 0x5f, 0x3d,
	0xb5, 0x5e, 0x9f, 0xfe, 0x75, 0x33, 0x48, 0xb9, 0xd5, 0xab, 0x72, 0x2c, 0xcf, 0x42, 0x8d, 0x29,
	0xb0, 0xb7, 0x09, 0x7b, 0x3f, 0x2b, 0xa6, 0xf5, 0xe2, 0x4a, 0x5b, 0x27, 0x7f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xc8, 0x1e, 0xa2, 0x33, 0x5e, 0x01, 0x00, 0x00,
}

func (m *AffiliateFeeCollector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AffiliateFeeCollector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AffiliateFeeCollector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SwitchAmount.Size()
		i -= size
		if _, err := m.SwitchAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeAffiliateFeeCollector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTypeAffiliateFeeCollector(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypeAffiliateFeeCollector(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeAffiliateFeeCollector(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AffiliateFeeCollector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTypeAffiliateFeeCollector(uint64(l))
	}
	l = m.SwitchAmount.Size()
	n += 1 + l + sovTypeAffiliateFeeCollector(uint64(l))
	return n
}

func sovTypeAffiliateFeeCollector(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeAffiliateFeeCollector(x uint64) (n int) {
	return sovTypeAffiliateFeeCollector(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AffiliateFeeCollector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeAffiliateFeeCollector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AffiliateFeeCollector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AffiliateFeeCollector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeAffiliateFeeCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypeAffiliateFeeCollector
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeAffiliateFeeCollector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = append(m.OwnerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.OwnerAddress == nil {
				m.OwnerAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeAffiliateFeeCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeAffiliateFeeCollector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeAffiliateFeeCollector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwitchAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeAffiliateFeeCollector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeAffiliateFeeCollector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeAffiliateFeeCollector(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeAffiliateFeeCollector
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeAffiliateFeeCollector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeAffiliateFeeCollector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeAffiliateFeeCollector
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeAffiliateFeeCollector
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeAffiliateFeeCollector
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeAffiliateFeeCollector        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeAffiliateFeeCollector          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeAffiliateFeeCollector = fmt.Errorf("proto: unexpected end of group")
)
