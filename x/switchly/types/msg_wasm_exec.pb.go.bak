// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/msg_wasm_exec.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "github.com/switchlyprotocol/switchlynode/v3/common"
	github_com_switchlyprotocol_switchlynode_v3_common "github.com/switchlyprotocol/switchlynode/v3/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgWasmExec struct {
	Tx       common.Tx                                                `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx"`
	Asset    github_com_switchlyprotocol_switchlynode_v3_common.Asset `protobuf:"bytes,2,opt,name=asset,proto3,customtype=github.com/switchlyprotocol/switchlynode/v3/common.Asset" json:"asset"`
	Amount   cosmossdk_io_math.Uint                                   `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Uint" json:"amount"`
	Contract github_com_cosmos_cosmos_sdk_types.AccAddress            `protobuf:"bytes,4,opt,name=contract,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"contract,omitempty"`
	Msg      []byte                                                   `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	Sender   github_com_cosmos_cosmos_sdk_types.AccAddress            `protobuf:"bytes,6,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	Signer   github_com_cosmos_cosmos_sdk_types.AccAddress            `protobuf:"bytes,7,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgWasmExec) Reset()         { *m = MsgWasmExec{} }
func (m *MsgWasmExec) String() string { return proto.CompactTextString(m) }
func (*MsgWasmExec) ProtoMessage()    {}
func (*MsgWasmExec) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcee9537ca44a0f9, []int{0}
}
func (m *MsgWasmExec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWasmExec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWasmExec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWasmExec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWasmExec.Merge(m, src)
}
func (m *MsgWasmExec) XXX_Size() int {
	return m.Size()
}
func (m *MsgWasmExec) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWasmExec.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWasmExec proto.InternalMessageInfo

func (m *MsgWasmExec) GetTx() common.Tx {
	if m != nil {
		return m.Tx
	}
	return common.Tx{}
}

func (m *MsgWasmExec) GetContract() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *MsgWasmExec) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *MsgWasmExec) GetSender() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *MsgWasmExec) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgWasmExec)(nil), "types.MsgWasmExec")
}

func init() { proto.RegisterFile("types/msg_wasm_exec.proto", fileDescriptor_bcee9537ca44a0f9) }

var fileDescriptor_bcee9537ca44a0f9 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x3f, 0x4b, 0xc3, 0x40,
	0x18, 0xc6, 0x93, 0xfe, 0x89, 0x7a, 0x55, 0x90, 0x28, 0x12, 0x3b, 0xa4, 0xc1, 0xa9, 0x4b, 0x73,
	0x68, 0x41, 0x1c, 0x1c, 0x6c, 0xc0, 0xc1, 0xa1, 0x4b, 0xf0, 0x0f, 0xb8, 0x94, 0xf4, 0x72, 0xa4,
	0xa1, 0xbd, 0xbb, 0x92, 0xf7, 0x6a, 0xd3, 0x6f, 0xe1, 0x97, 0x12, 0x3a, 0x76, 0x14, 0x87, 0x22,
	0xed, 0xb7, 0x70, 0x92, 0x5c, 0x62, 0xe9, 0x6a, 0xa7, 0xf7, 0xe1, 0x79, 0x1e, 0x7e, 0xef, 0x71,
	0x2f, 0x3a, 0x97, 0xb3, 0x31, 0x05, 0xcc, 0x20, 0xea, 0x4d, 0x03, 0x60, 0x3d, 0x9a, 0x52, 0xe2,
	0x8e, 0x13, 0x21, 0x85, 0x59, 0x55, 0x51, 0xfd, 0x84, 0x08, 0xc6, 0x04, 0xc7, 0xf9, 0xc8, 0xb3,
	0xfa, 0x69, 0x24, 0x22, 0xa1, 0x24, 0xce, 0x54, 0xee, 0x5e, 0x7c, 0x94, 0x51, 0xad, 0x0b, 0xd1,
	0x4b, 0x00, 0xec, 0x3e, 0xa5, 0xc4, 0x74, 0x50, 0x49, 0xa6, 0x96, 0xee, 0xe8, 0xcd, 0xda, 0x15,
	0x72, 0x0b, 0xc0, 0x63, 0xea, 0x55, 0xe6, 0xcb, 0x86, 0xe6, 0x97, 0x64, 0x6a, 0x52, 0x54, 0x0d,
	0x00, 0xa8, 0xb4, 0x4a, 0xaa, 0x74, 0xf4, 0x57, 0xea, 0x64, 0xa6, 0x77, 0x97, 0xf5, 0xbe, 0x96,
	0x8d, 0x9b, 0x28, 0x96, 0x83, 0x49, 0x3f, 0x0b, 0x31, 0x4c, 0x63, 0x49, 0x06, 0xa3, 0x99, 0xda,
	0x48, 0xc4, 0x68, 0x63, 0x70, 0x11, 0x52, 0xfc, 0xd6, 0xc6, 0xdb, 0x04, 0x3f, 0xa7, 0x9b, 0xd7,
	0xc8, 0x08, 0x98, 0x98, 0x70, 0x69, 0x95, 0x1d, 0xbd, 0x79, 0xe0, 0xd9, 0x05, 0xf8, 0x8c, 0x08,
	0x60, 0x02, 0x20, 0x1c, 0xba, 0xb1, 0xc0, 0x2c, 0x90, 0x03, 0xf7, 0x29, 0xe6, 0xd2, 0x2f, 0xda,
	0x66, 0x17, 0xed, 0x13, 0xc1, 0x65, 0x12, 0x10, 0x69, 0x55, 0x1c, 0xbd, 0x79, 0xe8, 0x5d, 0xfe,
	0x2c, 0x1b, 0xad, 0xad, 0xe7, 0xe4, 0x80, 0x62, 0xb4, 0x20, 0x1c, 0x62, 0xf5, 0x6b, 0x6e, 0x87,
	0x90, 0x4e, 0x18, 0x26, 0x14, 0xc0, 0xdf, 0x20, 0xcc, 0x63, 0x54, 0x66, 0x10, 0x59, 0xd5, 0x8c,
	0xe4, 0x67, 0xd2, 0x7c, 0x40, 0x06, 0x50, 0x1e, 0xd2, 0xc4, 0x32, 0x76, 0xc5, 0x17, 0x00, 0x85,
	0x8a, 0x23, 0x4e, 0x13, 0x6b, 0x6f, 0x77, 0x94, 0x02, 0x78, 0xcf, 0xf3, 0x95, 0xad, 0x2f, 0x56,
	0xb6, 0xfe, 0xbd, 0xb2, 0xf5, 0xf7, 0xb5, 0xad, 0x2d, 0xd6, 0xb6, 0xf6, 0xb9, 0xb6, 0xb5, 0xd7,
	0xdb, 0xff, 0x5c, 0x22, 0xdd, 0x38, 0xf9, 0xaa, 0xbe, 0xa1, 0xaa, 0xed, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xc1, 0xec, 0x88, 0xf2, 0x75, 0x02, 0x00, 0x00,
}

func (m *MsgWasmExec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWasmExec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWasmExec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgWasmExec(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgWasmExec(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintMsgWasmExec(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintMsgWasmExec(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgWasmExec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Asset.Size()
		i -= size
		if _, err := m.Asset.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgWasmExec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgWasmExec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMsgWasmExec(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgWasmExec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgWasmExec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tx.Size()
	n += 1 + l + sovMsgWasmExec(uint64(l))
	l = m.Asset.Size()
	n += 1 + l + sovMsgWasmExec(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovMsgWasmExec(uint64(l))
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovMsgWasmExec(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMsgWasmExec(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgWasmExec(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgWasmExec(uint64(l))
	}
	return n
}

func sovMsgWasmExec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgWasmExec(x uint64) (n int) {
	return sovMsgWasmExec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgWasmExec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgWasmExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWasmExec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWasmExec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWasmExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWasmExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWasmExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWasmExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgWasmExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWasmExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWasmExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgWasmExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWasmExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWasmExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgWasmExec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWasmExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = append(m.Contract[:0], dAtA[iNdEx:postIndex]...)
			if m.Contract == nil {
				m.Contract = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWasmExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgWasmExec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWasmExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWasmExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgWasmExec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWasmExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgWasmExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgWasmExec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgWasmExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgWasmExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgWasmExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgWasmExec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgWasmExec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgWasmExec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgWasmExec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgWasmExec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgWasmExec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgWasmExec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgWasmExec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgWasmExec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgWasmExec = fmt.Errorf("proto: unexpected end of group")
)
