// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/type_switchlyname.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/switchlyprotocol/switchlynode/v3/common"
	github_com_switchlyprotocol_switchlynode_v3_common "github.com/switchlyprotocol/switchlynode/v3/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SWITCHNameAlias struct {
	Chain   github_com_switchlyprotocol_switchlynode_v3_common.Chain   `protobuf:"bytes,1,opt,name=chain,proto3,casttype=github.com/switchlyprotocol/switchlynode/v3/common.Chain" json:"chain,omitempty"`
	Address github_com_switchlyprotocol_switchlynode_v3_common.Address `protobuf:"bytes,2,opt,name=address,proto3,casttype=github.com/switchlyprotocol/switchlynode/v3/common.Address" json:"address,omitempty"`
}

func (m *SWITCHNameAlias) Reset()         { *m = SWITCHNameAlias{} }
func (m *SWITCHNameAlias) String() string { return proto.CompactTextString(m) }
func (*SWITCHNameAlias) ProtoMessage()    {}
func (*SWITCHNameAlias) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba6dbc4e0a4df9e8, []int{0}
}
func (m *SWITCHNameAlias) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SWITCHNameAlias) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SWITCHNameAlias.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SWITCHNameAlias) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SWITCHNameAlias.Merge(m, src)
}
func (m *SWITCHNameAlias) XXX_Size() int {
	return m.Size()
}
func (m *SWITCHNameAlias) XXX_DiscardUnknown() {
	xxx_messageInfo_SWITCHNameAlias.DiscardUnknown(m)
}

var xxx_messageInfo_SWITCHNameAlias proto.InternalMessageInfo

func (m *SWITCHNameAlias) GetChain() github_com_switchlyprotocol_switchlynode_v3_common.Chain {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *SWITCHNameAlias) GetAddress() github_com_switchlyprotocol_switchlynode_v3_common.Address {
	if m != nil {
		return m.Address
	}
	return ""
}

type SWITCHName struct {
	Name              string                                                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ExpireBlockHeight int64                                                    `protobuf:"varint,2,opt,name=expire_block_height,json=expireBlockHeight,proto3" json:"expire_block_height,omitempty"`
	Owner             github_com_cosmos_cosmos_sdk_types.AccAddress            `protobuf:"bytes,3,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	PreferredAsset    github_com_switchlyprotocol_switchlynode_v3_common.Asset `protobuf:"bytes,4,opt,name=preferred_asset,json=preferredAsset,proto3,customtype=github.com/switchlyprotocol/switchlynode/v3/common.Asset" json:"preferred_asset"`
	Aliases           []SWITCHNameAlias                                        `protobuf:"bytes,5,rep,name=aliases,proto3" json:"aliases"`
}

func (m *SWITCHName) Reset()         { *m = SWITCHName{} }
func (m *SWITCHName) String() string { return proto.CompactTextString(m) }
func (*SWITCHName) ProtoMessage()    {}
func (*SWITCHName) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba6dbc4e0a4df9e8, []int{1}
}
func (m *SWITCHName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SWITCHName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SWITCHName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SWITCHName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SWITCHName.Merge(m, src)
}
func (m *SWITCHName) XXX_Size() int {
	return m.Size()
}
func (m *SWITCHName) XXX_DiscardUnknown() {
	xxx_messageInfo_SWITCHName.DiscardUnknown(m)
}

var xxx_messageInfo_SWITCHName proto.InternalMessageInfo

func (m *SWITCHName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SWITCHName) GetExpireBlockHeight() int64 {
	if m != nil {
		return m.ExpireBlockHeight
	}
	return 0
}

func (m *SWITCHName) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *SWITCHName) GetAliases() []SWITCHNameAlias {
	if m != nil {
		return m.Aliases
	}
	return nil
}

func init() {
	proto.RegisterType((*SWITCHNameAlias)(nil), "types.SWITCHNameAlias")
	proto.RegisterType((*SWITCHName)(nil), "types.SWITCHName")
}

func init() { proto.RegisterFile("types/type_switchlyname.proto", fileDescriptor_ba6dbc4e0a4df9e8) }

var fileDescriptor_ba6dbc4e0a4df9e8 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0xee, 0xd2, 0x40,
	0x10, 0xc6, 0xbb, 0x40, 0x25, 0x2e, 0x2a, 0x71, 0x31, 0xa6, 0x21, 0xb1, 0x6d, 0x38, 0xf5, 0x42,
	0x1b, 0x21, 0x31, 0xc6, 0x10, 0x23, 0xe5, 0x20, 0x5e, 0x3c, 0x54, 0xa3, 0xc6, 0x4b, 0x53, 0xb6,
	0x6b, 0xdb, 0xd0, 0x76, 0x9b, 0x6e, 0x15, 0x78, 0x0b, 0xdf, 0xc8, 0x2b, 0x89, 0x17, 0x8e, 0xc6,
	0x43, 0x63, 0xe0, 0x2d, 0x38, 0x99, 0xdd, 0xb5, 0x68, 0xbc, 0xfd, 0xb9, 0x74, 0xa7, 0xf3, 0xed,
	0xfe, 0xe6, 0x9b, 0x19, 0xf8, 0xa8, 0xda, 0x15, 0x84, 0x39, 0xfc, 0xeb, 0xb3, 0x4d, 0x52, 0xe1,
	0x38, 0xdd, 0xe5, 0x41, 0x46, 0xec, 0xa2, 0xa4, 0x15, 0x45, 0xaa, 0x90, 0x87, 0x03, 0x4c, 0xb3,
	0x8c, 0xe6, 0x8e, 0x3c, 0xa4, 0x36, 0x7c, 0x10, 0xd1, 0x88, 0x8a, 0xd0, 0xe1, 0x91, 0xcc, 0x8e,
	0xbe, 0x01, 0xd8, 0x7f, 0xf3, 0xfe, 0xd5, 0xdb, 0xc5, 0xf2, 0x75, 0x90, 0x91, 0x79, 0x9a, 0x04,
	0x0c, 0x79, 0x50, 0xc5, 0x71, 0x90, 0xe4, 0x1a, 0x30, 0x81, 0x75, 0xdb, 0x9d, 0x9d, 0x6b, 0xe3,
	0x69, 0x94, 0x54, 0xf1, 0xe7, 0x95, 0x8d, 0x69, 0xe6, 0x34, 0x75, 0x05, 0x00, 0xd3, 0xf4, 0x92,
	0xc8, 0x69, 0x48, 0x9c, 0x2f, 0xd3, 0xa6, 0xec, 0x82, 0x33, 0x3c, 0x89, 0x42, 0x1f, 0x60, 0x37,
	0x08, 0xc3, 0x92, 0x30, 0xa6, 0xb5, 0x04, 0xf5, 0xf9, 0xb9, 0x36, 0x9e, 0x5d, 0x41, 0x9d, 0x4b,
	0x8a, 0xd7, 0xe0, 0x46, 0xdf, 0x5b, 0x10, 0xfe, 0xed, 0x00, 0x21, 0xd8, 0xe1, 0x03, 0x91, 0xde,
	0x3d, 0x11, 0x23, 0x1b, 0x0e, 0xc8, 0xb6, 0x48, 0x4a, 0xe2, 0xaf, 0x52, 0x8a, 0xd7, 0x7e, 0x4c,
	0x92, 0x28, 0xae, 0x84, 0x91, 0xb6, 0x77, 0x5f, 0x4a, 0x2e, 0x57, 0x96, 0x42, 0x40, 0x2f, 0xa1,
	0x4a, 0x37, 0x39, 0x29, 0xb5, 0xb6, 0x09, 0xac, 0x3b, 0xee, 0xe3, 0x73, 0x6d, 0x8c, 0xff, 0xb1,
	0x8a, 0x29, 0xcb, 0x28, 0xfb, 0x73, 0x8c, 0x59, 0xb8, 0x16, 0xfb, 0x60, 0xf6, 0x1c, 0xe3, 0xc6,
	0x9d, 0x7c, 0x8f, 0xb6, 0xb0, 0x5f, 0x94, 0xe4, 0x13, 0x29, 0x4b, 0x12, 0xfa, 0x01, 0x63, 0xa4,
	0xd2, 0x3a, 0x26, 0xb0, 0x7a, 0x93, 0xbb, 0x76, 0xd3, 0x0e, 0x4f, 0xba, 0x2f, 0xf6, 0xb5, 0xa1,
	0xfc, 0xbc, 0x6e, 0xcc, 0x82, 0xe0, 0xdd, 0xbb, 0xd4, 0x11, 0xff, 0xe8, 0x09, 0xec, 0x06, 0x7c,
	0x99, 0x84, 0x69, 0xaa, 0xd9, 0xb6, 0x7a, 0x93, 0x87, 0xb6, 0x34, 0xf9, 0xdf, 0xb2, 0xdd, 0x0e,
	0x2f, 0xed, 0x35, 0x97, 0xdd, 0x77, 0xfb, 0xa3, 0x0e, 0x0e, 0x47, 0x1d, 0xfc, 0x3a, 0xea, 0xe0,
	0xeb, 0x49, 0x57, 0x0e, 0x27, 0x5d, 0xf9, 0x71, 0xd2, 0x95, 0x8f, 0xb3, 0x9b, 0x78, 0xdb, 0x5e,
	0x32, 0x72, 0x36, 0xab, 0x5b, 0xe2, 0xea, 0xf4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x1f,
	0xd1, 0x24, 0xc1, 0x02, 0x00, 0x00,
}

func (m *SWITCHNameAlias) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SWITCHNameAlias) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SWITCHNameAlias) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypeSwitchlyname(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypeSwitchlyname(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SWITCHName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SWITCHName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SWITCHName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Aliases) > 0 {
		for iNdEx := len(m.Aliases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Aliases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypeSwitchlyname(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.PreferredAsset.Size()
		i -= size
		if _, err := m.PreferredAsset.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeSwitchlyname(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypeSwitchlyname(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ExpireBlockHeight != 0 {
		i = encodeVarintTypeSwitchlyname(dAtA, i, uint64(m.ExpireBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypeSwitchlyname(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypeSwitchlyname(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeSwitchlyname(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SWITCHNameAlias) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypeSwitchlyname(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypeSwitchlyname(uint64(l))
	}
	return n
}

func (m *SWITCHName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypeSwitchlyname(uint64(l))
	}
	if m.ExpireBlockHeight != 0 {
		n += 1 + sovTypeSwitchlyname(uint64(m.ExpireBlockHeight))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypeSwitchlyname(uint64(l))
	}
	l = m.PreferredAsset.Size()
	n += 1 + l + sovTypeSwitchlyname(uint64(l))
	if len(m.Aliases) > 0 {
		for _, e := range m.Aliases {
			l = e.Size()
			n += 1 + l + sovTypeSwitchlyname(uint64(l))
		}
	}
	return n
}

func sovTypeSwitchlyname(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeSwitchlyname(x uint64) (n int) {
	return sovTypeSwitchlyname(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SWITCHNameAlias) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeSwitchlyname
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SWITCHNameAlias: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SWITCHNameAlias: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSwitchlyname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeSwitchlyname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeSwitchlyname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = github_com_switchlyprotocol_switchlynode_v3_common.Chain(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSwitchlyname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeSwitchlyname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeSwitchlyname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = github_com_switchlyprotocol_switchlynode_v3_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeSwitchlyname(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeSwitchlyname
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SWITCHName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeSwitchlyname
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SWITCHName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SWITCHName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSwitchlyname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeSwitchlyname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeSwitchlyname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireBlockHeight", wireType)
			}
			m.ExpireBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSwitchlyname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSwitchlyname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypeSwitchlyname
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeSwitchlyname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSwitchlyname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeSwitchlyname
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeSwitchlyname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreferredAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aliases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSwitchlyname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeSwitchlyname
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeSwitchlyname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aliases = append(m.Aliases, SWITCHNameAlias{})
			if err := m.Aliases[len(m.Aliases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeSwitchlyname(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeSwitchlyname
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeSwitchlyname(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeSwitchlyname
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeSwitchlyname
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeSwitchlyname
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeSwitchlyname
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeSwitchlyname
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeSwitchlyname
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeSwitchlyname        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeSwitchlyname          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeSwitchlyname = fmt.Errorf("proto: unexpected end of group")
)
