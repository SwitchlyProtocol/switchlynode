// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/msg_donate.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "github.com/switchlyprotocol/switchlynode/v3/common"
	github_com_switchlyprotocol_switchlynode_v3_common "github.com/switchlyprotocol/switchlynode/v3/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgDonate struct {
	Asset        github_com_switchlyprotocol_switchlynode_v3_common.Asset `protobuf:"bytes,1,opt,name=asset,proto3,customtype=github.com/switchlyprotocol/switchlynode/v3/common.Asset" json:"asset"`
	AssetAmount  cosmossdk_io_math.Uint                                   `protobuf:"bytes,2,opt,name=asset_amount,json=assetAmount,proto3,customtype=cosmossdk.io/math.Uint" json:"asset_amount"`
	SwitchAmount cosmossdk_io_math.Uint                                   `protobuf:"bytes,3,opt,name=switch_amount,json=switchAmount,proto3,customtype=cosmossdk.io/math.Uint" json:"switch_amount"`
	Tx           common.Tx                                                `protobuf:"bytes,4,opt,name=tx,proto3" json:"tx"`
	Signer       github_com_cosmos_cosmos_sdk_types.AccAddress            `protobuf:"bytes,5,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgDonate) Reset()         { *m = MsgDonate{} }
func (m *MsgDonate) String() string { return proto.CompactTextString(m) }
func (*MsgDonate) ProtoMessage()    {}
func (*MsgDonate) Descriptor() ([]byte, []int) {
	return fileDescriptor_94cbc2f94df886fc, []int{0}
}
func (m *MsgDonate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDonate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDonate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDonate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDonate.Merge(m, src)
}
func (m *MsgDonate) XXX_Size() int {
	return m.Size()
}
func (m *MsgDonate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDonate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDonate proto.InternalMessageInfo

func (m *MsgDonate) GetTx() common.Tx {
	if m != nil {
		return m.Tx
	}
	return common.Tx{}
}

func (m *MsgDonate) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgDonate)(nil), "types.MsgDonate")
}

func init() { proto.RegisterFile("types/msg_donate.proto", fileDescriptor_94cbc2f94df886fc) }

var fileDescriptor_94cbc2f94df886fc = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xb1, 0x4f, 0xc2, 0x40,
	0x14, 0xc6, 0xdb, 0x0a, 0x24, 0x1c, 0xb0, 0x54, 0x43, 0x1a, 0x86, 0xa3, 0x71, 0x62, 0xa1, 0x17,
	0x65, 0x71, 0x70, 0xb0, 0xd5, 0xc5, 0xc1, 0xa5, 0x51, 0x07, 0x17, 0x52, 0xda, 0x4b, 0x69, 0xa0,
	0x7d, 0x84, 0x77, 0x68, 0xf9, 0x2f, 0xfc, 0xb3, 0x18, 0x19, 0x8d, 0x03, 0x31, 0x30, 0xf8, 0x3f,
	0x38, 0x99, 0xde, 0x15, 0xc2, 0xa8, 0xd3, 0x7b, 0xf9, 0x5e, 0xbf, 0xdf, 0x97, 0xaf, 0x47, 0xda,
	0x62, 0x39, 0xe3, 0xc8, 0x52, 0x8c, 0x87, 0x11, 0x64, 0x81, 0xe0, 0xce, 0x6c, 0x0e, 0x02, 0xcc,
	0xaa, 0xd4, 0x3b, 0xa7, 0x21, 0xa4, 0x29, 0x64, 0x4c, 0x0d, 0x75, 0xeb, 0x9c, 0xc5, 0x10, 0x83,
	0x5c, 0x59, 0xb1, 0x29, 0xf5, 0xfc, 0xdb, 0x20, 0xf5, 0x07, 0x8c, 0xef, 0x24, 0xc5, 0xe4, 0xa4,
	0x1a, 0x20, 0x72, 0x61, 0xe9, 0xb6, 0xde, 0x6b, 0x5c, 0xb6, 0x9c, 0x92, 0xe0, 0x16, 0xa2, 0x77,
	0xb3, 0xda, 0x74, 0xb5, 0xcf, 0x4d, 0xf7, 0x2a, 0x4e, 0xc4, 0x78, 0x31, 0x2a, 0x8e, 0x0c, 0xdf,
	0x12, 0x11, 0x8e, 0xa7, 0x4b, 0x49, 0x0b, 0x61, 0x7a, 0x10, 0x32, 0x88, 0x38, 0x7b, 0x1d, 0xb0,
	0x63, 0x82, 0xaf, 0xe8, 0xa6, 0x4b, 0x9a, 0x72, 0x19, 0x06, 0x29, 0x2c, 0x32, 0x61, 0x19, 0xb6,
	0xde, 0xab, 0x7b, 0xb4, 0xc4, 0xb7, 0x43, 0xc0, 0x14, 0x10, 0xa3, 0x89, 0x93, 0x00, 0x4b, 0x03,
	0x31, 0x76, 0x9e, 0x92, 0x4c, 0xf8, 0x0d, 0xe9, 0x71, 0xa5, 0xc5, 0xbc, 0x25, 0x2d, 0x95, 0xb4,
	0x67, 0x9c, 0xfc, 0x89, 0xd1, 0x54, 0xa6, 0x12, 0x62, 0x13, 0x43, 0xe4, 0x56, 0x45, 0x76, 0x25,
	0xfb, 0xae, 0x8f, 0xb9, 0x57, 0x29, 0x28, 0xbe, 0x21, 0x72, 0xf3, 0x9e, 0xd4, 0x30, 0x89, 0x33,
	0x3e, 0xb7, 0xaa, 0xb6, 0xde, 0x6b, 0x7a, 0x17, 0x3f, 0x9b, 0x6e, 0xff, 0xa8, 0xbe, 0x8a, 0x29,
	0x47, 0x1f, 0xa3, 0x09, 0x93, 0x2f, 0xe0, 0xb8, 0x61, 0xe8, 0x46, 0xd1, 0x9c, 0x23, 0xfa, 0x25,
	0xc0, 0x7b, 0x5e, 0x6d, 0xa9, 0xbe, 0xde, 0x52, 0xfd, 0x6b, 0x4b, 0xf5, 0xf7, 0x1d, 0xd5, 0xd6,
	0x3b, 0xaa, 0x7d, 0xec, 0xa8, 0xf6, 0x72, 0xfd, 0x9f, 0xff, 0x99, 0x1f, 0x14, 0x15, 0x35, 0xaa,
	0xc9, 0x4f, 0x07, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xac, 0x6a, 0x8e, 0x6f, 0x14, 0x02, 0x00,
	0x00,
}

func (m *MsgDonate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDonate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDonate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgDonate(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgDonate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.SwitchAmount.Size()
		i -= size
		if _, err := m.SwitchAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgDonate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.AssetAmount.Size()
		i -= size
		if _, err := m.AssetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgDonate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Asset.Size()
		i -= size
		if _, err := m.Asset.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgDonate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMsgDonate(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgDonate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDonate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Asset.Size()
	n += 1 + l + sovMsgDonate(uint64(l))
	l = m.AssetAmount.Size()
	n += 1 + l + sovMsgDonate(uint64(l))
	l = m.SwitchAmount.Size()
	n += 1 + l + sovMsgDonate(uint64(l))
	l = m.Tx.Size()
	n += 1 + l + sovMsgDonate(uint64(l))
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgDonate(uint64(l))
	}
	return n
}

func sovMsgDonate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgDonate(x uint64) (n int) {
	return sovMsgDonate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDonate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDonate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDonate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDonate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgDonate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDonate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDonate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDonate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDonate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDonate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwitchAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgDonate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDonate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgDonate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDonate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDonate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgDonate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgDonate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgDonate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgDonate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgDonate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgDonate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgDonate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgDonate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgDonate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgDonate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgDonate = fmt.Errorf("proto: unexpected end of group")
)
