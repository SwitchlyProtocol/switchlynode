// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_pool.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryPoolRequest struct {
	Asset  string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Height string `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryPoolRequest) Reset()         { *m = QueryPoolRequest{} }
func (m *QueryPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolRequest) ProtoMessage()    {}
func (*QueryPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31e502a302ebcabb, []int{0}
}
func (m *QueryPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolRequest.Merge(m, src)
}
func (m *QueryPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolRequest proto.InternalMessageInfo

func (m *QueryPoolRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *QueryPoolRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryPoolResponse struct {
	Asset                string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset"`
	ShortCode            string `protobuf:"bytes,2,opt,name=short_code,json=shortCode,proto3" json:"short_code,omitempty"`
	Status               string `protobuf:"bytes,3,opt,name=status,proto3" json:"status"`
	Decimals             int64  `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
	PendingInboundAsset  string `protobuf:"bytes,5,opt,name=pending_inbound_asset,json=pendingInboundAsset,proto3" json:"pending_inbound_asset"`
	PendingInboundSwitch string `protobuf:"bytes,6,opt,name=pending_inbound_switch,json=pendingInboundSwitch,proto3" json:"pending_inbound_switch"`
	BalanceAsset         string `protobuf:"bytes,7,opt,name=balance_asset,json=balanceAsset,proto3" json:"balance_asset"`
	BalanceSwitch        string `protobuf:"bytes,8,opt,name=balance_switch,json=balanceSwitch,proto3" json:"balance_switch"`
	// the USD (SWITCH) price of the asset in 1e8
	AssetSwitchPrice string `protobuf:"bytes,9,opt,name=asset_switch_price,json=assetSwitchPrice,proto3" json:"asset_switch_price"`
	// the total pool units, this is the sum of LP and synth units
	PoolUnits string `protobuf:"bytes,10,opt,name=pool_units,json=poolUnits,proto3" json:"pool_units"`
	// the total pool liquidity provider units
	LPUnits string `protobuf:"bytes,11,opt,name=LP_units,json=LPUnits,proto3" json:"LP_units"`
	// the total synth units in the pool
	SynthUnits string `protobuf:"bytes,12,opt,name=synth_units,json=synthUnits,proto3" json:"synth_units"`
	// the total supply of synths for the asset
	SynthSupply string `protobuf:"bytes,13,opt,name=synth_supply,json=synthSupply,proto3" json:"synth_supply"`
	// the balance of L1 asset deposited into the Savers Vault
	SaversDepth string `protobuf:"bytes,14,opt,name=savers_depth,json=saversDepth,proto3" json:"savers_depth"`
	// the number of units owned by Savers
	SaversUnits string `protobuf:"bytes,15,opt,name=savers_units,json=saversUnits,proto3" json:"savers_units"`
	// the filled savers capacity in basis points, 4500/10000 = 45%
	SaversFillBps string `protobuf:"bytes,16,opt,name=savers_fill_bps,json=saversFillBps,proto3" json:"savers_fill_bps"`
	// amount of remaining capacity in asset
	SaversCapacityRemaining string `protobuf:"bytes,17,opt,name=savers_capacity_remaining,json=saversCapacityRemaining,proto3" json:"savers_capacity_remaining"`
	// whether additional synths cannot be minted
	SynthMintPaused bool `protobuf:"varint,18,opt,name=synth_mint_paused,json=synthMintPaused,proto3" json:"synth_mint_paused"`
	// the amount of synth supply remaining before the current max supply is reached
	SynthSupplyRemaining string `protobuf:"bytes,19,opt,name=synth_supply_remaining,json=synthSupplyRemaining,proto3" json:"synth_supply_remaining"`
	// the amount of collateral collects for loans
	LoanCollateral string `protobuf:"bytes,20,opt,name=loan_collateral,json=loanCollateral,proto3" json:"loan_collateral"`
	// the amount of remaining collateral collects for loans
	LoanCollateralRemaining string `protobuf:"bytes,21,opt,name=loan_collateral_remaining,json=loanCollateralRemaining,proto3" json:"loan_collateral_remaining"`
	// the current loan collateralization ratio
	LoanCr string `protobuf:"bytes,22,opt,name=loan_cr,json=loanCr,proto3" json:"loan_cr"`
	// the depth of the derived virtual pool relative to L1 pool (in basis points)
	DerivedDepthBps string `protobuf:"bytes,23,opt,name=derived_depth_bps,json=derivedDepthBps,proto3" json:"derived_depth_bps"`
	// whether trading is halted
	TradingHalted bool `protobuf:"varint,24,opt,name=trading_halted,json=tradingHalted,proto3" json:"trading_halted"`
}

func (m *QueryPoolResponse) Reset()         { *m = QueryPoolResponse{} }
func (m *QueryPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolResponse) ProtoMessage()    {}
func (*QueryPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31e502a302ebcabb, []int{1}
}
func (m *QueryPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolResponse.Merge(m, src)
}
func (m *QueryPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolResponse proto.InternalMessageInfo

func (m *QueryPoolResponse) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *QueryPoolResponse) GetShortCode() string {
	if m != nil {
		return m.ShortCode
	}
	return ""
}

func (m *QueryPoolResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryPoolResponse) GetDecimals() int64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *QueryPoolResponse) GetPendingInboundAsset() string {
	if m != nil {
		return m.PendingInboundAsset
	}
	return ""
}

func (m *QueryPoolResponse) GetPendingInboundSwitch() string {
	if m != nil {
		return m.PendingInboundSwitch
	}
	return ""
}

func (m *QueryPoolResponse) GetBalanceAsset() string {
	if m != nil {
		return m.BalanceAsset
	}
	return ""
}

func (m *QueryPoolResponse) GetBalanceSwitch() string {
	if m != nil {
		return m.BalanceSwitch
	}
	return ""
}

func (m *QueryPoolResponse) GetAssetSwitchPrice() string {
	if m != nil {
		return m.AssetSwitchPrice
	}
	return ""
}

func (m *QueryPoolResponse) GetPoolUnits() string {
	if m != nil {
		return m.PoolUnits
	}
	return ""
}

func (m *QueryPoolResponse) GetLPUnits() string {
	if m != nil {
		return m.LPUnits
	}
	return ""
}

func (m *QueryPoolResponse) GetSynthUnits() string {
	if m != nil {
		return m.SynthUnits
	}
	return ""
}

func (m *QueryPoolResponse) GetSynthSupply() string {
	if m != nil {
		return m.SynthSupply
	}
	return ""
}

func (m *QueryPoolResponse) GetSaversDepth() string {
	if m != nil {
		return m.SaversDepth
	}
	return ""
}

func (m *QueryPoolResponse) GetSaversUnits() string {
	if m != nil {
		return m.SaversUnits
	}
	return ""
}

func (m *QueryPoolResponse) GetSaversFillBps() string {
	if m != nil {
		return m.SaversFillBps
	}
	return ""
}

func (m *QueryPoolResponse) GetSaversCapacityRemaining() string {
	if m != nil {
		return m.SaversCapacityRemaining
	}
	return ""
}

func (m *QueryPoolResponse) GetSynthMintPaused() bool {
	if m != nil {
		return m.SynthMintPaused
	}
	return false
}

func (m *QueryPoolResponse) GetSynthSupplyRemaining() string {
	if m != nil {
		return m.SynthSupplyRemaining
	}
	return ""
}

func (m *QueryPoolResponse) GetLoanCollateral() string {
	if m != nil {
		return m.LoanCollateral
	}
	return ""
}

func (m *QueryPoolResponse) GetLoanCollateralRemaining() string {
	if m != nil {
		return m.LoanCollateralRemaining
	}
	return ""
}

func (m *QueryPoolResponse) GetLoanCr() string {
	if m != nil {
		return m.LoanCr
	}
	return ""
}

func (m *QueryPoolResponse) GetDerivedDepthBps() string {
	if m != nil {
		return m.DerivedDepthBps
	}
	return ""
}

func (m *QueryPoolResponse) GetTradingHalted() bool {
	if m != nil {
		return m.TradingHalted
	}
	return false
}

type QueryPoolsRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryPoolsRequest) Reset()         { *m = QueryPoolsRequest{} }
func (m *QueryPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsRequest) ProtoMessage()    {}
func (*QueryPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31e502a302ebcabb, []int{2}
}
func (m *QueryPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsRequest.Merge(m, src)
}
func (m *QueryPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsRequest proto.InternalMessageInfo

func (m *QueryPoolsRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryPoolsResponse struct {
	Pools []*QueryPoolResponse `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (m *QueryPoolsResponse) Reset()         { *m = QueryPoolsResponse{} }
func (m *QueryPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsResponse) ProtoMessage()    {}
func (*QueryPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31e502a302ebcabb, []int{3}
}
func (m *QueryPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsResponse.Merge(m, src)
}
func (m *QueryPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsResponse proto.InternalMessageInfo

func (m *QueryPoolsResponse) GetPools() []*QueryPoolResponse {
	if m != nil {
		return m.Pools
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryPoolRequest)(nil), "types.QueryPoolRequest")
	proto.RegisterType((*QueryPoolResponse)(nil), "types.QueryPoolResponse")
	proto.RegisterType((*QueryPoolsRequest)(nil), "types.QueryPoolsRequest")
	proto.RegisterType((*QueryPoolsResponse)(nil), "types.QueryPoolsResponse")
}

func init() { proto.RegisterFile("types/query_pool.proto", fileDescriptor_31e502a302ebcabb) }

var fileDescriptor_31e502a302ebcabb = []byte{
	// 800 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0x4f, 0x6b, 0xe3, 0x46,
	0x14, 0x8f, 0x9a, 0xc6, 0x89, 0xc7, 0x89, 0x9d, 0x4c, 0x1c, 0x67, 0x36, 0xb0, 0x9e, 0x10, 0x0a,
	0x0d, 0x94, 0xda, 0xa5, 0x81, 0xc2, 0xd2, 0x3d, 0x74, 0x9d, 0x50, 0x5a, 0xd8, 0x05, 0x77, 0x96,
	0x16, 0xda, 0x8b, 0x90, 0xa5, 0xa9, 0x35, 0x30, 0xd6, 0x68, 0x35, 0xa3, 0xb4, 0xbe, 0xf5, 0x23,
	0xf4, 0x63, 0xf5, 0xb8, 0xc7, 0x9e, 0x44, 0x49, 0x6e, 0xfa, 0x14, 0x45, 0x6f, 0xc6, 0xb6, 0x6c,
	0x27, 0x27, 0xeb, 0xfd, 0xfe, 0xf9, 0xf1, 0x46, 0xf3, 0x84, 0x7a, 0x66, 0x9e, 0x72, 0x3d, 0xfc,
	0x90, 0xf3, 0x6c, 0xee, 0xa7, 0x4a, 0xc9, 0x41, 0x9a, 0x29, 0xa3, 0xf0, 0x1e, 0xe0, 0x17, 0xdd,
	0xa9, 0x9a, 0x2a, 0x40, 0x86, 0xd5, 0x93, 0x25, 0xaf, 0xbe, 0x43, 0xc7, 0x3f, 0x55, 0x86, 0xb1,
	0x52, 0x92, 0xf1, 0x0f, 0x39, 0xd7, 0x06, 0x77, 0xd1, 0x5e, 0xa0, 0x35, 0x37, 0xc4, 0xbb, 0xf4,
	0xae, 0x9b, 0xcc, 0x16, 0xb8, 0x87, 0x1a, 0x31, 0x17, 0xd3, 0xd8, 0x90, 0x4f, 0x00, 0x76, 0xd5,
	0xd5, 0x5f, 0x2d, 0x74, 0x52, 0x8b, 0xd0, 0xa9, 0x4a, 0x34, 0xc7, 0x74, 0x2d, 0x63, 0xd4, 0x2c,
	0x0b, 0x6a, 0x81, 0x45, 0xdc, 0x4b, 0x84, 0x74, 0xac, 0x32, 0xe3, 0x87, 0x2a, 0xe2, 0x2e, 0xb2,
	0x09, 0xc8, 0xad, 0x8a, 0x38, 0xbe, 0x42, 0x0d, 0x6d, 0x02, 0x93, 0x6b, 0xb2, 0x0b, 0x01, 0xa8,
	0x2c, 0xa8, 0x43, 0x98, 0xfb, 0xc5, 0x17, 0xe8, 0x20, 0xe2, 0xa1, 0x98, 0x05, 0x52, 0x93, 0x4f,
	0x2f, 0xbd, 0xeb, 0x5d, 0xb6, 0xac, 0xf1, 0x3b, 0x74, 0x96, 0xf2, 0x24, 0x12, 0xc9, 0xd4, 0x17,
	0xc9, 0x44, 0xe5, 0x49, 0xe4, 0xdb, 0x7e, 0xf6, 0x20, 0xee, 0x45, 0x59, 0xd0, 0xa7, 0x05, 0xec,
	0xd4, 0xc1, 0x3f, 0x5a, 0xf4, 0x0d, 0x74, 0x3b, 0x46, 0xbd, 0x4d, 0xb5, 0xfe, 0x43, 0x98, 0x30,
	0x26, 0x0d, 0xc8, 0xbb, 0x28, 0x0b, 0xfa, 0x8c, 0x82, 0x75, 0xd7, 0x03, 0xdf, 0x03, 0x8a, 0xbf,
	0x41, 0x47, 0x93, 0x40, 0x06, 0x49, 0xc8, 0x5d, 0x63, 0xfb, 0x10, 0x74, 0x52, 0x16, 0x74, 0x9d,
	0x60, 0x87, 0xae, 0xb4, 0x9d, 0xbc, 0x42, 0xed, 0x05, 0xed, 0x3a, 0x38, 0x00, 0x23, 0x2e, 0x0b,
	0xba, 0xc1, 0xb0, 0x45, 0x90, 0xfb, 0xcb, 0x3b, 0x84, 0x21, 0xd1, 0xd1, 0x7e, 0x9a, 0x89, 0x90,
	0x93, 0x26, 0xd8, 0x7b, 0x65, 0x41, 0x9f, 0x60, 0xd9, 0x31, 0x60, 0x36, 0x60, 0x5c, 0x21, 0xf8,
	0x4b, 0x84, 0xaa, 0x97, 0xcb, 0xcf, 0x13, 0x61, 0x34, 0x41, 0xe0, 0x6e, 0x97, 0x05, 0xad, 0xa1,
	0xac, 0x59, 0x3d, 0xff, 0x5c, 0x3d, 0xe2, 0xcf, 0xd1, 0xc1, 0xdb, 0xb1, 0x13, 0xb7, 0x40, 0x7c,
	0x58, 0x16, 0x74, 0x89, 0xb1, 0xfd, 0xb7, 0x63, 0x2b, 0xfc, 0x0a, 0xb5, 0xf4, 0x3c, 0x31, 0xb1,
	0xd3, 0x1e, 0x82, 0xb6, 0x53, 0x16, 0xb4, 0x0e, 0x33, 0x04, 0x85, 0x75, 0xdc, 0xa0, 0x43, 0x4b,
	0xe9, 0x3c, 0x4d, 0xe5, 0x9c, 0x1c, 0x81, 0xe5, 0xb8, 0x2c, 0xe8, 0x1a, 0xce, 0x6c, 0xc0, 0x7b,
	0x28, 0xc0, 0x14, 0xdc, 0xf3, 0x4c, 0xfb, 0x11, 0x4f, 0x4d, 0x4c, 0xda, 0x35, 0x53, 0x0d, 0x67,
	0x2d, 0x5b, 0xdd, 0x55, 0x45, 0xcd, 0x64, 0x9b, 0xeb, 0x6c, 0x99, 0x6c, 0x77, 0xce, 0x64, 0xdb,
	0xfb, 0x16, 0x75, 0x1c, 0xf9, 0xbb, 0x90, 0xd2, 0x9f, 0xa4, 0x9a, 0x1c, 0x83, 0xef, 0xb4, 0x2c,
	0xe8, 0x26, 0xc5, 0x8e, 0x2c, 0xf0, 0xbd, 0x90, 0x72, 0x94, 0x6a, 0xfc, 0x2b, 0x7a, 0xe1, 0x14,
	0x61, 0x90, 0x06, 0xa1, 0x30, 0x73, 0x3f, 0xe3, 0xb3, 0x40, 0x24, 0x22, 0x99, 0x92, 0x13, 0x88,
	0x79, 0x59, 0x16, 0xf4, 0x79, 0x11, 0x3b, 0xb7, 0xd4, 0xad, 0x63, 0xd8, 0x82, 0xc0, 0x6f, 0xd0,
	0x89, 0x1d, 0xcf, 0x4c, 0x24, 0xc6, 0x4f, 0x83, 0x5c, 0xf3, 0x88, 0xe0, 0x4b, 0xef, 0xfa, 0x60,
	0x74, 0x56, 0x16, 0x74, 0x9b, 0x64, 0x1d, 0x80, 0xde, 0x89, 0xc4, 0x8c, 0x01, 0xa8, 0xae, 0x43,
	0x7d, 0xc2, 0xb5, 0xd6, 0x4e, 0x57, 0xd7, 0xe1, 0x69, 0x05, 0xeb, 0xd6, 0x4e, 0x63, 0xd5, 0xd4,
	0x6b, 0xd4, 0x91, 0x2a, 0x48, 0xfc, 0x50, 0x49, 0x19, 0x18, 0x9e, 0x05, 0x92, 0x74, 0x57, 0xc3,
	0xda, 0xa0, 0x58, 0xbb, 0x02, 0x6e, 0x97, 0x75, 0x35, 0xad, 0x0d, 0x49, 0xad, 0xa5, 0xb3, 0xd5,
	0xb4, 0x9e, 0x15, 0xb1, 0xf3, 0xf5, 0xc4, 0x55, 0x63, 0x9f, 0xa1, 0x7d, 0xeb, 0xca, 0x48, 0x0f,
	0x82, 0x5a, 0x65, 0x41, 0x17, 0x10, 0x6b, 0x80, 0x2d, 0xab, 0x66, 0x1a, 0xf1, 0x4c, 0xdc, 0xf3,
	0xc8, 0xbe, 0x3e, 0x70, 0xda, 0xe7, 0xa0, 0x87, 0x99, 0x6e, 0x91, 0xac, 0xe3, 0x20, 0x78, 0xc1,
	0xaa, 0x13, 0x7f, 0x85, 0xda, 0x26, 0x0b, 0x60, 0x81, 0xc4, 0x81, 0x34, 0x3c, 0x22, 0x04, 0xce,
	0x04, 0x2e, 0xf6, 0x3a, 0xc3, 0x8e, 0x5c, 0xfd, 0x03, 0x94, 0x57, 0x5f, 0xd4, 0x36, 0xb0, 0x5e,
	0x6c, 0xf1, 0xd5, 0xbe, 0xf6, 0xd6, 0xf6, 0xf5, 0x1d, 0xc2, 0x75, 0xb1, 0xdb, 0xd7, 0x03, 0xb4,
	0x57, 0xdd, 0x59, 0x4d, 0xbc, 0xcb, 0xdd, 0xeb, 0xd6, 0xd7, 0x64, 0x00, 0x1f, 0x8d, 0xc1, 0xd6,
	0x62, 0x67, 0x56, 0x36, 0xfa, 0xe5, 0x9f, 0x87, 0xbe, 0xf7, 0xf1, 0xa1, 0xef, 0xfd, 0xf7, 0xd0,
	0xf7, 0xfe, 0x7e, 0xec, 0xef, 0x7c, 0x7c, 0xec, 0xef, 0xfc, 0xfb, 0xd8, 0xdf, 0xf9, 0xed, 0xf5,
	0x54, 0x98, 0x38, 0x9f, 0x0c, 0x42, 0x35, 0x1b, 0xda, 0x55, 0x22, 0xe7, 0xf0, 0xad, 0x09, 0x95,
	0x5c, 0x02, 0x89, 0x8a, 0xf8, 0xf0, 0xfe, 0x66, 0xf8, 0xe7, 0x12, 0x19, 0xc2, 0x1f, 0x4e, 0x1a,
	0x20, 0xbd, 0xf9, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x24, 0xd2, 0x53, 0xcd, 0x06, 0x00, 0x00,
}

func (m *QueryPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradingHalted {
		i--
		if m.TradingHalted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.DerivedDepthBps) > 0 {
		i -= len(m.DerivedDepthBps)
		copy(dAtA[i:], m.DerivedDepthBps)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.DerivedDepthBps)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.LoanCr) > 0 {
		i -= len(m.LoanCr)
		copy(dAtA[i:], m.LoanCr)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.LoanCr)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.LoanCollateralRemaining) > 0 {
		i -= len(m.LoanCollateralRemaining)
		copy(dAtA[i:], m.LoanCollateralRemaining)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.LoanCollateralRemaining)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.LoanCollateral) > 0 {
		i -= len(m.LoanCollateral)
		copy(dAtA[i:], m.LoanCollateral)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.LoanCollateral)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.SynthSupplyRemaining) > 0 {
		i -= len(m.SynthSupplyRemaining)
		copy(dAtA[i:], m.SynthSupplyRemaining)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.SynthSupplyRemaining)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.SynthMintPaused {
		i--
		if m.SynthMintPaused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.SaversCapacityRemaining) > 0 {
		i -= len(m.SaversCapacityRemaining)
		copy(dAtA[i:], m.SaversCapacityRemaining)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.SaversCapacityRemaining)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.SaversFillBps) > 0 {
		i -= len(m.SaversFillBps)
		copy(dAtA[i:], m.SaversFillBps)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.SaversFillBps)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.SaversUnits) > 0 {
		i -= len(m.SaversUnits)
		copy(dAtA[i:], m.SaversUnits)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.SaversUnits)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.SaversDepth) > 0 {
		i -= len(m.SaversDepth)
		copy(dAtA[i:], m.SaversDepth)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.SaversDepth)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.SynthSupply) > 0 {
		i -= len(m.SynthSupply)
		copy(dAtA[i:], m.SynthSupply)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.SynthSupply)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.SynthUnits) > 0 {
		i -= len(m.SynthUnits)
		copy(dAtA[i:], m.SynthUnits)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.SynthUnits)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.LPUnits) > 0 {
		i -= len(m.LPUnits)
		copy(dAtA[i:], m.LPUnits)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.LPUnits)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PoolUnits) > 0 {
		i -= len(m.PoolUnits)
		copy(dAtA[i:], m.PoolUnits)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.PoolUnits)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.AssetSwitchPrice) > 0 {
		i -= len(m.AssetSwitchPrice)
		copy(dAtA[i:], m.AssetSwitchPrice)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.AssetSwitchPrice)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BalanceSwitch) > 0 {
		i -= len(m.BalanceSwitch)
		copy(dAtA[i:], m.BalanceSwitch)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.BalanceSwitch)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BalanceAsset) > 0 {
		i -= len(m.BalanceAsset)
		copy(dAtA[i:], m.BalanceAsset)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.BalanceAsset)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PendingInboundSwitch) > 0 {
		i -= len(m.PendingInboundSwitch)
		copy(dAtA[i:], m.PendingInboundSwitch)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.PendingInboundSwitch)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PendingInboundAsset) > 0 {
		i -= len(m.PendingInboundAsset)
		copy(dAtA[i:], m.PendingInboundAsset)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.PendingInboundAsset)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Decimals != 0 {
		i = encodeVarintQueryPool(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShortCode) > 0 {
		i -= len(m.ShortCode)
		copy(dAtA[i:], m.ShortCode)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.ShortCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryPool(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryPool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovQueryPool(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryPool(uint64(l))
	}
	return n
}

func (m *QueryPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovQueryPool(uint64(l))
	}
	l = len(m.ShortCode)
	if l > 0 {
		n += 1 + l + sovQueryPool(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQueryPool(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovQueryPool(uint64(m.Decimals))
	}
	l = len(m.PendingInboundAsset)
	if l > 0 {
		n += 1 + l + sovQueryPool(uint64(l))
	}
	l = len(m.PendingInboundSwitch)
	if l > 0 {
		n += 1 + l + sovQueryPool(uint64(l))
	}
	l = len(m.BalanceAsset)
	if l > 0 {
		n += 1 + l + sovQueryPool(uint64(l))
	}
	l = len(m.BalanceSwitch)
	if l > 0 {
		n += 1 + l + sovQueryPool(uint64(l))
	}
	l = len(m.AssetSwitchPrice)
	if l > 0 {
		n += 1 + l + sovQueryPool(uint64(l))
	}
	l = len(m.PoolUnits)
	if l > 0 {
		n += 1 + l + sovQueryPool(uint64(l))
	}
	l = len(m.LPUnits)
	if l > 0 {
		n += 1 + l + sovQueryPool(uint64(l))
	}
	l = len(m.SynthUnits)
	if l > 0 {
		n += 1 + l + sovQueryPool(uint64(l))
	}
	l = len(m.SynthSupply)
	if l > 0 {
		n += 1 + l + sovQueryPool(uint64(l))
	}
	l = len(m.SaversDepth)
	if l > 0 {
		n += 1 + l + sovQueryPool(uint64(l))
	}
	l = len(m.SaversUnits)
	if l > 0 {
		n += 1 + l + sovQueryPool(uint64(l))
	}
	l = len(m.SaversFillBps)
	if l > 0 {
		n += 2 + l + sovQueryPool(uint64(l))
	}
	l = len(m.SaversCapacityRemaining)
	if l > 0 {
		n += 2 + l + sovQueryPool(uint64(l))
	}
	if m.SynthMintPaused {
		n += 3
	}
	l = len(m.SynthSupplyRemaining)
	if l > 0 {
		n += 2 + l + sovQueryPool(uint64(l))
	}
	l = len(m.LoanCollateral)
	if l > 0 {
		n += 2 + l + sovQueryPool(uint64(l))
	}
	l = len(m.LoanCollateralRemaining)
	if l > 0 {
		n += 2 + l + sovQueryPool(uint64(l))
	}
	l = len(m.LoanCr)
	if l > 0 {
		n += 2 + l + sovQueryPool(uint64(l))
	}
	l = len(m.DerivedDepthBps)
	if l > 0 {
		n += 2 + l + sovQueryPool(uint64(l))
	}
	if m.TradingHalted {
		n += 3
	}
	return n
}

func (m *QueryPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryPool(uint64(l))
	}
	return n
}

func (m *QueryPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQueryPool(uint64(l))
		}
	}
	return n
}

func sovQueryPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryPool(x uint64) (n int) {
	return sovQueryPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingInboundAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingInboundAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingInboundSwitch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingInboundSwitch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BalanceAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceSwitch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BalanceSwitch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetSwitchPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetSwitchPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolUnits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LPUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LPUnits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SynthUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SynthUnits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SynthSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SynthSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaversDepth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SaversDepth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaversUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SaversUnits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaversFillBps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SaversFillBps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaversCapacityRemaining", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SaversCapacityRemaining = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SynthMintPaused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SynthMintPaused = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SynthSupplyRemaining", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SynthSupplyRemaining = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanCollateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanCollateral = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanCollateralRemaining", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanCollateralRemaining = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanCr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanCr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DerivedDepthBps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DerivedDepthBps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingHalted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TradingHalted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQueryPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &QueryPoolResponse{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryPool = fmt.Errorf("proto: unexpected end of group")
)
