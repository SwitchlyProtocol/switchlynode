// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/msg_swcy_claim.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/switchlyprotocol/switchlynode/v3/common"
	github_com_switchlyprotocol_switchlynode_v3_common "github.com/switchlyprotocol/switchlynode/v3/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgSWCYClaim struct {
	SwitchAddress github_com_switchlyprotocol_switchlynode_v3_common.Address `protobuf:"bytes,1,opt,name=switch_address,json=switchAddress,proto3,casttype=github.com/switchlyprotocol/switchlynode/v3/common.Address" json:"switch_address,omitempty"`
	L1Address     github_com_switchlyprotocol_switchlynode_v3_common.Address `protobuf:"bytes,2,opt,name=l1_address,json=l1Address,proto3,casttype=github.com/switchlyprotocol/switchlynode/v3/common.Address" json:"l1_address,omitempty"`
	Signer        github_com_cosmos_cosmos_sdk_types.AccAddress              `protobuf:"bytes,3,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgSWCYClaim) Reset()         { *m = MsgSWCYClaim{} }
func (m *MsgSWCYClaim) String() string { return proto.CompactTextString(m) }
func (*MsgSWCYClaim) ProtoMessage()    {}
func (*MsgSWCYClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_f39bfd9941932a3e, []int{0}
}
func (m *MsgSWCYClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSWCYClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSWCYClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSWCYClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSWCYClaim.Merge(m, src)
}
func (m *MsgSWCYClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgSWCYClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSWCYClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSWCYClaim proto.InternalMessageInfo

func (m *MsgSWCYClaim) GetSwitchAddress() github_com_switchlyprotocol_switchlynode_v3_common.Address {
	if m != nil {
		return m.SwitchAddress
	}
	return ""
}

func (m *MsgSWCYClaim) GetL1Address() github_com_switchlyprotocol_switchlynode_v3_common.Address {
	if m != nil {
		return m.L1Address
	}
	return ""
}

func (m *MsgSWCYClaim) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgSWCYClaim)(nil), "types.MsgSWCYClaim")
}

func init() { proto.RegisterFile("types/msg_swcy_claim.proto", fileDescriptor_f39bfd9941932a3e) }

var fileDescriptor_f39bfd9941932a3e = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0xa9, 0x2c, 0x48,
	0x2d, 0xd6, 0xcf, 0x2d, 0x4e, 0x8f, 0x2f, 0x2e, 0x4f, 0xae, 0x8c, 0x4f, 0xce, 0x49, 0xcc, 0xcc,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0xcb, 0x49, 0x09, 0x27, 0xe7, 0xe7, 0xe6,
	0xe6, 0xe7, 0xe9, 0x43, 0x28, 0x88, 0x9c, 0x94, 0x48, 0x7a, 0x7e, 0x7a, 0x3e, 0x98, 0xa9, 0x0f,
	0x62, 0x41, 0x45, 0x05, 0x13, 0x73, 0x33, 0xf3, 0xf2, 0xf5, 0xc1, 0x24, 0x44, 0x48, 0x69, 0x15,
	0x13, 0x17, 0x8f, 0x6f, 0x71, 0x7a, 0x70, 0xb8, 0x73, 0xa4, 0x33, 0xc8, 0x6c, 0xa1, 0x54, 0x2e,
	0xbe, 0xe2, 0xf2, 0xcc, 0x92, 0xe4, 0x8c, 0xf8, 0xc4, 0x94, 0x94, 0xa2, 0xd4, 0xe2, 0x62, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0x4e, 0x27, 0xbb, 0x5f, 0xf7, 0xe4, 0xad, 0xd2, 0x33, 0x4b, 0x32, 0x4a,
	0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x21, 0x8a, 0x72, 0x2a, 0xc1, 0xc6, 0x24, 0xe7, 0xe7, 0xc0,
	0x05, 0xf2, 0xf2, 0x53, 0x52, 0xf5, 0xcb, 0x8c, 0x61, 0xee, 0x71, 0x84, 0x98, 0x12, 0xc4, 0x0b,
	0x91, 0x87, 0x72, 0x85, 0x62, 0xb9, 0xb8, 0x72, 0x0c, 0xe1, 0x56, 0x30, 0x51, 0xc5, 0x0a, 0xce,
	0x1c, 0x43, 0x98, 0xf1, 0x21, 0x5c, 0x6c, 0xc5, 0x99, 0xe9, 0x79, 0xa9, 0x45, 0x12, 0xcc, 0x0a,
	0x8c, 0x1a, 0x3c, 0x4e, 0x36, 0xbf, 0xee, 0xc9, 0xeb, 0x22, 0x19, 0x9d, 0x9c, 0x5f, 0x9c, 0x9b,
	0x5f, 0x0c, 0xa5, 0x74, 0x8b, 0x53, 0xb2, 0xf5, 0xc1, 0x81, 0xa9, 0xe7, 0x98, 0x9c, 0x0c, 0x35,
	0x62, 0xd6, 0xf3, 0x0d, 0x5a, 0x6c, 0x49, 0xa9, 0xc9, 0x19, 0xc6, 0x46, 0x41, 0x50, 0xb3, 0x9c,
	0xc2, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f,
	0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0xca, 0x86, 0x14, 0x67, 0x57,
	0xc0, 0x45, 0x20, 0xb6, 0x26, 0xb1, 0x81, 0x95, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3b,
	0x13, 0x13, 0xf5, 0xee, 0x01, 0x00, 0x00,
}

func (m *MsgSWCYClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSWCYClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSWCYClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgSwcyClaim(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.L1Address) > 0 {
		i -= len(m.L1Address)
		copy(dAtA[i:], m.L1Address)
		i = encodeVarintMsgSwcyClaim(dAtA, i, uint64(len(m.L1Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SwitchAddress) > 0 {
		i -= len(m.SwitchAddress)
		copy(dAtA[i:], m.SwitchAddress)
		i = encodeVarintMsgSwcyClaim(dAtA, i, uint64(len(m.SwitchAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgSwcyClaim(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgSwcyClaim(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSWCYClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SwitchAddress)
	if l > 0 {
		n += 1 + l + sovMsgSwcyClaim(uint64(l))
	}
	l = len(m.L1Address)
	if l > 0 {
		n += 1 + l + sovMsgSwcyClaim(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgSwcyClaim(uint64(l))
	}
	return n
}

func sovMsgSwcyClaim(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgSwcyClaim(x uint64) (n int) {
	return sovMsgSwcyClaim(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSWCYClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSwcyClaim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSWCYClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSWCYClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwcyClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSwcyClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwcyClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwitchAddress = github_com_switchlyprotocol_switchlynode_v3_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwcyClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSwcyClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwcyClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L1Address = github_com_switchlyprotocol_switchlynode_v3_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwcyClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgSwcyClaim
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwcyClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSwcyClaim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgSwcyClaim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgSwcyClaim(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgSwcyClaim
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgSwcyClaim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgSwcyClaim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgSwcyClaim
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgSwcyClaim
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgSwcyClaim
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgSwcyClaim        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgSwcyClaim          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgSwcyClaim = fmt.Errorf("proto: unexpected end of group")
)
