// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/type_pool.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/switchlyprotocol/switchlynode/v3/common"
	github_com_switchlyprotocol_switchlynode_v3_common "github.com/switchlyprotocol/switchlynode/v3/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// |    State    | Swap | Add   | Withdraw  | Refunding |
// | ----------- | ---- | ----- | --------- | --------- |
// | `staged`    | no   | yes   | yes       | Refund Invalid Add/Remove Liquidity && all Swaps |
// | `available` | yes  | yes   | yes       | Refund Invalid Tx |
// | `suspended` | no   | no    | no        | Refund all |
type PoolStatus int32

const (
	PoolStatus_UnknownPoolStatus PoolStatus = 0
	PoolStatus_Available         PoolStatus = 1
	PoolStatus_Staged            PoolStatus = 2
	PoolStatus_Suspended         PoolStatus = 3
)

var PoolStatus_name = map[int32]string{
	0: "UnknownPoolStatus",
	1: "Available",
	2: "Staged",
	3: "Suspended",
}

var PoolStatus_value = map[string]int32{
	"UnknownPoolStatus": 0,
	"Available":         1,
	"Staged":            2,
	"Suspended":         3,
}

func (x PoolStatus) String() string {
	return proto.EnumName(PoolStatus_name, int32(x))
}

func (PoolStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f9680fe67c694e80, []int{0}
}

type Pool struct {
	BalanceSwitch        cosmossdk_io_math.Uint                                   `protobuf:"bytes,1,opt,name=balance_switch,json=balanceSwitch,proto3,customtype=cosmossdk.io/math.Uint" json:"balance_switch"`
	BalanceAsset         cosmossdk_io_math.Uint                                   `protobuf:"bytes,2,opt,name=balance_asset,json=balanceAsset,proto3,customtype=cosmossdk.io/math.Uint" json:"balance_asset"`
	Asset                github_com_switchlyprotocol_switchlynode_v3_common.Asset `protobuf:"bytes,3,opt,name=asset,proto3,customtype=github.com/switchlyprotocol/switchlynode/v3/common.Asset" json:"asset"`
	LPUnits              cosmossdk_io_math.Uint                                   `protobuf:"bytes,4,opt,name=LP_units,json=LPUnits,proto3,customtype=cosmossdk.io/math.Uint" json:"LP_units"`
	Status               PoolStatus                                               `protobuf:"varint,5,opt,name=status,proto3,enum=types.PoolStatus" json:"status,omitempty"`
	StatusSince          int64                                                    `protobuf:"varint,10,opt,name=status_since,json=statusSince,proto3" json:"status_since,omitempty"`
	Decimals             int64                                                    `protobuf:"varint,6,opt,name=decimals,proto3" json:"decimals,omitempty"`
	SynthUnits           cosmossdk_io_math.Uint                                   `protobuf:"bytes,7,opt,name=synth_units,json=synthUnits,proto3,customtype=cosmossdk.io/math.Uint" json:"synth_units"`
	PendingInboundSwitch cosmossdk_io_math.Uint                                   `protobuf:"bytes,8,opt,name=pending_inbound_switch,json=pendingInboundSwitch,proto3,customtype=cosmossdk.io/math.Uint" json:"pending_inbound_switch"`
	PendingInboundAsset  cosmossdk_io_math.Uint                                   `protobuf:"bytes,9,opt,name=pending_inbound_asset,json=pendingInboundAsset,proto3,customtype=cosmossdk.io/math.Uint" json:"pending_inbound_asset"`
}

func (m *Pool) Reset()      { *m = Pool{} }
func (*Pool) ProtoMessage() {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9680fe67c694e80, []int{0}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("types.PoolStatus", PoolStatus_name, PoolStatus_value)
	proto.RegisterType((*Pool)(nil), "types.Pool")
}

func init() { proto.RegisterFile("types/type_pool.proto", fileDescriptor_f9680fe67c694e80) }

var fileDescriptor_f9680fe67c694e80 = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x3f, 0x6f, 0xdb, 0x3e,
	0x10, 0x95, 0xe2, 0xd8, 0xb1, 0xcf, 0x71, 0xe0, 0x30, 0x71, 0x20, 0x78, 0x60, 0xfc, 0xfb, 0x4d,
	0x6e, 0x07, 0x09, 0x48, 0x96, 0x16, 0x28, 0xd0, 0xc6, 0x45, 0x87, 0x02, 0x29, 0x60, 0x48, 0xf5,
	0xd2, 0x45, 0xd0, 0x1f, 0x42, 0x26, 0x22, 0x91, 0x46, 0x49, 0x25, 0xf5, 0xd6, 0xb5, 0x5b, 0x3f,
	0x96, 0xc7, 0x8c, 0x41, 0x87, 0xa0, 0xb1, 0xbf, 0x48, 0x41, 0x52, 0x71, 0xda, 0x4e, 0xea, 0x22,
	0x9d, 0xde, 0xbb, 0xf7, 0xf0, 0x78, 0x27, 0xc2, 0x40, 0x2e, 0x17, 0x44, 0x78, 0xea, 0x19, 0x2e,
	0x38, 0xcf, 0xdd, 0xc5, 0x67, 0x2e, 0x39, 0x6a, 0x6a, 0x78, 0x78, 0x94, 0xf0, 0xa2, 0xe0, 0xcc,
	0x33, 0x2f, 0xc3, 0x0d, 0x8f, 0x33, 0x9e, 0x71, 0x5d, 0x7a, 0xaa, 0x32, 0xe8, 0xff, 0xdf, 0x9a,
	0xb0, 0x3b, 0xe5, 0x3c, 0x47, 0xef, 0xe0, 0x20, 0x8e, 0xf2, 0x88, 0x25, 0x24, 0x14, 0x37, 0x54,
	0x26, 0x73, 0xc7, 0x1e, 0xd9, 0xe3, 0xce, 0x04, 0xaf, 0xee, 0x4f, 0xad, 0x1f, 0xf7, 0xa7, 0x27,
	0x09, 0x17, 0x05, 0x17, 0x22, 0xbd, 0x72, 0x29, 0xf7, 0x8a, 0x48, 0xce, 0xdd, 0x19, 0x65, 0xd2,
	0xef, 0x55, 0xaa, 0x40, 0x8b, 0xd0, 0x5b, 0x78, 0x04, 0xc2, 0x48, 0x08, 0x22, 0x9d, 0x9d, 0x5a,
	0x2e, 0xfb, 0x95, 0xe8, 0x42, 0x69, 0x10, 0x81, 0xa6, 0x11, 0x37, 0x46, 0xf6, 0xb8, 0x7b, 0xd6,
	0x73, 0xab, 0x83, 0x68, 0x76, 0xf2, 0xa6, 0xf2, 0x7a, 0x91, 0x51, 0x39, 0x2f, 0x63, 0x45, 0x7a,
	0x26, 0x72, 0xbe, 0xd4, 0x87, 0x4a, 0x78, 0xbe, 0x05, 0x18, 0x4f, 0x89, 0x77, 0x7d, 0xee, 0xfd,
	0xee, 0xe0, 0x1b, 0x77, 0xf4, 0x12, 0xda, 0x97, 0xd3, 0xb0, 0x64, 0x54, 0x0a, 0x67, 0xb7, 0x56,
	0xcc, 0xbd, 0xcb, 0xe9, 0x4c, 0xb5, 0xa3, 0x67, 0xd0, 0x12, 0x32, 0x92, 0xa5, 0x70, 0x9a, 0x23,
	0x7b, 0x7c, 0x70, 0x76, 0xe8, 0xea, 0xc9, 0xbb, 0x6a, 0x94, 0x81, 0x26, 0xfc, 0xaa, 0x01, 0xfd,
	0x07, 0xfb, 0xa6, 0x0a, 0x05, 0x65, 0x09, 0x71, 0x60, 0x64, 0x8f, 0x1b, 0x7e, 0xd7, 0x60, 0x81,
	0x82, 0xd0, 0x10, 0xda, 0x29, 0x49, 0x68, 0x11, 0xe5, 0xc2, 0x69, 0x69, 0x7a, 0xfb, 0x8d, 0x5e,
	0x43, 0x57, 0x2c, 0x99, 0x9c, 0x57, 0x39, 0xf7, 0x6a, 0xe5, 0x04, 0x2d, 0x31, 0x51, 0x3f, 0xc2,
	0xc9, 0x82, 0xb0, 0x94, 0xb2, 0x2c, 0xa4, 0x2c, 0xe6, 0x25, 0x4b, 0x1f, 0x17, 0xdc, 0xae, 0xe5,
	0x75, 0x5c, 0xa9, 0xdf, 0x1b, 0x71, 0xb5, 0x67, 0x1f, 0x06, 0x7f, 0xbb, 0x9a, 0x95, 0x75, 0x6a,
	0x99, 0x1e, 0xfd, 0x69, 0xaa, 0xd7, 0xf2, 0xfc, 0x03, 0xc0, 0xd3, 0xfc, 0xd0, 0x00, 0x0e, 0x67,
	0xec, 0x8a, 0xf1, 0x1b, 0xf6, 0x04, 0xf6, 0x2d, 0xd4, 0x83, 0xce, 0xc5, 0x75, 0x44, 0xf3, 0x28,
	0xce, 0x49, 0xdf, 0x46, 0x00, 0xad, 0x40, 0x46, 0x19, 0x49, 0xfb, 0x3b, 0x8a, 0x0a, 0x4a, 0xa1,
	0x9c, 0x49, 0xda, 0x6f, 0x4c, 0xe2, 0xd5, 0x03, 0xb6, 0xee, 0x1e, 0xb0, 0xf5, 0x75, 0x8d, 0xad,
	0xd5, 0x1a, 0xdb, 0xb7, 0x6b, 0x6c, 0xff, 0x5c, 0x63, 0xfb, 0xfb, 0x06, 0x5b, 0xb7, 0x1b, 0x6c,
	0xdd, 0x6d, 0xb0, 0xf5, 0xe9, 0xd5, 0xbf, 0xfc, 0x45, 0x5f, 0xb6, 0x88, 0xbe, 0x7a, 0x22, 0x6e,
	0xe9, 0xd6, 0xf3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x85, 0x9c, 0x26, 0xc6, 0x90, 0x03, 0x00,
	0x00,
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StatusSince != 0 {
		i = encodeVarintTypePool(dAtA, i, uint64(m.StatusSince))
		i--
		dAtA[i] = 0x50
	}
	{
		size := m.PendingInboundAsset.Size()
		i -= size
		if _, err := m.PendingInboundAsset.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypePool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.PendingInboundSwitch.Size()
		i -= size
		if _, err := m.PendingInboundSwitch.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypePool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.SynthUnits.Size()
		i -= size
		if _, err := m.SynthUnits.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypePool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.Decimals != 0 {
		i = encodeVarintTypePool(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintTypePool(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.LPUnits.Size()
		i -= size
		if _, err := m.LPUnits.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypePool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Asset.Size()
		i -= size
		if _, err := m.Asset.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypePool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.BalanceAsset.Size()
		i -= size
		if _, err := m.BalanceAsset.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypePool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.BalanceSwitch.Size()
		i -= size
		if _, err := m.BalanceSwitch.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypePool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypePool(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypePool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BalanceSwitch.Size()
	n += 1 + l + sovTypePool(uint64(l))
	l = m.BalanceAsset.Size()
	n += 1 + l + sovTypePool(uint64(l))
	l = m.Asset.Size()
	n += 1 + l + sovTypePool(uint64(l))
	l = m.LPUnits.Size()
	n += 1 + l + sovTypePool(uint64(l))
	if m.Status != 0 {
		n += 1 + sovTypePool(uint64(m.Status))
	}
	if m.Decimals != 0 {
		n += 1 + sovTypePool(uint64(m.Decimals))
	}
	l = m.SynthUnits.Size()
	n += 1 + l + sovTypePool(uint64(l))
	l = m.PendingInboundSwitch.Size()
	n += 1 + l + sovTypePool(uint64(l))
	l = m.PendingInboundAsset.Size()
	n += 1 + l + sovTypePool(uint64(l))
	if m.StatusSince != 0 {
		n += 1 + sovTypePool(uint64(m.StatusSince))
	}
	return n
}

func sovTypePool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypePool(x uint64) (n int) {
	return sovTypePool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypePool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceSwitch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypePool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypePool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BalanceSwitch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypePool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypePool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BalanceAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypePool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypePool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LPUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypePool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypePool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LPUnits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= PoolStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SynthUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypePool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypePool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SynthUnits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingInboundSwitch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypePool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypePool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingInboundSwitch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingInboundAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypePool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypePool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingInboundAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusSince", wireType)
			}
			m.StatusSince = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusSince |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypePool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypePool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypePool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypePool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypePool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypePool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypePool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypePool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypePool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypePool = fmt.Errorf("proto: unexpected end of group")
)
