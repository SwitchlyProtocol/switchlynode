// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_switchlyname.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QuerySwitchlynameRequest struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Height string `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QuerySwitchlynameRequest) Reset()         { *m = QuerySwitchlynameRequest{} }
func (m *QuerySwitchlynameRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySwitchlynameRequest) ProtoMessage()    {}
func (*QuerySwitchlynameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa1abac894368a93, []int{0}
}
func (m *QuerySwitchlynameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySwitchlynameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySwitchlynameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySwitchlynameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySwitchlynameRequest.Merge(m, src)
}
func (m *QuerySwitchlynameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySwitchlynameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySwitchlynameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySwitchlynameRequest proto.InternalMessageInfo

func (m *QuerySwitchlynameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QuerySwitchlynameRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QuerySwitchlynameResponse struct {
	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ExpireBlockHeight int64  `protobuf:"varint,2,opt,name=expire_block_height,json=expireBlockHeight,proto3" json:"expire_block_height,omitempty"`
	Owner             string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	PreferredAsset    string `protobuf:"bytes,4,opt,name=preferred_asset,json=preferredAsset,proto3" json:"preferred_asset"`
	// Amount of SWITCH currently needed to trigger a preferred asset swap.
	PreferredAssetSwapThresholdSwitch string `protobuf:"bytes,7,opt,name=preferred_asset_swap_threshold_switch,json=preferredAssetSwapThresholdSwitch,proto3" json:"preferred_asset_swap_threshold_switch,omitempty"`
	// Amount of SWITCH currently accrued by this switchlyname in affiliate fees waiting to be swapped to preferred asset.
	AffiliateCollectorSwitch string               `protobuf:"bytes,5,opt,name=affiliate_collector_switch,json=affiliateCollectorSwitch,proto3" json:"affiliate_collector_switch,omitempty"`
	Aliases                  []*SwitchlynameAlias `protobuf:"bytes,6,rep,name=aliases,proto3" json:"aliases"`
}

func (m *QuerySwitchlynameResponse) Reset()         { *m = QuerySwitchlynameResponse{} }
func (m *QuerySwitchlynameResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySwitchlynameResponse) ProtoMessage()    {}
func (*QuerySwitchlynameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa1abac894368a93, []int{1}
}
func (m *QuerySwitchlynameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySwitchlynameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySwitchlynameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySwitchlynameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySwitchlynameResponse.Merge(m, src)
}
func (m *QuerySwitchlynameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySwitchlynameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySwitchlynameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySwitchlynameResponse proto.InternalMessageInfo

func (m *QuerySwitchlynameResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QuerySwitchlynameResponse) GetExpireBlockHeight() int64 {
	if m != nil {
		return m.ExpireBlockHeight
	}
	return 0
}

func (m *QuerySwitchlynameResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QuerySwitchlynameResponse) GetPreferredAsset() string {
	if m != nil {
		return m.PreferredAsset
	}
	return ""
}

func (m *QuerySwitchlynameResponse) GetPreferredAssetSwapThresholdSwitch() string {
	if m != nil {
		return m.PreferredAssetSwapThresholdSwitch
	}
	return ""
}

func (m *QuerySwitchlynameResponse) GetAffiliateCollectorSwitch() string {
	if m != nil {
		return m.AffiliateCollectorSwitch
	}
	return ""
}

func (m *QuerySwitchlynameResponse) GetAliases() []*SwitchlynameAlias {
	if m != nil {
		return m.Aliases
	}
	return nil
}

type SwitchlynameAlias struct {
	Chain   string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *SwitchlynameAlias) Reset()         { *m = SwitchlynameAlias{} }
func (m *SwitchlynameAlias) String() string { return proto.CompactTextString(m) }
func (*SwitchlynameAlias) ProtoMessage()    {}
func (*SwitchlynameAlias) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa1abac894368a93, []int{2}
}
func (m *SwitchlynameAlias) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwitchlynameAlias) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwitchlynameAlias.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwitchlynameAlias) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwitchlynameAlias.Merge(m, src)
}
func (m *SwitchlynameAlias) XXX_Size() int {
	return m.Size()
}
func (m *SwitchlynameAlias) XXX_DiscardUnknown() {
	xxx_messageInfo_SwitchlynameAlias.DiscardUnknown(m)
}

var xxx_messageInfo_SwitchlynameAlias proto.InternalMessageInfo

func (m *SwitchlynameAlias) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *SwitchlynameAlias) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*QuerySwitchlynameRequest)(nil), "types.QuerySwitchlynameRequest")
	proto.RegisterType((*QuerySwitchlynameResponse)(nil), "types.QuerySwitchlynameResponse")
	proto.RegisterType((*SwitchlynameAlias)(nil), "types.SwitchlynameAlias")
}

func init() { proto.RegisterFile("types/query_switchlyname.proto", fileDescriptor_fa1abac894368a93) }

var fileDescriptor_fa1abac894368a93 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x4d, 0x6f, 0xd3, 0x30,
	0x18, 0x6e, 0xc8, 0xda, 0x0a, 0x4f, 0x02, 0xcd, 0x9b, 0x90, 0xd9, 0x21, 0x1b, 0x95, 0x90, 0x76,
	0x4a, 0x24, 0x76, 0xad, 0x84, 0x96, 0x49, 0x88, 0x23, 0x64, 0x88, 0x03, 0x97, 0xc8, 0x4d, 0xde,
	0x26, 0x16, 0x5e, 0x9c, 0xda, 0x2e, 0x69, 0xef, 0xfc, 0x00, 0x7e, 0x16, 0xc7, 0x1e, 0x39, 0x55,
	0xa8, 0xbd, 0xf5, 0x57, 0x20, 0x3b, 0x1f, 0x2a, 0x5d, 0x6f, 0xef, 0xf3, 0xf1, 0x3e, 0x96, 0x1f,
	0x1b, 0x79, 0x7a, 0x59, 0x82, 0x0a, 0x66, 0x73, 0x90, 0xcb, 0x58, 0x55, 0x4c, 0x27, 0x39, 0x5f,
	0x16, 0xf4, 0x11, 0xfc, 0x52, 0x0a, 0x2d, 0x70, 0xdf, 0xea, 0x97, 0x17, 0x99, 0xc8, 0x84, 0x65,
	0x02, 0x33, 0xd5, 0xe2, 0xe8, 0x03, 0x22, 0x9f, 0xcd, 0xe2, 0xc3, 0xde, 0x5e, 0x04, 0xb3, 0x39,
	0x28, 0x8d, 0x31, 0x3a, 0x31, 0x90, 0x38, 0xd7, 0xce, 0xcd, 0xf3, 0xc8, 0xce, 0xf8, 0x15, 0x1a,
	0xe4, 0xc0, 0xb2, 0x5c, 0x93, 0x67, 0x96, 0x6d, 0xd0, 0xe8, 0xa7, 0x8b, 0x5e, 0x1f, 0x09, 0x52,
	0xa5, 0x28, 0x14, 0x1c, 0x4d, 0xf2, 0xd1, 0x39, 0x2c, 0x4a, 0x26, 0x21, 0x9e, 0x70, 0x91, 0x7c,
	0x8f, 0xf7, 0x62, 0xdd, 0xe8, 0xac, 0x96, 0x42, 0xa3, 0x7c, 0xb4, 0x02, 0xbe, 0x40, 0x7d, 0x51,
	0x15, 0x20, 0x89, 0x6b, 0x43, 0x6a, 0x80, 0xc7, 0xe8, 0x65, 0x29, 0x61, 0x0a, 0x52, 0x42, 0x1a,
	0x53, 0xa5, 0x40, 0x93, 0x13, 0xa3, 0x87, 0xe7, 0xbb, 0xf5, 0xd5, 0xa1, 0x14, 0xbd, 0xe8, 0x88,
	0x3b, 0x83, 0xf1, 0x27, 0xf4, 0xf6, 0xc0, 0x12, 0xab, 0x8a, 0x96, 0xb1, 0xce, 0x25, 0xa8, 0x5c,
	0xf0, 0xb4, 0xe9, 0x93, 0x0c, 0xed, 0x99, 0x6f, 0xfe, 0x5f, 0x7f, 0xa8, 0x68, 0xf9, 0xa5, 0x75,
	0xd6, 0xf7, 0xc6, 0x63, 0x74, 0x49, 0xa7, 0x53, 0xc6, 0x19, 0xd5, 0x10, 0x27, 0x82, 0x73, 0x48,
	0xb4, 0x90, 0x6d, 0x4c, 0xdf, 0xc6, 0x90, 0xce, 0x71, 0xdf, 0x1a, 0x9a, 0xed, 0xf7, 0x68, 0x48,
	0x39, 0xa3, 0x0a, 0x14, 0x19, 0x5c, 0xbb, 0x37, 0xa7, 0xef, 0x88, 0x6f, 0x1f, 0xcf, 0xdf, 0x6f,
	0xf5, 0xce, 0x38, 0xc2, 0xd3, 0xdd, 0xfa, 0xaa, 0x35, 0x47, 0xed, 0x30, 0xba, 0x47, 0x67, 0x4f,
	0xac, 0xa6, 0xb9, 0x24, 0xa7, 0xac, 0x68, 0xea, 0xaf, 0x01, 0x26, 0x68, 0x48, 0xd3, 0x54, 0x82,
	0x52, 0xcd, 0x53, 0xb6, 0x30, 0xfc, 0xfa, 0x7b, 0xe3, 0x39, 0xab, 0x8d, 0xe7, 0xfc, 0xdd, 0x78,
	0xce, 0xaf, 0xad, 0xd7, 0x5b, 0x6d, 0xbd, 0xde, 0x9f, 0xad, 0xd7, 0xfb, 0x36, 0xce, 0x98, 0xce,
	0xe7, 0x13, 0x3f, 0x11, 0x8f, 0x41, 0xfb, 0xd3, 0xec, 0x3f, 0x4a, 0x04, 0xef, 0x88, 0x42, 0xa4,
	0x10, 0xfc, 0xb8, 0x0d, 0x16, 0x1d, 0x13, 0xd8, 0x4b, 0x4c, 0x06, 0xd6, 0x7a, 0xfb, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0x0a, 0x38, 0x54, 0x20, 0xb1, 0x02, 0x00, 0x00,
}

func (m *QuerySwitchlynameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySwitchlynameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySwitchlynameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQuerySwitchlyname(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuerySwitchlyname(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySwitchlynameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySwitchlynameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySwitchlynameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreferredAssetSwapThresholdSwitch) > 0 {
		i -= len(m.PreferredAssetSwapThresholdSwitch)
		copy(dAtA[i:], m.PreferredAssetSwapThresholdSwitch)
		i = encodeVarintQuerySwitchlyname(dAtA, i, uint64(len(m.PreferredAssetSwapThresholdSwitch)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Aliases) > 0 {
		for iNdEx := len(m.Aliases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Aliases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerySwitchlyname(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AffiliateCollectorSwitch) > 0 {
		i -= len(m.AffiliateCollectorSwitch)
		copy(dAtA[i:], m.AffiliateCollectorSwitch)
		i = encodeVarintQuerySwitchlyname(dAtA, i, uint64(len(m.AffiliateCollectorSwitch)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PreferredAsset) > 0 {
		i -= len(m.PreferredAsset)
		copy(dAtA[i:], m.PreferredAsset)
		i = encodeVarintQuerySwitchlyname(dAtA, i, uint64(len(m.PreferredAsset)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuerySwitchlyname(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ExpireBlockHeight != 0 {
		i = encodeVarintQuerySwitchlyname(dAtA, i, uint64(m.ExpireBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuerySwitchlyname(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwitchlynameAlias) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwitchlynameAlias) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwitchlynameAlias) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuerySwitchlyname(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuerySwitchlyname(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuerySwitchlyname(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuerySwitchlyname(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySwitchlynameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuerySwitchlyname(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQuerySwitchlyname(uint64(l))
	}
	return n
}

func (m *QuerySwitchlynameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuerySwitchlyname(uint64(l))
	}
	if m.ExpireBlockHeight != 0 {
		n += 1 + sovQuerySwitchlyname(uint64(m.ExpireBlockHeight))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuerySwitchlyname(uint64(l))
	}
	l = len(m.PreferredAsset)
	if l > 0 {
		n += 1 + l + sovQuerySwitchlyname(uint64(l))
	}
	l = len(m.AffiliateCollectorSwitch)
	if l > 0 {
		n += 1 + l + sovQuerySwitchlyname(uint64(l))
	}
	if len(m.Aliases) > 0 {
		for _, e := range m.Aliases {
			l = e.Size()
			n += 1 + l + sovQuerySwitchlyname(uint64(l))
		}
	}
	l = len(m.PreferredAssetSwapThresholdSwitch)
	if l > 0 {
		n += 1 + l + sovQuerySwitchlyname(uint64(l))
	}
	return n
}

func (m *SwitchlynameAlias) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuerySwitchlyname(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuerySwitchlyname(uint64(l))
	}
	return n
}

func sovQuerySwitchlyname(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerySwitchlyname(x uint64) (n int) {
	return sovQuerySwitchlyname(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySwitchlynameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerySwitchlyname
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySwitchlynameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySwitchlynameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchlyname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchlyname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerySwitchlyname(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySwitchlynameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerySwitchlyname
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySwitchlynameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySwitchlynameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchlyname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireBlockHeight", wireType)
			}
			m.ExpireBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchlyname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchlyname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchlyname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliateCollectorSwitch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchlyname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AffiliateCollectorSwitch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aliases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchlyname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aliases = append(m.Aliases, &SwitchlynameAlias{})
			if err := m.Aliases[len(m.Aliases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredAssetSwapThresholdSwitch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchlyname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredAssetSwapThresholdSwitch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerySwitchlyname(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwitchlynameAlias) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerySwitchlyname
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwitchlynameAlias: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwitchlynameAlias: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchlyname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySwitchlyname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerySwitchlyname(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerySwitchlyname
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerySwitchlyname(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerySwitchlyname
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerySwitchlyname
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerySwitchlyname
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuerySwitchlyname
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuerySwitchlyname
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuerySwitchlyname
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuerySwitchlyname        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerySwitchlyname          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuerySwitchlyname = fmt.Errorf("proto: unexpected end of group")
)
