// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_queue.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryQueueRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryQueueRequest) Reset()         { *m = QueryQueueRequest{} }
func (m *QueryQueueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQueueRequest) ProtoMessage()    {}
func (*QueryQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_380ef9790eb8263f, []int{0}
}
func (m *QueryQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQueueRequest.Merge(m, src)
}
func (m *QueryQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQueueRequest proto.InternalMessageInfo

func (m *QueryQueueRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryQueueResponse struct {
	Swap int64 `protobuf:"varint,1,opt,name=swap,proto3" json:"swap"`
	// number of signed outbound tx in the queue
	Outbound int64 `protobuf:"varint,2,opt,name=outbound,proto3" json:"outbound"`
	Internal int64 `protobuf:"varint,3,opt,name=internal,proto3" json:"internal"`
	// scheduled outbound value in SWITCH
	ScheduledOutboundValue string `protobuf:"bytes,4,opt,name=scheduled_outbound_value,json=scheduledOutboundValue,proto3" json:"scheduled_outbound_value"`
	// scheduled outbound clout in SWITCH
	ScheduledOutboundClout string `protobuf:"bytes,5,opt,name=scheduled_outbound_clout,json=scheduledOutboundClout,proto3" json:"scheduled_outbound_clout"`
}

func (m *QueryQueueResponse) Reset()         { *m = QueryQueueResponse{} }
func (m *QueryQueueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQueueResponse) ProtoMessage()    {}
func (*QueryQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_380ef9790eb8263f, []int{1}
}
func (m *QueryQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQueueResponse.Merge(m, src)
}
func (m *QueryQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQueueResponse proto.InternalMessageInfo

func (m *QueryQueueResponse) GetSwap() int64 {
	if m != nil {
		return m.Swap
	}
	return 0
}

func (m *QueryQueueResponse) GetOutbound() int64 {
	if m != nil {
		return m.Outbound
	}
	return 0
}

func (m *QueryQueueResponse) GetInternal() int64 {
	if m != nil {
		return m.Internal
	}
	return 0
}

func (m *QueryQueueResponse) GetScheduledOutboundValue() string {
	if m != nil {
		return m.ScheduledOutboundValue
	}
	return ""
}

func (m *QueryQueueResponse) GetScheduledOutboundClout() string {
	if m != nil {
		return m.ScheduledOutboundClout
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryQueueRequest)(nil), "types.QueryQueueRequest")
	proto.RegisterType((*QueryQueueResponse)(nil), "types.QueryQueueResponse")
}

func init() { proto.RegisterFile("types/query_queue.proto", fileDescriptor_380ef9790eb8263f) }

var fileDescriptor_380ef9790eb8263f = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xbf, 0x6e, 0xfa, 0x30,
	0x10, 0xc7, 0x09, 0xff, 0xc4, 0xcf, 0xfa, 0x2d, 0xb5, 0x2a, 0x6a, 0x55, 0xc8, 0x54, 0x4c, 0x48,
	0x95, 0xf0, 0xc0, 0xda, 0x89, 0x3e, 0x40, 0x85, 0x07, 0x86, 0x2e, 0x08, 0x92, 0x53, 0x12, 0xc9,
	0x8d, 0x03, 0xb6, 0xa1, 0xbc, 0x45, 0x9f, 0xa6, 0xcf, 0xd0, 0x91, 0xb1, 0x13, 0xaa, 0x92, 0x2d,
	0x4f, 0x51, 0xd9, 0x05, 0xb7, 0x43, 0xe9, 0x62, 0xdd, 0x7d, 0xbe, 0x9f, 0x3b, 0x59, 0x3a, 0x74,
	0xa5, 0x77, 0x39, 0x28, 0xb6, 0x32, 0xb0, 0xde, 0xcd, 0x57, 0x06, 0x0c, 0x8c, 0xf2, 0xb5, 0xd4,
	0x12, 0xb7, 0x5c, 0x70, 0x7d, 0x19, 0xcb, 0x58, 0x3a, 0xc2, 0x6c, 0xf5, 0x15, 0x0e, 0x6e, 0xd1,
	0xc5, 0xd4, 0x4e, 0x4c, 0xed, 0x00, 0x87, 0x95, 0x01, 0xa5, 0x71, 0x17, 0xb5, 0x13, 0x48, 0xe3,
	0x44, 0x93, 0xe0, 0x26, 0x18, 0xfe, 0xe3, 0xc7, 0x6e, 0xf0, 0x5a, 0x47, 0xf8, 0xa7, 0xad, 0x72,
	0x99, 0x29, 0xc0, 0x3d, 0xd4, 0x54, 0xdb, 0x45, 0xee, 0xe4, 0xc6, 0xa4, 0x53, 0x1d, 0xfa, 0xae,
	0xe7, 0xee, 0xc5, 0x43, 0xd4, 0x91, 0x46, 0x2f, 0xa5, 0xc9, 0x22, 0x52, 0x77, 0xc6, 0xff, 0xea,
	0xd0, 0xf7, 0x8c, 0xfb, 0xca, 0x9a, 0x69, 0xa6, 0x61, 0x9d, 0x2d, 0x04, 0x69, 0x7c, 0x9b, 0x27,
	0xc6, 0x7d, 0x85, 0x67, 0x88, 0xa8, 0x30, 0x81, 0xc8, 0x08, 0x88, 0xe6, 0xa7, 0xf9, 0xf9, 0x66,
	0x21, 0x0c, 0x90, 0xa6, 0xfd, 0xf2, 0xa4, 0x57, 0x1d, 0xfa, 0x67, 0x1d, 0xde, 0xf5, 0xc9, 0xc3,
	0x31, 0x98, 0x59, 0x7e, 0x66, 0x6f, 0x28, 0xa4, 0xd1, 0xa4, 0xf5, 0xe7, 0x5e, 0xe7, 0xfc, 0xb2,
	0xf7, 0xde, 0xf2, 0xc9, 0xec, 0xad, 0xa0, 0xc1, 0xbe, 0xa0, 0xc1, 0x47, 0x41, 0x83, 0x97, 0x92,
	0xd6, 0xf6, 0x25, 0xad, 0xbd, 0x97, 0xb4, 0xf6, 0x78, 0x17, 0xa7, 0x3a, 0x31, 0xcb, 0x51, 0x28,
	0x9f, 0x98, 0xda, 0xa6, 0x3a, 0x4c, 0xc4, 0xce, 0x5d, 0x26, 0x94, 0xc2, 0x83, 0x4c, 0x46, 0xc0,
	0x36, 0x63, 0xf6, 0xec, 0x09, 0x73, 0x37, 0x5d, 0xb6, 0x9d, 0x3a, 0xfe, 0x0c, 0x00, 0x00, 0xff,
	0xff, 0x33, 0x6e, 0xc7, 0x61, 0xfc, 0x01, 0x00, 0x00,
}

func (m *QueryQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryQueue(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScheduledOutboundClout) > 0 {
		i -= len(m.ScheduledOutboundClout)
		copy(dAtA[i:], m.ScheduledOutboundClout)
		i = encodeVarintQueryQueue(dAtA, i, uint64(len(m.ScheduledOutboundClout)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ScheduledOutboundValue) > 0 {
		i -= len(m.ScheduledOutboundValue)
		copy(dAtA[i:], m.ScheduledOutboundValue)
		i = encodeVarintQueryQueue(dAtA, i, uint64(len(m.ScheduledOutboundValue)))
		i--
		dAtA[i] = 0x22
	}
	if m.Internal != 0 {
		i = encodeVarintQueryQueue(dAtA, i, uint64(m.Internal))
		i--
		dAtA[i] = 0x18
	}
	if m.Outbound != 0 {
		i = encodeVarintQueryQueue(dAtA, i, uint64(m.Outbound))
		i--
		dAtA[i] = 0x10
	}
	if m.Swap != 0 {
		i = encodeVarintQueryQueue(dAtA, i, uint64(m.Swap))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryQueue(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryQueue(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryQueue(uint64(l))
	}
	return n
}

func (m *QueryQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Swap != 0 {
		n += 1 + sovQueryQueue(uint64(m.Swap))
	}
	if m.Outbound != 0 {
		n += 1 + sovQueryQueue(uint64(m.Outbound))
	}
	if m.Internal != 0 {
		n += 1 + sovQueryQueue(uint64(m.Internal))
	}
	l = len(m.ScheduledOutboundValue)
	if l > 0 {
		n += 1 + l + sovQueryQueue(uint64(l))
	}
	l = len(m.ScheduledOutboundClout)
	if l > 0 {
		n += 1 + l + sovQueryQueue(uint64(l))
	}
	return n
}

func sovQueryQueue(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryQueue(x uint64) (n int) {
	return sovQueryQueue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			m.Swap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Swap |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outbound", wireType)
			}
			m.Outbound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Outbound |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			m.Internal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Internal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledOutboundValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScheduledOutboundValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledOutboundClout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScheduledOutboundClout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryQueue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryQueue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryQueue
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryQueue
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryQueue
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryQueue        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryQueue          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryQueue = fmt.Errorf("proto: unexpected end of group")
)
