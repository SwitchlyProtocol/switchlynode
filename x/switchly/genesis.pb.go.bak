// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: switchly/genesis.proto

package switchly

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "github.com/switchlyprotocol/switchlynode/v3/common"
	github_com_switchlyprotocol_switchlynode_v3_common "github.com/switchlyprotocol/switchlynode/v3/common"
	github_com_switchlyprotocol_switchlynode_v3_x_switchly_types "github.com/switchlyprotocol/switchlynode/v3/x/switchly/types"
	types "github.com/switchlyprotocol/switchlynode/v3/x/switchly/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LastChainHeight struct {
	Chain  string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Height int64  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *LastChainHeight) Reset()         { *m = LastChainHeight{} }
func (m *LastChainHeight) String() string { return proto.CompactTextString(m) }
func (*LastChainHeight) ProtoMessage()    {}
func (*LastChainHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_da38bc4971a05fb2, []int{0}
}
func (m *LastChainHeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastChainHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastChainHeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastChainHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastChainHeight.Merge(m, src)
}
func (m *LastChainHeight) XXX_Size() int {
	return m.Size()
}
func (m *LastChainHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_LastChainHeight.DiscardUnknown(m)
}

var xxx_messageInfo_LastChainHeight proto.InternalMessageInfo

func (m *LastChainHeight) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *LastChainHeight) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Mimir struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Mimir) Reset()         { *m = Mimir{} }
func (m *Mimir) String() string { return proto.CompactTextString(m) }
func (*Mimir) ProtoMessage()    {}
func (*Mimir) Descriptor() ([]byte, []int) {
	return fileDescriptor_da38bc4971a05fb2, []int{1}
}
func (m *Mimir) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mimir) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mimir.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mimir) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mimir.Merge(m, src)
}
func (m *Mimir) XXX_Size() int {
	return m.Size()
}
func (m *Mimir) XXX_DiscardUnknown() {
	xxx_messageInfo_Mimir.DiscardUnknown(m)
}

var xxx_messageInfo_Mimir proto.InternalMessageInfo

func (m *Mimir) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Mimir) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type GenesisState struct {
	Pools               []types.Pool                                                                     `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools"`
	LiquidityProviders  github_com_switchlyprotocol_switchlynode_v3_x_switchly_types.LiquidityProviders  `protobuf:"bytes,2,rep,name=liquidity_providers,json=liquidityProviders,proto3,castrepeated=github.com/switchlyprotocol/switchlynode/v3/x/switchly/types.LiquidityProviders" json:"liquidity_providers"`
	ObservedTxInVoters  github_com_switchlyprotocol_switchlynode_v3_x_switchly_types.ObservedTxVoters    `protobuf:"bytes,3,rep,name=observed_tx_in_voters,json=observedTxInVoters,proto3,castrepeated=github.com/switchlyprotocol/switchlynode/v3/x/switchly/types.ObservedTxVoters" json:"observed_tx_in_voters"`
	ObservedTxOutVoters github_com_switchlyprotocol_switchlynode_v3_x_switchly_types.ObservedTxVoters    `protobuf:"bytes,4,rep,name=observed_tx_out_voters,json=observedTxOutVoters,proto3,castrepeated=github.com/switchlyprotocol/switchlynode/v3/x/switchly/types.ObservedTxVoters" json:"observed_tx_out_voters"`
	TxOuts              []types.TxOut                                                                    `protobuf:"bytes,5,rep,name=tx_outs,json=txOuts,proto3" json:"tx_outs"`
	NodeAccounts        github_com_switchlyprotocol_switchlynode_v3_x_switchly_types.NodeAccounts        `protobuf:"bytes,6,rep,name=node_accounts,json=nodeAccounts,proto3,castrepeated=github.com/switchlyprotocol/switchlynode/v3/x/switchly/types.NodeAccounts" json:"node_accounts"`
	Vaults              github_com_switchlyprotocol_switchlynode_v3_x_switchly_types.Vaults              `protobuf:"bytes,7,rep,name=vaults,proto3,castrepeated=github.com/switchlyprotocol/switchlynode/v3/x/switchly/types.Vaults" json:"vaults"`
	Reserve             uint64                                                                           `protobuf:"varint,8,opt,name=reserve,proto3" json:"reserve,omitempty"`
	LastSignedHeight    int64                                                                            `protobuf:"varint,10,opt,name=last_signed_height,json=lastSignedHeight,proto3" json:"last_signed_height,omitempty"`
	LastChainHeights    []LastChainHeight                                                                `protobuf:"bytes,11,rep,name=last_chain_heights,json=lastChainHeights,proto3" json:"last_chain_heights"`
	ReserveContributors github_com_switchlyprotocol_switchlynode_v3_x_switchly_types.ReserveContributors `protobuf:"bytes,12,rep,name=reserve_contributors,json=reserveContributors,proto3,castrepeated=github.com/switchlyprotocol/switchlynode/v3/x/switchly/types.ReserveContributors" json:"reserve_contributors"`
	Network             types.Network                                                                    `protobuf:"bytes,13,opt,name=network,proto3" json:"network"`
	AdvSwapQueueItems   []types.MsgSwap                                                                  `protobuf:"bytes,19,rep,name=adv_swap_queue_items,json=advSwapQueueItems,proto3" json:"adv_swap_queue_items"`
	NetworkFees         []types.NetworkFee                                                               `protobuf:"bytes,20,rep,name=network_fees,json=networkFees,proto3" json:"network_fees"`
	ChainContracts      []types.ChainContract                                                            `protobuf:"bytes,22,rep,name=chain_contracts,json=chainContracts,proto3" json:"chain_contracts"`
	SWITCHNames         []types.SWITCHName                                                               `protobuf:"bytes,23,rep,name=SWITCHNames,proto3" json:"SWITCHNames"`
	Mimirs              []Mimir                                                                          `protobuf:"bytes,24,rep,name=mimirs,proto3" json:"mimirs"`
	// store_version is deprecated in v3.0.0
	StoreVersion              int64                                                    `protobuf:"varint,25,opt,name=store_version,json=storeVersion,proto3" json:"store_version,omitempty"` // Deprecated: Do not use.
	BondProviders             []types.BondProviders                                    `protobuf:"bytes,26,rep,name=bond_providers,json=bondProviders,proto3" json:"bond_providers"`
	POL                       types.ProtocolOwnedLiquidity                             `protobuf:"bytes,27,opt,name=POL,proto3" json:"POL"`
	Loans                     []types.Loan                                             `protobuf:"bytes,28,rep,name=loans,proto3" json:"loans"`
	StreamingSwaps            []types.StreamingSwap                                    `protobuf:"bytes,29,rep,name=streaming_swaps,json=streamingSwaps,proto3" json:"streaming_swaps"`
	SwapQueueItems            []types.MsgSwap                                          `protobuf:"bytes,30,rep,name=swap_queue_items,json=swapQueueItems,proto3" json:"swap_queue_items"`
	SwapperClout              []types.SwapperClout                                     `protobuf:"bytes,31,rep,name=swapper_clout,json=swapperClout,proto3" json:"swapper_clout"`
	TradeAccounts             []types.TradeAccount                                     `protobuf:"bytes,32,rep,name=trade_accounts,json=tradeAccounts,proto3" json:"trade_accounts"`
	TradeUnits                []types.TradeUnit                                        `protobuf:"bytes,33,rep,name=trade_units,json=tradeUnits,proto3" json:"trade_units"`
	OutboundFeeWithheldSwitch github_com_switchlyprotocol_switchlynode_v3_common.Coins `protobuf:"bytes,34,rep,name=outbound_fee_withheld_switch,json=outboundFeeWithheldSwitch,proto3,castrepeated=github.com/switchlyprotocol/switchlynode/v3/common.Coins" json:"outbound_fee_withheld_switch"`
	OutboundFeeSpentSwitch    github_com_switchlyprotocol_switchlynode_v3_common.Coins `protobuf:"bytes,35,rep,name=outbound_fee_spent_switch,json=outboundFeeSpentSwitch,proto3,castrepeated=github.com/switchlyprotocol/switchlynode/v3/common.Coins" json:"outbound_fee_spent_switch"`
	SwitchProviders           []types.SWITCHProvider                                   `protobuf:"bytes,36,rep,name=switch_providers,json=switchProviders,proto3" json:"switch_providers"`
	SwitchPool                types.SwitchPool                                         `protobuf:"bytes,37,opt,name=switch_pool,json=switchPool,proto3" json:"switch_pool"`
	NodeMimirs                []types.NodeMimir                                        `protobuf:"bytes,38,rep,name=nodeMimirs,proto3" json:"nodeMimirs"`
	AffiliateCollectors       []types.AffiliateFeeCollector                            `protobuf:"bytes,39,rep,name=affiliate_collectors,json=affiliateCollectors,proto3" json:"affiliate_collectors"`
	LoanTotalCollateral       github_com_switchlyprotocol_switchlynode_v3_common.Coins `protobuf:"bytes,40,rep,name=loan_total_collateral,json=loanTotalCollateral,proto3,castrepeated=github.com/switchlyprotocol/switchlynode/v3/common.Coins" json:"loan_total_collateral"`
	SecuredAssets             []types.SecuredAsset                                     `protobuf:"bytes,41,rep,name=secured_assets,json=securedAssets,proto3" json:"secured_assets"`
	TcyClaimers               []types.SWCYClaimer                                      `protobuf:"bytes,42,rep,name=tcy_claimers,json=tcyClaimers,proto3" json:"tcy_claimers"`
	TcyStakers                []types.SWCYStaker                                       `protobuf:"bytes,43,rep,name=tcy_stakers,json=tcyStakers,proto3" json:"tcy_stakers"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_da38bc4971a05fb2, []int{2}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetPools() []types.Pool {
	if m != nil {
		return m.Pools
	}
	return nil
}

func (m *GenesisState) GetLiquidityProviders() github_com_switchlyprotocol_switchlynode_v3_x_switchly_types.LiquidityProviders {
	if m != nil {
		return m.LiquidityProviders
	}
	return nil
}

func (m *GenesisState) GetObservedTxInVoters() github_com_switchlyprotocol_switchlynode_v3_x_switchly_types.ObservedTxVoters {
	if m != nil {
		return m.ObservedTxInVoters
	}
	return nil
}

func (m *GenesisState) GetObservedTxOutVoters() github_com_switchlyprotocol_switchlynode_v3_x_switchly_types.ObservedTxVoters {
	if m != nil {
		return m.ObservedTxOutVoters
	}
	return nil
}

func (m *GenesisState) GetTxOuts() []types.TxOut {
	if m != nil {
		return m.TxOuts
	}
	return nil
}

func (m *GenesisState) GetNodeAccounts() github_com_switchlyprotocol_switchlynode_v3_x_switchly_types.NodeAccounts {
	if m != nil {
		return m.NodeAccounts
	}
	return nil
}

func (m *GenesisState) GetVaults() github_com_switchlyprotocol_switchlynode_v3_x_switchly_types.Vaults {
	if m != nil {
		return m.Vaults
	}
	return nil
}

func (m *GenesisState) GetReserve() uint64 {
	if m != nil {
		return m.Reserve
	}
	return 0
}

func (m *GenesisState) GetLastSignedHeight() int64 {
	if m != nil {
		return m.LastSignedHeight
	}
	return 0
}

func (m *GenesisState) GetLastChainHeights() []LastChainHeight {
	if m != nil {
		return m.LastChainHeights
	}
	return nil
}

func (m *GenesisState) GetReserveContributors() github_com_switchlyprotocol_switchlynode_v3_x_switchly_types.ReserveContributors {
	if m != nil {
		return m.ReserveContributors
	}
	return nil
}

func (m *GenesisState) GetNetwork() types.Network {
	if m != nil {
		return m.Network
	}
	return types.Network{}
}

func (m *GenesisState) GetAdvSwapQueueItems() []types.MsgSwap {
	if m != nil {
		return m.AdvSwapQueueItems
	}
	return nil
}

func (m *GenesisState) GetNetworkFees() []types.NetworkFee {
	if m != nil {
		return m.NetworkFees
	}
	return nil
}

func (m *GenesisState) GetChainContracts() []types.ChainContract {
	if m != nil {
		return m.ChainContracts
	}
	return nil
}

func (m *GenesisState) GetSWITCHNames() []types.SWITCHName {
	if m != nil {
		return m.SWITCHNames
	}
	return nil
}

func (m *GenesisState) GetMimirs() []Mimir {
	if m != nil {
		return m.Mimirs
	}
	return nil
}

// Deprecated: Do not use.
func (m *GenesisState) GetStoreVersion() int64 {
	if m != nil {
		return m.StoreVersion
	}
	return 0
}

func (m *GenesisState) GetBondProviders() []types.BondProviders {
	if m != nil {
		return m.BondProviders
	}
	return nil
}

func (m *GenesisState) GetPOL() types.ProtocolOwnedLiquidity {
	if m != nil {
		return m.POL
	}
	return types.ProtocolOwnedLiquidity{}
}

func (m *GenesisState) GetLoans() []types.Loan {
	if m != nil {
		return m.Loans
	}
	return nil
}

func (m *GenesisState) GetStreamingSwaps() []types.StreamingSwap {
	if m != nil {
		return m.StreamingSwaps
	}
	return nil
}

func (m *GenesisState) GetSwapQueueItems() []types.MsgSwap {
	if m != nil {
		return m.SwapQueueItems
	}
	return nil
}

func (m *GenesisState) GetSwapperClout() []types.SwapperClout {
	if m != nil {
		return m.SwapperClout
	}
	return nil
}

func (m *GenesisState) GetTradeAccounts() []types.TradeAccount {
	if m != nil {
		return m.TradeAccounts
	}
	return nil
}

func (m *GenesisState) GetTradeUnits() []types.TradeUnit {
	if m != nil {
		return m.TradeUnits
	}
	return nil
}

func (m *GenesisState) GetOutboundFeeWithheldSwitch() github_com_switchlyprotocol_switchlynode_v3_common.Coins {
	if m != nil {
		return m.OutboundFeeWithheldSwitch
	}
	return nil
}

func (m *GenesisState) GetOutboundFeeSpentSwitch() github_com_switchlyprotocol_switchlynode_v3_common.Coins {
	if m != nil {
		return m.OutboundFeeSpentSwitch
	}
	return nil
}

func (m *GenesisState) GetSwitchProviders() []types.SWITCHProvider {
	if m != nil {
		return m.SwitchProviders
	}
	return nil
}

func (m *GenesisState) GetSwitchPool() types.SwitchPool {
	if m != nil {
		return m.SwitchPool
	}
	return types.SwitchPool{}
}

func (m *GenesisState) GetNodeMimirs() []types.NodeMimir {
	if m != nil {
		return m.NodeMimirs
	}
	return nil
}

func (m *GenesisState) GetAffiliateCollectors() []types.AffiliateFeeCollector {
	if m != nil {
		return m.AffiliateCollectors
	}
	return nil
}

func (m *GenesisState) GetLoanTotalCollateral() github_com_switchlyprotocol_switchlynode_v3_common.Coins {
	if m != nil {
		return m.LoanTotalCollateral
	}
	return nil
}

func (m *GenesisState) GetSecuredAssets() []types.SecuredAsset {
	if m != nil {
		return m.SecuredAssets
	}
	return nil
}

func (m *GenesisState) GetTcyClaimers() []types.SWCYClaimer {
	if m != nil {
		return m.TcyClaimers
	}
	return nil
}

func (m *GenesisState) GetTcyStakers() []types.SWCYStaker {
	if m != nil {
		return m.TcyStakers
	}
	return nil
}

func init() {
	proto.RegisterType((*LastChainHeight)(nil), "switchly.lastChainHeight")
	proto.RegisterType((*Mimir)(nil), "switchly.mimir")
	proto.RegisterType((*GenesisState)(nil), "switchly.GenesisState")
}

func init() { proto.RegisterFile("switchly/genesis.proto", fileDescriptor_da38bc4971a05fb2) }

var fileDescriptor_da38bc4971a05fb2 = []byte{
	// 1439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4f, 0x73, 0x13, 0x47,
	0x16, 0xf7, 0x60, 0xd9, 0x16, 0x2d, 0xd9, 0x96, 0x5b, 0xb2, 0x68, 0xb3, 0x46, 0xf6, 0x1a, 0x76,
	0xf1, 0x2e, 0xbb, 0x56, 0x15, 0x54, 0x08, 0x49, 0xaa, 0x08, 0x96, 0x2a, 0x0e, 0x76, 0x30, 0x36,
	0x92, 0xc1, 0x21, 0x97, 0xa9, 0xf1, 0xa8, 0x91, 0xa7, 0x18, 0x4d, 0x0b, 0xbd, 0x1e, 0xd9, 0xba,
	0xe6, 0x96, 0x5c, 0x92, 0x53, 0xce, 0xa9, 0x1c, 0x72, 0xc8, 0x27, 0xe1, 0xc8, 0x31, 0xa7, 0x24,
	0x05, 0x5f, 0x24, 0xd5, 0xff, 0x46, 0x3d, 0x96, 0x48, 0x55, 0xe2, 0xa2, 0x72, 0x01, 0xcd, 0xef,
	0xfd, 0xfb, 0xbd, 0xee, 0xf7, 0x5e, 0x3f, 0xa3, 0x32, 0x9c, 0x04, 0xdc, 0x3f, 0x0e, 0x07, 0xd5,
	0x36, 0x8d, 0x28, 0x04, 0xb0, 0xd1, 0xed, 0x31, 0xce, 0x70, 0xd6, 0xe0, 0x97, 0x8b, 0x3e, 0xeb,
	0x74, 0x58, 0x54, 0x55, 0xff, 0x29, 0xf1, 0xe5, 0x45, 0x3e, 0xe8, 0x52, 0xa8, 0x8a, 0x7f, 0xdd,
	0x2e, 0x63, 0xa1, 0x86, 0x57, 0x2c, 0xd8, 0x3f, 0xf6, 0x82, 0xc8, 0xf5, 0x59, 0xc4, 0x7b, 0x9e,
	0xcf, 0xb5, 0xc2, 0xb2, 0xa5, 0x10, 0x51, 0x7e, 0xc2, 0x7a, 0xcf, 0xdd, 0x67, 0x94, 0x6a, 0x69,
	0x49, 0x49, 0x3b, 0xd0, 0x76, 0xe1, 0xc4, 0xeb, 0x6a, 0x74, 0xdd, 0xb2, 0xf1, 0x9e, 0x3d, 0x0b,
	0xc2, 0xc0, 0xe3, 0x54, 0x58, 0xb9, 0x3e, 0x0b, 0x43, 0xea, 0x73, 0xd6, 0x1b, 0x13, 0x1e, 0x78,
	0x8f, 0x7a, 0x9d, 0x20, 0x4a, 0xb9, 0x22, 0xa3, 0xe1, 0xd3, 0xa1, 0x75, 0x42, 0x26, 0x9f, 0x6b,
	0x16, 0xda, 0xa3, 0x40, 0x7b, 0x7d, 0xaa, 0x32, 0x0a, 0x8e, 0xe2, 0x61, 0xd8, 0xb2, 0xa5, 0xd5,
	0xf7, 0xe2, 0xd0, 0x24, 0x7b, 0xc9, 0xc2, 0xf9, 0xa9, 0xcb, 0x62, 0x3e, 0xc6, 0xa0, 0x13, 0x74,
	0x02, 0xe3, 0xe8, 0x8a, 0x4d, 0x8f, 0xb5, 0xa8, 0xeb, 0xf9, 0x3e, 0x8b, 0xa3, 0x71, 0x87, 0xc7,
	0x8e, 0x24, 0x9b, 0x96, 0xcb, 0x4f, 0xb5, 0xf4, 0xaa, 0x25, 0x0d, 0x83, 0x17, 0x71, 0xd0, 0x0a,
	0xf8, 0xc0, 0xed, 0xf6, 0x58, 0x3f, 0x68, 0xd1, 0x71, 0x11, 0xcc, 0x0d, 0x47, 0x5e, 0x87, 0x8e,
	0xb9, 0xd6, 0x90, 0x79, 0xd1, 0x18, 0xbe, 0x7e, 0x38, 0xcc, 0xa3, 0x62, 0x27, 0xd8, 0xf3, 0x46,
	0x08, 0xaf, 0x8d, 0x89, 0x76, 0x96, 0xd1, 0xf2, 0x88, 0x8e, 0x5d, 0x50, 0x76, 0x04, 0xa0, 0x7e,
	0xdc, 0xa3, 0x2d, 0xd7, 0x03, 0xa0, 0x7c, 0x6c, 0x3e, 0xfe, 0xc0, 0xf5, 0x43, 0x2f, 0xe8, 0xbc,
	0xc5, 0xb9, 0x3f, 0x70, 0x81, 0x7b, 0xcf, 0x13, 0x69, 0xa9, 0xcd, 0xda, 0x4c, 0xfe, 0xac, 0x8a,
	0x5f, 0x0a, 0x5d, 0xfb, 0x18, 0xcd, 0x87, 0x1e, 0xf0, 0xba, 0x28, 0xdf, 0xfb, 0x34, 0x68, 0x1f,
	0x73, 0x5c, 0x42, 0x53, 0xb2, 0x9a, 0x89, 0xb3, 0xea, 0xac, 0x5f, 0x6c, 0xa8, 0x0f, 0x5c, 0x46,
	0xd3, 0xc7, 0x52, 0x4e, 0x2e, 0xac, 0x3a, 0xeb, 0x93, 0x0d, 0xfd, 0xb5, 0x56, 0x45, 0x53, 0xf2,
	0x52, 0x71, 0x01, 0x4d, 0x3e, 0xa7, 0x03, 0x6d, 0x24, 0x7e, 0x0a, 0x47, 0x7d, 0x2f, 0x8c, 0xa9,
	0xb6, 0x50, 0x1f, 0x6b, 0xdf, 0x5d, 0x42, 0xf9, 0x4f, 0x55, 0xf7, 0x35, 0xb9, 0xc7, 0x29, 0xbe,
	0x8e, 0xa6, 0xc4, 0x19, 0x00, 0x71, 0x56, 0x27, 0xd7, 0x73, 0x37, 0x73, 0x1b, 0x32, 0x8d, 0x8d,
	0x7d, 0xc6, 0xc2, 0x5a, 0xe6, 0xe5, 0x2f, 0x2b, 0x13, 0x0d, 0x25, 0xc7, 0x3f, 0x38, 0xa8, 0x38,
	0x7a, 0xd7, 0x40, 0x2e, 0x48, 0x3b, 0xa2, 0xed, 0x1e, 0x18, 0x8d, 0x7d, 0xad, 0x50, 0x3b, 0x14,
	0x4e, 0x7e, 0xfa, 0x75, 0x65, 0xaf, 0x1d, 0xf0, 0xe3, 0xf8, 0x68, 0xc3, 0x67, 0x9d, 0xaa, 0xb9,
	0x20, 0x79, 0x0a, 0x3e, 0x0b, 0x13, 0x40, 0x54, 0x62, 0xb5, 0x7f, 0xab, 0x7a, 0x9a, 0x20, 0xd5,
	0xb7, 0xf8, 0x85, 0x06, 0x0e, 0x47, 0x30, 0xfc, 0xbd, 0x83, 0x16, 0xad, 0x72, 0x75, 0x83, 0xc8,
	0xed, 0x33, 0x2e, 0x68, 0x4e, 0x4a, 0x9a, 0x65, 0x4d, 0x73, 0x4f, 0xeb, 0x1c, 0x9c, 0x3e, 0x11,
	0xe2, 0xda, 0x63, 0x4d, 0x72, 0xf7, 0x5c, 0x24, 0xcf, 0x78, 0x85, 0x06, 0x66, 0x09, 0xb2, 0x1d,
	0x29, 0x4c, 0x9c, 0x63, 0xd9, 0xa6, 0xc8, 0x62, 0x6e, 0x38, 0x66, 0xfe, 0x0e, 0x8e, 0xc5, 0x21,
	0xc7, 0xbd, 0x98, 0x6b, 0x92, 0x37, 0xd0, 0x8c, 0xa2, 0x06, 0x64, 0x4a, 0x92, 0xca, 0x6b, 0x52,
	0x52, 0x49, 0x17, 0xc6, 0x34, 0x17, 0x1f, 0x80, 0xbf, 0x76, 0xd0, 0xac, 0x3d, 0x42, 0x80, 0x4c,
	0x4b, 0x1b, 0xac, 0x6d, 0x1e, 0xb2, 0x16, 0xdd, 0x54, 0xa2, 0xda, 0x23, 0x9d, 0xc4, 0xf6, 0xb9,
	0x92, 0xb0, 0x3c, 0x42, 0x23, 0x1f, 0x59, 0x5f, 0xf8, 0x05, 0x9a, 0x96, 0x73, 0x11, 0xc8, 0x4c,
	0x8a, 0xf8, 0x13, 0x01, 0xd6, 0x3e, 0xd3, 0xe1, 0xeb, 0xe7, 0x0a, 0x2f, 0x7d, 0x41, 0x43, 0x07,
	0xc2, 0x04, 0xcd, 0xe8, 0x81, 0x4d, 0xb2, 0xab, 0xce, 0x7a, 0xa6, 0x61, 0x3e, 0xf1, 0xff, 0x10,
	0x16, 0xfd, 0xed, 0x42, 0xd0, 0x8e, 0x68, 0xcb, 0xd5, 0x2d, 0x8c, 0x64, 0x43, 0x16, 0x84, 0xa4,
	0x29, 0x05, 0xba, 0xf5, 0x77, 0xb5, 0xb6, 0x7a, 0xcd, 0x94, 0x32, 0x90, 0x9c, 0x4c, 0x63, 0x69,
	0xc3, 0x70, 0xd8, 0x38, 0x33, 0x31, 0xf4, 0x65, 0x14, 0xce, 0xc0, 0x80, 0x7f, 0x74, 0x50, 0x69,
	0xcc, 0x43, 0x02, 0x24, 0xaf, 0x3d, 0xaa, 0x64, 0x1a, 0x4a, 0xa5, 0x3e, 0xd4, 0xa8, 0x7d, 0xae,
	0x4f, 0x69, 0xff, 0x5c, 0xa7, 0x34, 0xea, 0x18, 0x1a, 0xc5, 0xde, 0x28, 0x88, 0x37, 0xd0, 0x8c,
	0x7e, 0x20, 0xc9, 0xec, 0xaa, 0xb3, 0x9e, 0xbb, 0x39, 0x67, 0x0a, 0x47, 0xa1, 0x3a, 0x43, 0xa3,
	0x84, 0x3f, 0x41, 0x25, 0xaf, 0xd5, 0x97, 0x6f, 0xad, 0xfb, 0x22, 0xa6, 0x31, 0x75, 0x03, 0x4e,
	0x3b, 0x40, 0x8a, 0x32, 0x2f, 0x63, 0xbc, 0x0b, 0xed, 0xe6, 0x89, 0xd7, 0xd5, 0xc6, 0x0b, 0x5e,
	0xab, 0x2f, 0x3e, 0x1f, 0x09, 0xfd, 0x6d, 0xa1, 0x8e, 0x3f, 0x44, 0x79, 0x6b, 0x2d, 0x00, 0x52,
	0x92, 0xe6, 0x0b, 0xe9, 0xd8, 0x5b, 0x94, 0x6a, 0x0f, 0xb9, 0x28, 0x41, 0x00, 0xd7, 0xd1, 0x7c,
	0x7a, 0xe7, 0x00, 0x52, 0x96, 0xe6, 0x25, 0x6d, 0x2e, 0x6f, 0xa2, 0xae, 0x85, 0xda, 0xc3, 0x9c,
	0x6f, 0x83, 0x80, 0x3f, 0x40, 0xb9, 0xe6, 0xe1, 0xf6, 0x41, 0xfd, 0xfe, 0x43, 0xaf, 0x43, 0x81,
	0x5c, 0x4a, 0xc5, 0x1f, 0x4a, 0x4c, 0x7c, 0x4b, 0x17, 0xff, 0x1f, 0x4d, 0xcb, 0xb9, 0x0f, 0x84,
	0x48, 0xab, 0xf9, 0x61, 0x79, 0x48, 0xdc, 0x74, 0xa8, 0x52, 0xc2, 0xd7, 0xd1, 0x2c, 0x70, 0xd6,
	0xa3, 0x6e, 0x9f, 0xf6, 0x20, 0x60, 0x11, 0x59, 0x12, 0x25, 0x58, 0xbb, 0x40, 0x9c, 0x46, 0x5e,
	0x0a, 0x9e, 0x28, 0x1c, 0x6f, 0xa2, 0xb9, 0x23, 0x16, 0xb5, 0xac, 0xf1, 0x7e, 0x39, 0x95, 0x56,
	0x8d, 0x45, 0xad, 0x64, 0xda, 0xea, 0x20, 0xb3, 0x47, 0x36, 0x88, 0xdf, 0x43, 0x93, 0xfb, 0x7b,
	0x0f, 0xc8, 0x3f, 0xe4, 0x4d, 0x5e, 0x31, 0xcf, 0x89, 0xae, 0x9a, 0xbd, 0x93, 0x88, 0xb6, 0x92,
	0x59, 0xae, 0x1d, 0x08, 0x7d, 0xf1, 0x0e, 0x89, 0x2d, 0x00, 0xc8, 0x72, 0xea, 0x1d, 0x7a, 0xc0,
	0xbc, 0xc8, 0xbc, 0x43, 0x52, 0x2e, 0x8e, 0x3e, 0xbd, 0x6f, 0x01, 0xb9, 0x92, 0xe2, 0xd8, 0x34,
	0x52, 0xeb, 0xfa, 0xe7, 0xc0, 0x06, 0x01, 0xdf, 0x45, 0x85, 0x91, 0xf2, 0xa9, 0xfc, 0x41, 0xf9,
	0xcc, 0x41, 0xba, 0x76, 0xee, 0xa2, 0x59, 0x81, 0x74, 0x69, 0x4f, 0x2d, 0x29, 0x64, 0x45, 0x1a,
	0x17, 0x0d, 0x05, 0x25, 0xab, 0x0b, 0x91, 0xf6, 0x90, 0x07, 0x0b, 0xc3, 0xf7, 0xd0, 0x5c, 0x6a,
	0x89, 0x01, 0xb2, 0x9a, 0x72, 0x70, 0x20, 0x84, 0x66, 0x66, 0xea, 0x63, 0xe6, 0x16, 0x06, 0xf8,
	0x7d, 0x94, 0x53, 0x1e, 0xe2, 0x28, 0xe0, 0x40, 0xfe, 0x29, 0xcd, 0x0b, 0xb6, 0xf9, 0xe3, 0x28,
	0x30, 0xb6, 0x88, 0x1b, 0x00, 0xf0, 0x37, 0x0e, 0x5a, 0x66, 0x31, 0x3f, 0x62, 0x71, 0xd4, 0x92,
	0x9b, 0xed, 0x49, 0xc0, 0x8f, 0x8f, 0x69, 0xd8, 0xd2, 0x2b, 0x11, 0x59, 0xd3, 0x73, 0x53, 0x2f,
	0xe1, 0x75, 0x16, 0x44, 0xb5, 0x7b, 0x7a, 0x22, 0xdc, 0xf9, 0x33, 0x13, 0xc1, 0x72, 0x00, 0x8d,
	0x25, 0x13, 0x73, 0x8b, 0xd2, 0x43, 0x1d, 0xb1, 0x29, 0x0d, 0xf0, 0x57, 0x0e, 0x5a, 0x4a, 0x31,
	0x82, 0x2e, 0x8d, 0xb8, 0xa1, 0x73, 0xf5, 0x9d, 0xd0, 0x29, 0x5b, 0x74, 0x9a, 0x22, 0x9c, 0xe6,
	0xb2, 0x25, 0x0a, 0x43, 0x6d, 0x86, 0x49, 0x0b, 0x5c, 0x93, 0x0c, 0x16, 0x53, 0x8d, 0x99, 0xac,
	0x37, 0xea, 0x80, 0xe7, 0x95, 0xd1, 0xb0, 0x0b, 0xee, 0xa0, 0x9c, 0xb5, 0x61, 0x92, 0x7f, 0xc9,
	0x6e, 0x48, 0x7a, 0x5b, 0x29, 0x0f, 0x57, 0x2c, 0x04, 0x09, 0x82, 0x6f, 0x23, 0x24, 0x18, 0xef,
	0xaa, 0xf6, 0xfe, 0x77, 0xea, 0x5e, 0x1f, 0x1a, 0x81, 0xb1, 0x1b, 0x6a, 0xe2, 0xc7, 0xa8, 0x34,
	0xfc, 0x8b, 0x25, 0xf9, 0x6b, 0x05, 0xc8, 0x75, 0xe9, 0x61, 0x59, 0x7b, 0xd8, 0x34, 0x2a, 0x5b,
	0x94, 0xd6, 0x8d, 0x92, 0xf6, 0x56, 0x4c, 0xec, 0x13, 0x09, 0xe0, 0x2f, 0x1d, 0xb4, 0x28, 0x1a,
	0xcf, 0xe5, 0x8c, 0x7b, 0xa1, 0x74, 0xec, 0x71, 0xda, 0xf3, 0x42, 0xb2, 0xfe, 0x4e, 0x2e, 0xa6,
	0x28, 0x82, 0x1d, 0x88, 0x58, 0xf5, 0x24, 0x94, 0x68, 0x97, 0xd4, 0x46, 0x0e, 0xe4, 0x3f, 0xe9,
	0x7e, 0x53, 0xc2, 0x4d, 0x21, 0x33, 0xed, 0x02, 0x16, 0x06, 0xf8, 0x23, 0x94, 0xe7, 0xc3, 0x95,
	0x1d, 0xc8, 0x7f, 0x53, 0x1b, 0x4a, 0xf3, 0xb0, 0xfe, 0xb4, 0xae, 0x44, 0x66, 0xda, 0x72, 0x7f,
	0xa0, 0x11, 0x79, 0x99, 0x3c, 0x59, 0xe8, 0x81, 0xdc, 0x38, 0x33, 0xa8, 0xeb, 0x4f, 0x9b, 0x52,
	0x92, 0x34, 0x9b, 0x3f, 0x50, 0x00, 0xec, 0x64, 0xb2, 0x17, 0x0b, 0x68, 0x27, 0x93, 0x9d, 0x2b,
	0xcc, 0xef, 0x64, 0xb2, 0xf3, 0x85, 0xc2, 0x4e, 0x26, 0x5b, 0x28, 0x2c, 0xec, 0x64, 0xb2, 0x0b,
	0x05, 0xbc, 0x93, 0xc9, 0xe2, 0x42, 0x71, 0x27, 0x93, 0x5d, 0x2c, 0x94, 0x6b, 0xfb, 0x2f, 0x5f,
	0x57, 0x9c, 0x57, 0xaf, 0x2b, 0xce, 0x6f, 0xaf, 0x2b, 0xce, 0xb7, 0x6f, 0x2a, 0x13, 0xaf, 0xde,
	0x54, 0x26, 0x7e, 0x7e, 0x53, 0x99, 0xf8, 0xe2, 0xf6, 0x5f, 0x7b, 0x85, 0x8f, 0xa6, 0xa5, 0xd2,
	0xad, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x12, 0x46, 0x02, 0x77, 0x0f, 0x00, 0x00,
}

func (m *LastChainHeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastChainHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastChainHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Mimir) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mimir) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mimir) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TcyStakers) > 0 {
		for iNdEx := len(m.TcyStakers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TcyStakers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.TcyClaimers) > 0 {
		for iNdEx := len(m.TcyClaimers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TcyClaimers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.SecuredAssets) > 0 {
		for iNdEx := len(m.SecuredAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SecuredAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.LoanTotalCollateral) > 0 {
		for iNdEx := len(m.LoanTotalCollateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LoanTotalCollateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.AffiliateCollectors) > 0 {
		for iNdEx := len(m.AffiliateCollectors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AffiliateCollectors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.NodeMimirs) > 0 {
		for iNdEx := len(m.NodeMimirs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeMimirs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xb2
		}
	}
	{
		size, err := m.SwitchPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xaa
	if len(m.SwitchProviders) > 0 {
		for iNdEx := len(m.SwitchProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwitchProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.OutboundFeeSpentSwitch) > 0 {
		for iNdEx := len(m.OutboundFeeSpentSwitch) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutboundFeeSpentSwitch[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.OutboundFeeWithheldSwitch) > 0 {
		for iNdEx := len(m.OutboundFeeWithheldSwitch) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutboundFeeWithheldSwitch[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.TradeUnits) > 0 {
		for iNdEx := len(m.TradeUnits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TradeUnits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.TradeAccounts) > 0 {
		for iNdEx := len(m.TradeAccounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TradeAccounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.SwapperClout) > 0 {
		for iNdEx := len(m.SwapperClout) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwapperClout[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.SwapQueueItems) > 0 {
		for iNdEx := len(m.SwapQueueItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwapQueueItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.StreamingSwaps) > 0 {
		for iNdEx := len(m.StreamingSwaps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StreamingSwaps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.Loans) > 0 {
		for iNdEx := len(m.Loans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Loans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe2
		}
	}
	{
		size, err := m.POL.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xda
	if len(m.BondProviders) > 0 {
		for iNdEx := len(m.BondProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BondProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if m.StoreVersion != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.StoreVersion))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.Mimirs) > 0 {
		for iNdEx := len(m.Mimirs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mimirs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.SWITCHNames) > 0 {
		for iNdEx := len(m.SWITCHNames) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SWITCHNames[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.ChainContracts) > 0 {
		for iNdEx := len(m.ChainContracts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainContracts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.NetworkFees) > 0 {
		for iNdEx := len(m.NetworkFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetworkFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.AdvSwapQueueItems) > 0 {
		for iNdEx := len(m.AdvSwapQueueItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdvSwapQueueItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	{
		size, err := m.Network.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if len(m.ReserveContributors) > 0 {
		for iNdEx := len(m.ReserveContributors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReserveContributors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.LastChainHeights) > 0 {
		for iNdEx := len(m.LastChainHeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastChainHeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.LastSignedHeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastSignedHeight))
		i--
		dAtA[i] = 0x50
	}
	if m.Reserve != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Reserve))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Vaults) > 0 {
		for iNdEx := len(m.Vaults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vaults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.NodeAccounts) > 0 {
		for iNdEx := len(m.NodeAccounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeAccounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TxOuts) > 0 {
		for iNdEx := len(m.TxOuts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxOuts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ObservedTxOutVoters) > 0 {
		for iNdEx := len(m.ObservedTxOutVoters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ObservedTxOutVoters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ObservedTxInVoters) > 0 {
		for iNdEx := len(m.ObservedTxInVoters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ObservedTxInVoters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LiquidityProviders) > 0 {
		for iNdEx := len(m.LiquidityProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidityProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LastChainHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovGenesis(uint64(m.Height))
	}
	return n
}

func (m *Mimir) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovGenesis(uint64(m.Value))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.LiquidityProviders) > 0 {
		for _, e := range m.LiquidityProviders {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ObservedTxInVoters) > 0 {
		for _, e := range m.ObservedTxInVoters {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ObservedTxOutVoters) > 0 {
		for _, e := range m.ObservedTxOutVoters {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.TxOuts) > 0 {
		for _, e := range m.TxOuts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.NodeAccounts) > 0 {
		for _, e := range m.NodeAccounts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Vaults) > 0 {
		for _, e := range m.Vaults {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.Reserve != 0 {
		n += 1 + sovGenesis(uint64(m.Reserve))
	}
	if m.LastSignedHeight != 0 {
		n += 1 + sovGenesis(uint64(m.LastSignedHeight))
	}
	if len(m.LastChainHeights) > 0 {
		for _, e := range m.LastChainHeights {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ReserveContributors) > 0 {
		for _, e := range m.ReserveContributors {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.Network.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.AdvSwapQueueItems) > 0 {
		for _, e := range m.AdvSwapQueueItems {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.NetworkFees) > 0 {
		for _, e := range m.NetworkFees {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ChainContracts) > 0 {
		for _, e := range m.ChainContracts {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.SWITCHNames) > 0 {
		for _, e := range m.SWITCHNames {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Mimirs) > 0 {
		for _, e := range m.Mimirs {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.StoreVersion != 0 {
		n += 2 + sovGenesis(uint64(m.StoreVersion))
	}
	if len(m.BondProviders) > 0 {
		for _, e := range m.BondProviders {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	l = m.POL.Size()
	n += 2 + l + sovGenesis(uint64(l))
	if len(m.Loans) > 0 {
		for _, e := range m.Loans {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.StreamingSwaps) > 0 {
		for _, e := range m.StreamingSwaps {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.SwapQueueItems) > 0 {
		for _, e := range m.SwapQueueItems {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.SwapperClout) > 0 {
		for _, e := range m.SwapperClout {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.TradeAccounts) > 0 {
		for _, e := range m.TradeAccounts {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.TradeUnits) > 0 {
		for _, e := range m.TradeUnits {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.OutboundFeeWithheldSwitch) > 0 {
		for _, e := range m.OutboundFeeWithheldSwitch {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.OutboundFeeSpentSwitch) > 0 {
		for _, e := range m.OutboundFeeSpentSwitch {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.SwitchProviders) > 0 {
		for _, e := range m.SwitchProviders {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	l = m.SwitchPool.Size()
	n += 2 + l + sovGenesis(uint64(l))
	if len(m.NodeMimirs) > 0 {
		for _, e := range m.NodeMimirs {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.AffiliateCollectors) > 0 {
		for _, e := range m.AffiliateCollectors {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.LoanTotalCollateral) > 0 {
		for _, e := range m.LoanTotalCollateral {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.SecuredAssets) > 0 {
		for _, e := range m.SecuredAssets {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.TcyClaimers) > 0 {
		for _, e := range m.TcyClaimers {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.TcyStakers) > 0 {
		for _, e := range m.TcyStakers {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LastChainHeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: lastChainHeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: lastChainHeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mimir) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: mimir: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: mimir: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, types.Pool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityProviders = append(m.LiquidityProviders, types.LiquidityProvider{})
			if err := m.LiquidityProviders[len(m.LiquidityProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedTxInVoters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservedTxInVoters = append(m.ObservedTxInVoters, types.ObservedTxVoter{})
			if err := m.ObservedTxInVoters[len(m.ObservedTxInVoters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedTxOutVoters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservedTxOutVoters = append(m.ObservedTxOutVoters, types.ObservedTxVoter{})
			if err := m.ObservedTxOutVoters[len(m.ObservedTxOutVoters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOuts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxOuts = append(m.TxOuts, types.TxOut{})
			if err := m.TxOuts[len(m.TxOuts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAccounts = append(m.NodeAccounts, types.NodeAccount{})
			if err := m.NodeAccounts[len(m.NodeAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vaults = append(m.Vaults, types.Vault{})
			if err := m.Vaults[len(m.Vaults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			m.Reserve = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reserve |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSignedHeight", wireType)
			}
			m.LastSignedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSignedHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastChainHeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastChainHeights = append(m.LastChainHeights, LastChainHeight{})
			if err := m.LastChainHeights[len(m.LastChainHeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveContributors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveContributors = append(m.ReserveContributors, types.ReserveContributor{})
			if err := m.ReserveContributors[len(m.ReserveContributors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Network.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvSwapQueueItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvSwapQueueItems = append(m.AdvSwapQueueItems, types.MsgSwap{})
			if err := m.AdvSwapQueueItems[len(m.AdvSwapQueueItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkFees = append(m.NetworkFees, types.NetworkFee{})
			if err := m.NetworkFees[len(m.NetworkFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainContracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainContracts = append(m.ChainContracts, types.ChainContract{})
			if err := m.ChainContracts[len(m.ChainContracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SWITCHNames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SWITCHNames = append(m.SWITCHNames, types.SWITCHName{})
			if err := m.SWITCHNames[len(m.SWITCHNames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimirs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimirs = append(m.Mimirs, Mimir{})
			if err := m.Mimirs[len(m.Mimirs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreVersion", wireType)
			}
			m.StoreVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondProviders = append(m.BondProviders, types.BondProviders{})
			if err := m.BondProviders[len(m.BondProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field POL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.POL.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loans = append(m.Loans, types.Loan{})
			if err := m.Loans[len(m.Loans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamingSwaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamingSwaps = append(m.StreamingSwaps, types.StreamingSwap{})
			if err := m.StreamingSwaps[len(m.StreamingSwaps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapQueueItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapQueueItems = append(m.SwapQueueItems, types.MsgSwap{})
			if err := m.SwapQueueItems[len(m.SwapQueueItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapperClout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapperClout = append(m.SwapperClout, types.SwapperClout{})
			if err := m.SwapperClout[len(m.SwapperClout)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeAccounts = append(m.TradeAccounts, types.TradeAccount{})
			if err := m.TradeAccounts[len(m.TradeAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeUnits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeUnits = append(m.TradeUnits, types.TradeUnit{})
			if err := m.TradeUnits[len(m.TradeUnits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundFeeWithheldSwitch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundFeeWithheldSwitch = append(m.OutboundFeeWithheldSwitch, common.Coin{})
			if err := m.OutboundFeeWithheldSwitch[len(m.OutboundFeeWithheldSwitch)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundFeeSpentSwitch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundFeeSpentSwitch = append(m.OutboundFeeSpentSwitch, common.Coin{})
			if err := m.OutboundFeeSpentSwitch[len(m.OutboundFeeSpentSwitch)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwitchProviders = append(m.SwitchProviders, types.SWITCHProvider{})
			if err := m.SwitchProviders[len(m.SwitchProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwitchPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeMimirs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeMimirs = append(m.NodeMimirs, types.NodeMimir{})
			if err := m.NodeMimirs[len(m.NodeMimirs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliateCollectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AffiliateCollectors = append(m.AffiliateCollectors, types.AffiliateFeeCollector{})
			if err := m.AffiliateCollectors[len(m.AffiliateCollectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanTotalCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanTotalCollateral = append(m.LoanTotalCollateral, common.Coin{})
			if err := m.LoanTotalCollateral[len(m.LoanTotalCollateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecuredAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecuredAssets = append(m.SecuredAssets, types.SecuredAsset{})
			if err := m.SecuredAssets[len(m.SecuredAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcyClaimers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TcyClaimers = append(m.TcyClaimers, types.SWCYClaimer{})
			if err := m.TcyClaimers[len(m.TcyClaimers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcyStakers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TcyStakers = append(m.TcyStakers, types.SWCYStaker{})
			if err := m.TcyStakers[len(m.TcyStakers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
