// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/common.proto

package common

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_incomplete Status = 0
	Status_done       Status = 1
	Status_reverted   Status = 2
)

var Status_name = map[int32]string{
	0: "incomplete",
	1: "done",
	2: "reverted",
}

var Status_value = map[string]int32{
	"incomplete": 0,
	"done":       1,
	"reverted":   2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{0}
}

type Asset struct {
	Chain   Chain  `protobuf:"bytes,1,opt,name=chain,proto3,casttype=Chain" json:"chain,omitempty"`
	Symbol  Symbol `protobuf:"bytes,2,opt,name=symbol,proto3,casttype=Symbol" json:"symbol,omitempty"`
	Ticker  Ticker `protobuf:"bytes,3,opt,name=ticker,proto3,casttype=Ticker" json:"ticker,omitempty"`
	Synth   bool   `protobuf:"varint,4,opt,name=synth,proto3" json:"synth,omitempty"`
	Trade   bool   `protobuf:"varint,5,opt,name=trade,proto3" json:"trade,omitempty"`
	Secured bool   `protobuf:"varint,6,opt,name=secured,proto3" json:"secured,omitempty"`
}

func (m *Asset) Reset()      { *m = Asset{} }
func (*Asset) ProtoMessage() {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{0}
}
func (m *Asset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(m, src)
}
func (m *Asset) XXX_Size() int {
	return m.Size()
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

type Coin struct {
	Asset    Asset                  `protobuf:"bytes,1,opt,name=asset,proto3,customtype=Asset" json:"asset"`
	Amount   cosmossdk_io_math.Uint `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Uint" json:"amount"`
	Decimals int64                  `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty"`
}

func (m *Coin) Reset()      { *m = Coin{} }
func (*Coin) ProtoMessage() {}
func (*Coin) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{1}
}
func (m *Coin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Coin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Coin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Coin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coin.Merge(m, src)
}
func (m *Coin) XXX_Size() int {
	return m.Size()
}
func (m *Coin) XXX_DiscardUnknown() {
	xxx_messageInfo_Coin.DiscardUnknown(m)
}

var xxx_messageInfo_Coin proto.InternalMessageInfo

// PubKeySet contains two pub keys , secp256k1 and ed25519
type PubKeySet struct {
	Secp256k1 PubKey `protobuf:"bytes,1,opt,name=secp256k1,proto3,casttype=PubKey" json:"secp256k1,omitempty"`
	Ed25519   PubKey `protobuf:"bytes,2,opt,name=ed25519,proto3,casttype=PubKey" json:"ed25519,omitempty"`
}

func (m *PubKeySet) Reset()      { *m = PubKeySet{} }
func (*PubKeySet) ProtoMessage() {}
func (*PubKeySet) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{2}
}
func (m *PubKeySet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubKeySet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubKeySet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubKeySet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKeySet.Merge(m, src)
}
func (m *PubKeySet) XXX_Size() int {
	return m.Size()
}
func (m *PubKeySet) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKeySet.DiscardUnknown(m)
}

var xxx_messageInfo_PubKeySet proto.InternalMessageInfo

type Tx struct {
	ID          TxID    `protobuf:"bytes,1,opt,name=id,proto3,casttype=TxID" json:"id,omitempty"`
	Chain       Chain   `protobuf:"bytes,2,opt,name=chain,proto3,casttype=Chain" json:"chain,omitempty"`
	FromAddress Address `protobuf:"bytes,3,opt,name=from_address,json=fromAddress,proto3,casttype=Address" json:"from_address,omitempty"`
	ToAddress   Address `protobuf:"bytes,4,opt,name=to_address,json=toAddress,proto3,casttype=Address" json:"to_address,omitempty"`
	Coins       Coins   `protobuf:"bytes,5,rep,name=coins,proto3,castrepeated=Coins" json:"coins"`
	Gas         Gas     `protobuf:"bytes,6,rep,name=gas,proto3,castrepeated=Gas" json:"gas"`
	Memo        string  `protobuf:"bytes,7,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (m *Tx) Reset()      { *m = Tx{} }
func (*Tx) ProtoMessage() {}
func (*Tx) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{3}
}
func (m *Tx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tx.Merge(m, src)
}
func (m *Tx) XXX_Size() int {
	return m.Size()
}
func (m *Tx) XXX_DiscardUnknown() {
	xxx_messageInfo_Tx.DiscardUnknown(m)
}

var xxx_messageInfo_Tx proto.InternalMessageInfo

type Fee struct {
	Coins      Coins                  `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=Coins" json:"coins"`
	PoolDeduct cosmossdk_io_math.Uint `protobuf:"bytes,2,opt,name=pool_deduct,json=poolDeduct,proto3,customtype=cosmossdk.io/math.Uint" json:"pool_deduct"`
}

func (m *Fee) Reset()      { *m = Fee{} }
func (*Fee) ProtoMessage() {}
func (*Fee) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{4}
}
func (m *Fee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fee.Merge(m, src)
}
func (m *Fee) XXX_Size() int {
	return m.Size()
}
func (m *Fee) XXX_DiscardUnknown() {
	xxx_messageInfo_Fee.DiscardUnknown(m)
}

var xxx_messageInfo_Fee proto.InternalMessageInfo

type ProtoUint struct {
	Value cosmossdk_io_math.Uint `protobuf:"bytes,1,opt,name=value,proto3,customtype=cosmossdk.io/math.Uint" json:"value"`
}

func (m *ProtoUint) Reset()      { *m = ProtoUint{} }
func (*ProtoUint) ProtoMessage() {}
func (*ProtoUint) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{5}
}
func (m *ProtoUint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoUint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtoUint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtoUint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoUint.Merge(m, src)
}
func (m *ProtoUint) XXX_Size() int {
	return m.Size()
}
func (m *ProtoUint) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoUint.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoUint proto.InternalMessageInfo

type ObservedTx struct {
	Tx                    Tx                      `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx"`
	Status                Status                  `protobuf:"varint,2,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
	OutHashes             []string                `protobuf:"bytes,3,rep,name=out_hashes,json=outHashes,proto3" json:"out_hashes,omitempty"`
	BlockHeight           int64                   `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Signers               []string                `protobuf:"bytes,5,rep,name=signers,proto3" json:"signers,omitempty"`
	ObservedPubKey        PubKey                  `protobuf:"bytes,6,opt,name=observed_pub_key,json=observedPubKey,proto3,casttype=PubKey" json:"observed_pub_key,omitempty"`
	KeysignMs             int64                   `protobuf:"varint,7,opt,name=keysign_ms,json=keysignMs,proto3" json:"keysign_ms,omitempty"`
	FinaliseHeight        int64                   `protobuf:"varint,8,opt,name=finalise_height,json=finaliseHeight,proto3" json:"finalise_height,omitempty"`
	Aggregator            string                  `protobuf:"bytes,9,opt,name=aggregator,proto3" json:"aggregator,omitempty"`
	AggregatorTarget      string                  `protobuf:"bytes,10,opt,name=aggregator_target,json=aggregatorTarget,proto3" json:"aggregator_target,omitempty"`
	AggregatorTargetLimit *cosmossdk_io_math.Uint `protobuf:"bytes,11,opt,name=aggregator_target_limit,json=aggregatorTargetLimit,proto3,customtype=cosmossdk.io/math.Uint" json:"aggregator_target_limit,omitempty"`
}

func (m *ObservedTx) Reset()      { *m = ObservedTx{} }
func (*ObservedTx) ProtoMessage() {}
func (*ObservedTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{6}
}
func (m *ObservedTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObservedTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObservedTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObservedTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObservedTx.Merge(m, src)
}
func (m *ObservedTx) XXX_Size() int {
	return m.Size()
}
func (m *ObservedTx) XXX_DiscardUnknown() {
	xxx_messageInfo_ObservedTx.DiscardUnknown(m)
}

var xxx_messageInfo_ObservedTx proto.InternalMessageInfo

type Attestation struct {
	PubKey    []byte `protobuf:"bytes,1,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *Attestation) Reset()      { *m = Attestation{} }
func (*Attestation) ProtoMessage() {}
func (*Attestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{7}
}
func (m *Attestation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attestation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attestation.Merge(m, src)
}
func (m *Attestation) XXX_Size() int {
	return m.Size()
}
func (m *Attestation) XXX_DiscardUnknown() {
	xxx_messageInfo_Attestation.DiscardUnknown(m)
}

var xxx_messageInfo_Attestation proto.InternalMessageInfo

type AttestTx struct {
	ObsTx                  ObservedTx   `protobuf:"bytes,1,opt,name=obsTx,proto3" json:"obsTx"`
	Attestation            *Attestation `protobuf:"bytes,2,opt,name=attestation,proto3" json:"attestation,omitempty"`
	Inbound                bool         `protobuf:"varint,3,opt,name=inbound,proto3" json:"inbound,omitempty"`
	AllowFutureObservation bool         `protobuf:"varint,4,opt,name=allow_future_observation,json=allowFutureObservation,proto3" json:"allow_future_observation,omitempty"`
}

func (m *AttestTx) Reset()      { *m = AttestTx{} }
func (*AttestTx) ProtoMessage() {}
func (*AttestTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{8}
}
func (m *AttestTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestTx.Merge(m, src)
}
func (m *AttestTx) XXX_Size() int {
	return m.Size()
}
func (m *AttestTx) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestTx.DiscardUnknown(m)
}

var xxx_messageInfo_AttestTx proto.InternalMessageInfo

type QuorumTx struct {
	ObsTx                  ObservedTx     `protobuf:"bytes,1,opt,name=obsTx,proto3" json:"obsTx"`
	Attestations           []*Attestation `protobuf:"bytes,2,rep,name=attestations,proto3" json:"attestations,omitempty"`
	Inbound                bool           `protobuf:"varint,3,opt,name=inbound,proto3" json:"inbound,omitempty"`
	AllowFutureObservation bool           `protobuf:"varint,4,opt,name=allow_future_observation,json=allowFutureObservation,proto3" json:"allow_future_observation,omitempty"`
}

func (m *QuorumTx) Reset()      { *m = QuorumTx{} }
func (*QuorumTx) ProtoMessage() {}
func (*QuorumTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{9}
}
func (m *QuorumTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuorumTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuorumTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuorumTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuorumTx.Merge(m, src)
}
func (m *QuorumTx) XXX_Size() int {
	return m.Size()
}
func (m *QuorumTx) XXX_DiscardUnknown() {
	xxx_messageInfo_QuorumTx.DiscardUnknown(m)
}

var xxx_messageInfo_QuorumTx proto.InternalMessageInfo

type QuorumState struct {
	QuoTxs         []*QuorumTx         `protobuf:"bytes,1,rep,name=quoTxs,proto3" json:"quoTxs,omitempty"`
	QuoNetworkFees []*QuorumNetworkFee `protobuf:"bytes,2,rep,name=quoNetworkFees,proto3" json:"quoNetworkFees,omitempty"`
	QuoSolvencies  []*QuorumSolvency   `protobuf:"bytes,3,rep,name=quoSolvencies,proto3" json:"quoSolvencies,omitempty"`
	QuoErrataTxs   []*QuorumErrataTx   `protobuf:"bytes,4,rep,name=quoErrataTxs,proto3" json:"quoErrataTxs,omitempty"`
}

func (m *QuorumState) Reset()      { *m = QuorumState{} }
func (*QuorumState) ProtoMessage() {}
func (*QuorumState) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{10}
}
func (m *QuorumState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuorumState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuorumState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuorumState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuorumState.Merge(m, src)
}
func (m *QuorumState) XXX_Size() int {
	return m.Size()
}
func (m *QuorumState) XXX_DiscardUnknown() {
	xxx_messageInfo_QuorumState.DiscardUnknown(m)
}

var xxx_messageInfo_QuorumState proto.InternalMessageInfo

type NetworkFee struct {
	Height          int64  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Chain           Chain  `protobuf:"bytes,2,opt,name=chain,proto3,casttype=Chain" json:"chain,omitempty"`
	TransactionSize uint64 `protobuf:"varint,3,opt,name=transaction_size,json=transactionSize,proto3" json:"transaction_size,omitempty"`
	TransactionRate uint64 `protobuf:"varint,4,opt,name=transaction_rate,json=transactionRate,proto3" json:"transaction_rate,omitempty"`
}

func (m *NetworkFee) Reset()      { *m = NetworkFee{} }
func (*NetworkFee) ProtoMessage() {}
func (*NetworkFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{11}
}
func (m *NetworkFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkFee.Merge(m, src)
}
func (m *NetworkFee) XXX_Size() int {
	return m.Size()
}
func (m *NetworkFee) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkFee.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkFee proto.InternalMessageInfo

type AttestNetworkFee struct {
	NetworkFee  *NetworkFee  `protobuf:"bytes,1,opt,name=network_fee,json=networkFee,proto3" json:"network_fee,omitempty"`
	Attestation *Attestation `protobuf:"bytes,2,opt,name=attestation,proto3" json:"attestation,omitempty"`
}

func (m *AttestNetworkFee) Reset()      { *m = AttestNetworkFee{} }
func (*AttestNetworkFee) ProtoMessage() {}
func (*AttestNetworkFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{12}
}
func (m *AttestNetworkFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestNetworkFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestNetworkFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestNetworkFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestNetworkFee.Merge(m, src)
}
func (m *AttestNetworkFee) XXX_Size() int {
	return m.Size()
}
func (m *AttestNetworkFee) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestNetworkFee.DiscardUnknown(m)
}

var xxx_messageInfo_AttestNetworkFee proto.InternalMessageInfo

type QuorumNetworkFee struct {
	NetworkFee   *NetworkFee    `protobuf:"bytes,1,opt,name=network_fee,json=networkFee,proto3" json:"network_fee,omitempty"`
	Attestations []*Attestation `protobuf:"bytes,2,rep,name=attestations,proto3" json:"attestations,omitempty"`
}

func (m *QuorumNetworkFee) Reset()      { *m = QuorumNetworkFee{} }
func (*QuorumNetworkFee) ProtoMessage() {}
func (*QuorumNetworkFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{13}
}
func (m *QuorumNetworkFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuorumNetworkFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuorumNetworkFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuorumNetworkFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuorumNetworkFee.Merge(m, src)
}
func (m *QuorumNetworkFee) XXX_Size() int {
	return m.Size()
}
func (m *QuorumNetworkFee) XXX_DiscardUnknown() {
	xxx_messageInfo_QuorumNetworkFee.DiscardUnknown(m)
}

var xxx_messageInfo_QuorumNetworkFee proto.InternalMessageInfo

type Solvency struct {
	Id     TxID   `protobuf:"bytes,1,opt,name=id,proto3,casttype=TxID" json:"id,omitempty"`
	Chain  Chain  `protobuf:"bytes,2,opt,name=chain,proto3,casttype=Chain" json:"chain,omitempty"`
	PubKey PubKey `protobuf:"bytes,3,opt,name=pub_key,json=pubKey,proto3,casttype=PubKey" json:"pub_key,omitempty"`
	Coins  Coins  `protobuf:"bytes,4,rep,name=coins,proto3,castrepeated=Coins" json:"coins"`
	Height int64  `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *Solvency) Reset()      { *m = Solvency{} }
func (*Solvency) ProtoMessage() {}
func (*Solvency) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{14}
}
func (m *Solvency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Solvency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Solvency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Solvency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Solvency.Merge(m, src)
}
func (m *Solvency) XXX_Size() int {
	return m.Size()
}
func (m *Solvency) XXX_DiscardUnknown() {
	xxx_messageInfo_Solvency.DiscardUnknown(m)
}

var xxx_messageInfo_Solvency proto.InternalMessageInfo

type AttestSolvency struct {
	Solvency    *Solvency    `protobuf:"bytes,1,opt,name=solvency,proto3" json:"solvency,omitempty"`
	Attestation *Attestation `protobuf:"bytes,2,opt,name=attestation,proto3" json:"attestation,omitempty"`
}

func (m *AttestSolvency) Reset()      { *m = AttestSolvency{} }
func (*AttestSolvency) ProtoMessage() {}
func (*AttestSolvency) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{15}
}
func (m *AttestSolvency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestSolvency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestSolvency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestSolvency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestSolvency.Merge(m, src)
}
func (m *AttestSolvency) XXX_Size() int {
	return m.Size()
}
func (m *AttestSolvency) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestSolvency.DiscardUnknown(m)
}

var xxx_messageInfo_AttestSolvency proto.InternalMessageInfo

type QuorumSolvency struct {
	Solvency     *Solvency      `protobuf:"bytes,1,opt,name=solvency,proto3" json:"solvency,omitempty"`
	Attestations []*Attestation `protobuf:"bytes,2,rep,name=attestations,proto3" json:"attestations,omitempty"`
}

func (m *QuorumSolvency) Reset()      { *m = QuorumSolvency{} }
func (*QuorumSolvency) ProtoMessage() {}
func (*QuorumSolvency) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{16}
}
func (m *QuorumSolvency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuorumSolvency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuorumSolvency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuorumSolvency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuorumSolvency.Merge(m, src)
}
func (m *QuorumSolvency) XXX_Size() int {
	return m.Size()
}
func (m *QuorumSolvency) XXX_DiscardUnknown() {
	xxx_messageInfo_QuorumSolvency.DiscardUnknown(m)
}

var xxx_messageInfo_QuorumSolvency proto.InternalMessageInfo

type ErrataTx struct {
	Id    TxID  `protobuf:"bytes,1,opt,name=id,proto3,casttype=TxID" json:"id,omitempty"`
	Chain Chain `protobuf:"bytes,2,opt,name=chain,proto3,casttype=Chain" json:"chain,omitempty"`
}

func (m *ErrataTx) Reset()      { *m = ErrataTx{} }
func (*ErrataTx) ProtoMessage() {}
func (*ErrataTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{17}
}
func (m *ErrataTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrataTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrataTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrataTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrataTx.Merge(m, src)
}
func (m *ErrataTx) XXX_Size() int {
	return m.Size()
}
func (m *ErrataTx) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrataTx.DiscardUnknown(m)
}

var xxx_messageInfo_ErrataTx proto.InternalMessageInfo

type AttestErrataTx struct {
	ErrataTx    *ErrataTx    `protobuf:"bytes,1,opt,name=errata_tx,json=errataTx,proto3" json:"errata_tx,omitempty"`
	Attestation *Attestation `protobuf:"bytes,2,opt,name=attestation,proto3" json:"attestation,omitempty"`
}

func (m *AttestErrataTx) Reset()      { *m = AttestErrataTx{} }
func (*AttestErrataTx) ProtoMessage() {}
func (*AttestErrataTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{18}
}
func (m *AttestErrataTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestErrataTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestErrataTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestErrataTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestErrataTx.Merge(m, src)
}
func (m *AttestErrataTx) XXX_Size() int {
	return m.Size()
}
func (m *AttestErrataTx) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestErrataTx.DiscardUnknown(m)
}

var xxx_messageInfo_AttestErrataTx proto.InternalMessageInfo

type QuorumErrataTx struct {
	ErrataTx     *ErrataTx      `protobuf:"bytes,1,opt,name=errata_tx,json=errataTx,proto3" json:"errata_tx,omitempty"`
	Attestations []*Attestation `protobuf:"bytes,2,rep,name=attestations,proto3" json:"attestations,omitempty"`
}

func (m *QuorumErrataTx) Reset()      { *m = QuorumErrataTx{} }
func (*QuorumErrataTx) ProtoMessage() {}
func (*QuorumErrataTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{19}
}
func (m *QuorumErrataTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuorumErrataTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuorumErrataTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuorumErrataTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuorumErrataTx.Merge(m, src)
}
func (m *QuorumErrataTx) XXX_Size() int {
	return m.Size()
}
func (m *QuorumErrataTx) XXX_DiscardUnknown() {
	xxx_messageInfo_QuorumErrataTx.DiscardUnknown(m)
}

var xxx_messageInfo_QuorumErrataTx proto.InternalMessageInfo

type AttestationBatch struct {
	AttestTxs         []*AttestTx         `protobuf:"bytes,1,rep,name=attest_txs,json=attestTxs,proto3" json:"attest_txs,omitempty"`
	AttestNetworkFees []*AttestNetworkFee `protobuf:"bytes,2,rep,name=attest_network_fees,json=attestNetworkFees,proto3" json:"attest_network_fees,omitempty"`
	AttestSolvencies  []*AttestSolvency   `protobuf:"bytes,3,rep,name=attest_solvencies,json=attestSolvencies,proto3" json:"attest_solvencies,omitempty"`
	AttestErrataTxs   []*AttestErrataTx   `protobuf:"bytes,4,rep,name=attest_errata_txs,json=attestErrataTxs,proto3" json:"attest_errata_txs,omitempty"`
}

func (m *AttestationBatch) Reset()      { *m = AttestationBatch{} }
func (*AttestationBatch) ProtoMessage() {}
func (*AttestationBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f954d82c0b891f6, []int{20}
}
func (m *AttestationBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestationBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestationBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestationBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationBatch.Merge(m, src)
}
func (m *AttestationBatch) XXX_Size() int {
	return m.Size()
}
func (m *AttestationBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationBatch.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationBatch proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("common.Status", Status_name, Status_value)
	proto.RegisterType((*Asset)(nil), "common.Asset")
	proto.RegisterType((*Coin)(nil), "common.Coin")
	proto.RegisterType((*PubKeySet)(nil), "common.PubKeySet")
	proto.RegisterType((*Tx)(nil), "common.Tx")
	proto.RegisterType((*Fee)(nil), "common.Fee")
	proto.RegisterType((*ProtoUint)(nil), "common.ProtoUint")
	proto.RegisterType((*ObservedTx)(nil), "common.ObservedTx")
	proto.RegisterType((*Attestation)(nil), "common.Attestation")
	proto.RegisterType((*AttestTx)(nil), "common.AttestTx")
	proto.RegisterType((*QuorumTx)(nil), "common.QuorumTx")
	proto.RegisterType((*QuorumState)(nil), "common.QuorumState")
	proto.RegisterType((*NetworkFee)(nil), "common.NetworkFee")
	proto.RegisterType((*AttestNetworkFee)(nil), "common.AttestNetworkFee")
	proto.RegisterType((*QuorumNetworkFee)(nil), "common.QuorumNetworkFee")
	proto.RegisterType((*Solvency)(nil), "common.Solvency")
	proto.RegisterType((*AttestSolvency)(nil), "common.AttestSolvency")
	proto.RegisterType((*QuorumSolvency)(nil), "common.QuorumSolvency")
	proto.RegisterType((*ErrataTx)(nil), "common.ErrataTx")
	proto.RegisterType((*AttestErrataTx)(nil), "common.AttestErrataTx")
	proto.RegisterType((*QuorumErrataTx)(nil), "common.QuorumErrataTx")
	proto.RegisterType((*AttestationBatch)(nil), "common.AttestationBatch")
}

func init() { proto.RegisterFile("common/common.proto", fileDescriptor_8f954d82c0b891f6) }

var fileDescriptor_8f954d82c0b891f6 = []byte{
	// 1463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcd, 0x8f, 0x1b, 0xc5,
	0x12, 0xf7, 0xf8, 0x6b, 0xed, 0xb2, 0xe3, 0x38, 0x9d, 0xbc, 0xcd, 0x28, 0x7a, 0xcf, 0xde, 0xe7,
	0xf7, 0xf4, 0xde, 0x12, 0x60, 0x97, 0x38, 0x59, 0x3e, 0x22, 0x24, 0x92, 0xcd, 0xb7, 0x02, 0x24,
	0xf4, 0x1a, 0x84, 0xb8, 0x8c, 0xda, 0x33, 0xbd, 0xf6, 0x68, 0xed, 0xe9, 0xdd, 0xe9, 0x9e, 0x8d,
	0x1d, 0x3e, 0x94, 0x03, 0xe2, 0xcc, 0x19, 0x71, 0xe1, 0xc0, 0x25, 0x5c, 0x38, 0x71, 0xe1, 0x1f,
	0x88, 0x84, 0x90, 0x72, 0x41, 0x8a, 0x10, 0x72, 0xc8, 0xe6, 0x80, 0xc4, 0x7f, 0xc0, 0x9e, 0x50,
	0xf7, 0x74, 0x8f, 0xed, 0xdd, 0x7c, 0x90, 0x5d, 0x71, 0x59, 0x77, 0x55, 0xfd, 0xba, 0xa6, 0xaa,
	0x7e, 0x55, 0x35, 0xb3, 0x70, 0xd8, 0x65, 0xfd, 0x3e, 0x0b, 0x16, 0xe3, 0x9f, 0x85, 0xf5, 0x90,
	0x09, 0x86, 0xf2, 0xb1, 0x74, 0xec, 0x10, 0xe9, 0xfb, 0x01, 0x5b, 0x54, 0x7f, 0x63, 0xd3, 0xb1,
	0x23, 0x1d, 0xd6, 0x61, 0xea, 0xb8, 0x28, 0x4f, 0xb1, 0xb6, 0xf1, 0x9d, 0x05, 0xb9, 0xb3, 0x9c,
	0x53, 0x81, 0xea, 0x90, 0x73, 0xbb, 0xc4, 0x0f, 0x6c, 0x6b, 0xce, 0x9a, 0x2f, 0x2e, 0x17, 0xb7,
	0x47, 0xf5, 0xdc, 0x39, 0xa9, 0xc0, 0xb1, 0x1e, 0x35, 0x20, 0xcf, 0x87, 0xfd, 0x36, 0xeb, 0xd9,
	0x69, 0x85, 0x80, 0xed, 0x51, 0x3d, 0xbf, 0xa2, 0x34, 0x58, 0x5b, 0x24, 0x46, 0xf8, 0xee, 0x1a,
	0x0d, 0xed, 0xcc, 0x18, 0xd3, 0x52, 0x1a, 0xac, 0x2d, 0xe8, 0x08, 0xe4, 0xf8, 0x30, 0x10, 0x5d,
	0x3b, 0x3b, 0x67, 0xcd, 0x17, 0x70, 0x2c, 0x48, 0xad, 0x08, 0x89, 0x47, 0xed, 0x5c, 0xac, 0x55,
	0x02, 0xb2, 0x61, 0x86, 0x53, 0x37, 0x0a, 0xa9, 0x67, 0xe7, 0x95, 0xde, 0x88, 0x8d, 0x6f, 0x2c,
	0xc8, 0x9e, 0x63, 0x7e, 0x80, 0x2e, 0x40, 0x8e, 0xc8, 0x04, 0x54, 0xdc, 0xa5, 0xe6, 0x81, 0x05,
	0x5d, 0x10, 0x95, 0xd5, 0xf2, 0xdc, 0x9d, 0x51, 0x3d, 0xf5, 0xf3, 0xa8, 0x1e, 0x27, 0xf9, 0xfb,
	0xa8, 0x1e, 0x83, 0xbf, 0xf8, 0xed, 0xdb, 0xe3, 0xf1, 0x09, 0xc7, 0x3f, 0xe8, 0x0c, 0xe4, 0x49,
	0x9f, 0x45, 0x81, 0xd0, 0xd9, 0xcd, 0xeb, 0x8b, 0xb3, 0x2e, 0xe3, 0x7d, 0xc6, 0xb9, 0xb7, 0xb6,
	0xe0, 0xb3, 0xc5, 0x3e, 0x11, 0xdd, 0x85, 0x77, 0xfd, 0x40, 0x7a, 0xd2, 0x78, 0xac, 0x7f, 0xd1,
	0x31, 0x28, 0x78, 0xd4, 0xf5, 0xfb, 0xa4, 0xc7, 0x55, 0xf6, 0x19, 0x9c, 0xc8, 0x8d, 0x2e, 0x14,
	0xaf, 0x47, 0xed, 0xab, 0x74, 0xb8, 0x42, 0x05, 0x5a, 0x82, 0x22, 0xa7, 0xee, 0x7a, 0x73, 0xe9,
	0xe5, 0xb5, 0x13, 0xba, 0xda, 0x47, 0xb7, 0x46, 0xf5, 0xe2, 0x8a, 0x51, 0xca, 0xa2, 0xc5, 0x70,
	0x3c, 0x46, 0xa2, 0xff, 0xc2, 0x0c, 0xf5, 0x9a, 0x4b, 0x4b, 0x27, 0x5e, 0x9b, 0x24, 0x40, 0xe3,
	0x8c, 0xa9, 0xf1, 0x75, 0x1a, 0xd2, 0xad, 0x01, 0xaa, 0x41, 0xda, 0xf7, 0xb4, 0xf3, 0xca, 0xd6,
	0xa8, 0x9e, 0xbe, 0x72, 0x7e, 0x7b, 0x54, 0xcf, 0xb6, 0x06, 0x57, 0xce, 0xe3, 0xb4, 0xef, 0x8d,
	0xd9, 0x4e, 0x3f, 0x86, 0xed, 0x05, 0x28, 0xaf, 0x86, 0xac, 0xef, 0x10, 0xcf, 0x0b, 0x29, 0xe7,
	0x9a, 0xcf, 0xd2, 0xf6, 0xa8, 0x3e, 0x73, 0x36, 0x56, 0xe1, 0x92, 0x04, 0x68, 0x01, 0x1d, 0x07,
	0x10, 0x2c, 0x41, 0x67, 0x77, 0xa3, 0x8b, 0x82, 0x19, 0xec, 0x69, 0xc8, 0xb9, 0xcc, 0x0f, 0xb8,
	0x9d, 0x9b, 0xcb, 0xcc, 0x97, 0x9a, 0x65, 0x43, 0x99, 0xe4, 0x73, 0x79, 0x56, 0x16, 0x5e, 0x12,
	0xa5, 0x20, 0xb7, 0xef, 0xd7, 0x73, 0x52, 0xcd, 0x71, 0x2c, 0xa3, 0x26, 0x64, 0x3a, 0x84, 0xdb,
	0xf9, 0x47, 0xdc, 0x44, 0xfa, 0xa6, 0x04, 0xdc, 0xbe, 0x5f, 0xcf, 0x5c, 0x22, 0x1c, 0xcb, 0x33,
	0x42, 0x90, 0xed, 0xd3, 0x3e, 0xb3, 0x67, 0x64, 0x54, 0x58, 0x9d, 0x1b, 0x43, 0xc8, 0x5c, 0xa4,
	0x14, 0x9d, 0x30, 0xa1, 0x58, 0x8f, 0x70, 0x78, 0x40, 0x3a, 0xdc, 0x15, 0xc1, 0x1b, 0x50, 0x5a,
	0x67, 0xac, 0xe7, 0x78, 0xd4, 0x8b, 0x5c, 0xd3, 0x2e, 0xb5, 0x27, 0xb7, 0x0b, 0x06, 0x79, 0xe5,
	0xbc, 0xba, 0xd1, 0xb8, 0x04, 0xc5, 0xeb, 0x72, 0xf8, 0xa4, 0x01, 0x9d, 0x82, 0xdc, 0x26, 0xe9,
	0x45, 0x54, 0x73, 0xf5, 0x34, 0x3f, 0x31, 0xf8, 0x74, 0xf6, 0xd6, 0x2f, 0x73, 0x56, 0xe3, 0xa7,
	0x0c, 0xc0, 0xb5, 0x36, 0xa7, 0xe1, 0x26, 0xf5, 0x5a, 0x03, 0x34, 0x07, 0x69, 0x31, 0xd0, 0x63,
	0x00, 0x26, 0x91, 0xd6, 0x60, 0x39, 0x2b, 0x7d, 0xe2, 0xb4, 0x18, 0xa0, 0xff, 0x41, 0x9e, 0x0b,
	0x22, 0x22, 0xae, 0xa2, 0xae, 0x34, 0x2b, 0x06, 0xb5, 0xa2, 0xb4, 0x58, 0x5b, 0xd1, 0xbf, 0x00,
	0x58, 0x24, 0x9c, 0x2e, 0xe1, 0x5d, 0x2a, 0xa9, 0xcf, 0xcc, 0x17, 0x71, 0x91, 0x45, 0xe2, 0xb2,
	0x52, 0xa0, 0x7f, 0x43, 0xb9, 0xdd, 0x63, 0xee, 0x9a, 0xd3, 0xa5, 0x7e, 0xa7, 0x2b, 0x14, 0xdb,
	0x19, 0x5c, 0x52, 0xba, 0xcb, 0x4a, 0xa5, 0x06, 0xd7, 0xef, 0x04, 0x34, 0x8c, 0x49, 0x2e, 0x62,
	0x23, 0xa2, 0x53, 0x50, 0x65, 0x3a, 0x66, 0x67, 0x3d, 0x6a, 0x3b, 0x6b, 0x74, 0xa8, 0x66, 0x7b,
	0xba, 0x9f, 0x2b, 0x06, 0x13, 0xcb, 0x32, 0xa2, 0x35, 0x3a, 0x94, 0x3e, 0x9c, 0x3e, 0x57, 0x44,
	0x66, 0x70, 0x51, 0x6b, 0xde, 0xe2, 0xe8, 0xff, 0x70, 0x70, 0xd5, 0x0f, 0x48, 0xcf, 0xe7, 0xd4,
	0x04, 0x55, 0x50, 0x98, 0x8a, 0x51, 0xeb, 0xb8, 0x6a, 0x00, 0xa4, 0xd3, 0x09, 0x69, 0x87, 0x08,
	0x16, 0xda, 0x45, 0xd5, 0x10, 0x13, 0x1a, 0xf4, 0x3c, 0x1c, 0x1a, 0x4b, 0x8e, 0x20, 0x61, 0x87,
	0x0a, 0x1b, 0x14, 0xac, 0x3a, 0x36, 0xb4, 0x94, 0x1e, 0xbd, 0x07, 0x47, 0x77, 0x81, 0x9d, 0x9e,
	0xdf, 0xf7, 0x85, 0x5d, 0x4a, 0xd8, 0xb4, 0x9e, 0xc0, 0xe6, 0x3f, 0x76, 0xba, 0x7c, 0x53, 0x5e,
	0x6e, 0x5c, 0x81, 0xd2, 0x59, 0x21, 0xa8, 0x24, 0xc3, 0x67, 0x01, 0x9a, 0x05, 0x5d, 0x15, 0xc5,
	0x6d, 0x19, 0x6b, 0x09, 0xfd, 0x13, 0x8a, 0x2b, 0x7e, 0x27, 0x20, 0x22, 0x0a, 0xa9, 0x22, 0xb4,
	0x8c, 0xc7, 0x0a, 0xdd, 0x22, 0x3f, 0x58, 0x50, 0x88, 0x7d, 0xb5, 0x06, 0x68, 0x01, 0x72, 0xac,
	0xcd, 0x5b, 0xa6, 0x47, 0x90, 0x61, 0x7f, 0xdc, 0x43, 0xba, 0x57, 0x62, 0x18, 0x5a, 0x82, 0x12,
	0x19, 0xc7, 0xa1, 0x1e, 0x51, 0x6a, 0x1e, 0x4e, 0x16, 0xec, 0xd8, 0x84, 0x27, 0x71, 0x92, 0x7b,
	0x3f, 0x68, 0xb3, 0x28, 0xf0, 0xd4, 0xd6, 0x28, 0x60, 0x23, 0xa2, 0x57, 0xc1, 0x26, 0xbd, 0x1e,
	0xbb, 0xe1, 0xac, 0x46, 0x32, 0x46, 0x27, 0x26, 0x39, 0xf6, 0x1e, 0xbf, 0x0d, 0x66, 0x95, 0xfd,
	0xa2, 0x32, 0x5f, 0x1b, 0x5b, 0x75, 0x36, 0x3f, 0x5a, 0x50, 0x78, 0x27, 0x62, 0x61, 0xd4, 0xdf,
	0x43, 0x36, 0xaf, 0x40, 0x79, 0x22, 0x4a, 0x39, 0x02, 0x99, 0xc7, 0xa5, 0x33, 0x05, 0xfc, 0x1b,
	0xf3, 0xf9, 0xc3, 0x82, 0x52, 0x9c, 0x8f, 0x1c, 0x40, 0x8a, 0xe6, 0x21, 0xbf, 0x11, 0xb1, 0xd6,
	0xc0, 0xac, 0xa3, 0xaa, 0x09, 0xce, 0x24, 0x8d, 0xb5, 0x1d, 0x9d, 0x81, 0xca, 0x46, 0xc4, 0xde,
	0xa6, 0xe2, 0x06, 0x0b, 0xd7, 0x2e, 0x52, 0x6a, 0xd2, 0xb1, 0xa7, 0x6f, 0x8c, 0x01, 0x78, 0x07,
	0x1e, 0xbd, 0x0e, 0x07, 0x36, 0x22, 0xb6, 0xc2, 0x7a, 0x9b, 0x34, 0x70, 0x7d, 0x3d, 0xe6, 0xa5,
	0xe6, 0xec, 0xb4, 0x03, 0x6d, 0x1f, 0xe2, 0x69, 0x30, 0x3a, 0x0d, 0xe5, 0x8d, 0x88, 0x5d, 0x08,
	0x43, 0x22, 0x88, 0x8c, 0x37, 0xfb, 0xa8, 0xcb, 0xc6, 0x8c, 0xa7, 0xb0, 0x3a, 0xf7, 0xaf, 0x2c,
	0x80, 0x71, 0x3c, 0xb2, 0xc9, 0xf5, 0xe0, 0x5a, 0x6a, 0x70, 0xb5, 0xf4, 0xf4, 0x17, 0xd5, 0x73,
	0x50, 0x15, 0x21, 0x09, 0x38, 0x71, 0x65, 0x61, 0x1d, 0xee, 0xdf, 0xa4, 0x8a, 0xa6, 0x2c, 0x3e,
	0x38, 0xa1, 0x5f, 0xf1, 0x6f, 0xd2, 0x9d, 0xd0, 0x90, 0x08, 0xaa, 0x68, 0x9a, 0x86, 0x62, 0x22,
	0xcc, 0xf4, 0x7c, 0x6a, 0x41, 0x35, 0xee, 0x8b, 0x89, 0x48, 0x4f, 0x42, 0x29, 0x88, 0x25, 0x67,
	0x95, 0xd2, 0x9d, 0xdd, 0x37, 0x51, 0x71, 0x08, 0xc6, 0x97, 0xf6, 0x36, 0x4a, 0x3a, 0x8c, 0xcf,
	0x2c, 0xa8, 0xee, 0xe4, 0x73, 0x6f, 0x61, 0xec, 0x75, 0x06, 0x74, 0x20, 0xdf, 0x5b, 0x50, 0x30,
	0x1d, 0x81, 0xec, 0x89, 0x4f, 0x8c, 0xc2, 0xb3, 0x7d, 0x5c, 0xfc, 0x07, 0x66, 0xcc, 0xea, 0xcf,
	0xec, 0x5a, 0xfd, 0xf9, 0xf5, 0x78, 0xbd, 0x25, 0xaf, 0xe6, 0xec, 0x5f, 0x7e, 0x35, 0x8f, 0x9b,
	0x28, 0x37, 0xd9, 0x44, 0x3a, 0xfa, 0x0f, 0xa1, 0x12, 0x27, 0x98, 0xa4, 0xf0, 0x02, 0x14, 0xb8,
	0x3e, 0xeb, 0x02, 0x26, 0x13, 0x97, 0x34, 0x7e, 0x82, 0xd8, 0x1f, 0x87, 0x1f, 0x43, 0x65, 0x7a,
	0xa2, 0x9e, 0xf1, 0xe1, 0xfb, 0x64, 0xee, 0x2a, 0x14, 0xcc, 0x00, 0xee, 0x83, 0x38, 0xed, 0xec,
	0x23, 0x53, 0xc8, 0xc4, 0xe5, 0x8b, 0x50, 0xa4, 0xea, 0xec, 0x24, 0x5f, 0x20, 0x49, 0x32, 0xc9,
	0x16, 0x28, 0x50, 0x03, 0xdf, 0x57, 0x25, 0x3f, 0x31, 0x95, 0xdc, 0xeb, 0xd3, 0xf7, 0x59, 0xca,
	0x2f, 0xd3, 0x66, 0x29, 0x28, 0xf5, 0x32, 0x11, 0x6e, 0x17, 0x2d, 0x02, 0xc4, 0x50, 0x47, 0xec,
	0xde, 0xde, 0xe6, 0x05, 0x8c, 0x8b, 0x44, 0x9f, 0x38, 0xba, 0x0c, 0x87, 0xf5, 0x85, 0x89, 0x29,
	0xde, 0xb5, 0xc5, 0x77, 0x2e, 0x1f, 0x7c, 0x88, 0xec, 0xd0, 0x70, 0x74, 0x0e, 0xb4, 0xd2, 0xe1,
	0x8f, 0x5d, 0xe6, 0xd3, 0x7d, 0x8f, 0xab, 0x64, 0x52, 0x96, 0xfb, 0x7c, 0x39, 0x71, 0x92, 0x54,
	0x72, 0xd7, 0x52, 0x9f, 0xe6, 0x1c, 0x1f, 0x24, 0x53, 0xb2, 0x2e, 0xcf, 0xf1, 0x97, 0x20, 0x1f,
	0x7f, 0x4d, 0xa2, 0x0a, 0x80, 0x1f, 0xb8, 0xac, 0xbf, 0xde, 0xa3, 0x82, 0x56, 0x53, 0xa8, 0x00,
	0x59, 0x8f, 0x05, 0xb4, 0x6a, 0xa1, 0x32, 0x14, 0x42, 0xba, 0x49, 0x43, 0x41, 0xbd, 0x6a, 0x7a,
	0xf9, 0xfd, 0x3b, 0x0f, 0x6a, 0xa9, 0x7b, 0x0f, 0x6a, 0xa9, 0x5b, 0x5b, 0xb5, 0xd4, 0x9d, 0xad,
	0x9a, 0x75, 0x77, 0xab, 0x66, 0xfd, 0xba, 0x55, 0xb3, 0x3e, 0x7f, 0x58, 0x4b, 0xdd, 0x7d, 0x58,
	0x4b, 0xdd, 0x7b, 0x58, 0x4b, 0x7d, 0xd0, 0xec, 0xf8, 0xa2, 0x1b, 0xb5, 0x65, 0x30, 0x8b, 0xfc,
	0x86, 0x2f, 0xdc, 0x6e, 0x6f, 0xa8, 0xfe, 0x87, 0x75, 0x59, 0x2f, 0x51, 0x04, 0xcc, 0xa3, 0x8b,
	0x9b, 0x27, 0xf5, 0x3f, 0xc5, 0xed, 0xbc, 0x02, 0x9c, 0xfc, 0x33, 0x00, 0x00, 0xff, 0xff, 0xed,
	0x3a, 0x74, 0x80, 0x2c, 0x0f, 0x00, 0x00,
}

func (m *Asset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Asset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Asset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Secured {
		i--
		if m.Secured {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Trade {
		i--
		if m.Trade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Synth {
		i--
		if m.Synth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Ticker) > 0 {
		i -= len(m.Ticker)
		copy(dAtA[i:], m.Ticker)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Ticker)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Coin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Coin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Decimals != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCommon(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Asset.Size()
		i -= size
		if _, err := m.Asset.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCommon(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PubKeySet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubKeySet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKeySet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ed25519) > 0 {
		i -= len(m.Ed25519)
		copy(dAtA[i:], m.Ed25519)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Ed25519)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Secp256k1) > 0 {
		i -= len(m.Secp256k1)
		copy(dAtA[i:], m.Secp256k1)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Secp256k1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Gas) > 0 {
		for iNdEx := len(m.Gas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Fee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PoolDeduct.Size()
		i -= size
		if _, err := m.PoolDeduct.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCommon(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProtoUint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoUint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoUint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCommon(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ObservedTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObservedTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObservedTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AggregatorTargetLimit != nil {
		{
			size := m.AggregatorTargetLimit.Size()
			i -= size
			if _, err := m.AggregatorTargetLimit.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.AggregatorTarget) > 0 {
		i -= len(m.AggregatorTarget)
		copy(dAtA[i:], m.AggregatorTarget)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.AggregatorTarget)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Aggregator) > 0 {
		i -= len(m.Aggregator)
		copy(dAtA[i:], m.Aggregator)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Aggregator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.FinaliseHeight != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.FinaliseHeight))
		i--
		dAtA[i] = 0x40
	}
	if m.KeysignMs != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.KeysignMs))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ObservedPubKey) > 0 {
		i -= len(m.ObservedPubKey)
		copy(dAtA[i:], m.ObservedPubKey)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ObservedPubKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OutHashes) > 0 {
		for iNdEx := len(m.OutHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OutHashes[iNdEx])
			copy(dAtA[i:], m.OutHashes[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.OutHashes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Status != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCommon(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Attestation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attestation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attestation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AttestTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowFutureObservation {
		i--
		if m.AllowFutureObservation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Inbound {
		i--
		if m.Inbound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Attestation != nil {
		{
			size, err := m.Attestation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ObsTx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCommon(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuorumTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuorumTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuorumTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowFutureObservation {
		i--
		if m.AllowFutureObservation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Inbound {
		i--
		if m.Inbound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ObsTx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCommon(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuorumState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuorumState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuorumState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuoErrataTxs) > 0 {
		for iNdEx := len(m.QuoErrataTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QuoErrataTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.QuoSolvencies) > 0 {
		for iNdEx := len(m.QuoSolvencies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QuoSolvencies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.QuoNetworkFees) > 0 {
		for iNdEx := len(m.QuoNetworkFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QuoNetworkFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.QuoTxs) > 0 {
		for iNdEx := len(m.QuoTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QuoTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NetworkFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransactionRate != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.TransactionRate))
		i--
		dAtA[i] = 0x20
	}
	if m.TransactionSize != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.TransactionSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AttestNetworkFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestNetworkFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestNetworkFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attestation != nil {
		{
			size, err := m.Attestation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NetworkFee != nil {
		{
			size, err := m.NetworkFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuorumNetworkFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuorumNetworkFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuorumNetworkFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NetworkFee != nil {
		{
			size, err := m.NetworkFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Solvency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Solvency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Solvency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AttestSolvency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestSolvency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestSolvency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attestation != nil {
		{
			size, err := m.Attestation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Solvency != nil {
		{
			size, err := m.Solvency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuorumSolvency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuorumSolvency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuorumSolvency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Solvency != nil {
		{
			size, err := m.Solvency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ErrataTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrataTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrataTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AttestErrataTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestErrataTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestErrataTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attestation != nil {
		{
			size, err := m.Attestation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ErrataTx != nil {
		{
			size, err := m.ErrataTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuorumErrataTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuorumErrataTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuorumErrataTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ErrataTx != nil {
		{
			size, err := m.ErrataTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AttestationBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestationBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestationBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AttestErrataTxs) > 0 {
		for iNdEx := len(m.AttestErrataTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AttestErrataTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.AttestSolvencies) > 0 {
		for iNdEx := len(m.AttestSolvencies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AttestSolvencies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AttestNetworkFees) > 0 {
		for iNdEx := len(m.AttestNetworkFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AttestNetworkFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AttestTxs) > 0 {
		for iNdEx := len(m.AttestTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AttestTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Ticker)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Synth {
		n += 2
	}
	if m.Trade {
		n += 2
	}
	if m.Secured {
		n += 2
	}
	return n
}

func (m *Coin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Asset.Size()
	n += 1 + l + sovCommon(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovCommon(uint64(l))
	if m.Decimals != 0 {
		n += 1 + sovCommon(uint64(m.Decimals))
	}
	return n
}

func (m *PubKeySet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Secp256k1)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Ed25519)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *Tx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.Gas) > 0 {
		for _, e := range m.Gas {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *Fee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	l = m.PoolDeduct.Size()
	n += 1 + l + sovCommon(uint64(l))
	return n
}

func (m *ProtoUint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Value.Size()
	n += 1 + l + sovCommon(uint64(l))
	return n
}

func (m *ObservedTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tx.Size()
	n += 1 + l + sovCommon(uint64(l))
	if m.Status != 0 {
		n += 1 + sovCommon(uint64(m.Status))
	}
	if len(m.OutHashes) > 0 {
		for _, s := range m.OutHashes {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.BlockHeight != 0 {
		n += 1 + sovCommon(uint64(m.BlockHeight))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	l = len(m.ObservedPubKey)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.KeysignMs != 0 {
		n += 1 + sovCommon(uint64(m.KeysignMs))
	}
	if m.FinaliseHeight != 0 {
		n += 1 + sovCommon(uint64(m.FinaliseHeight))
	}
	l = len(m.Aggregator)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.AggregatorTarget)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.AggregatorTargetLimit != nil {
		l = m.AggregatorTargetLimit.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *Attestation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *AttestTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObsTx.Size()
	n += 1 + l + sovCommon(uint64(l))
	if m.Attestation != nil {
		l = m.Attestation.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Inbound {
		n += 2
	}
	if m.AllowFutureObservation {
		n += 2
	}
	return n
}

func (m *QuorumTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObsTx.Size()
	n += 1 + l + sovCommon(uint64(l))
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.Inbound {
		n += 2
	}
	if m.AllowFutureObservation {
		n += 2
	}
	return n
}

func (m *QuorumState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QuoTxs) > 0 {
		for _, e := range m.QuoTxs {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.QuoNetworkFees) > 0 {
		for _, e := range m.QuoNetworkFees {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.QuoSolvencies) > 0 {
		for _, e := range m.QuoSolvencies {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.QuoErrataTxs) > 0 {
		for _, e := range m.QuoErrataTxs {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *NetworkFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovCommon(uint64(m.Height))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.TransactionSize != 0 {
		n += 1 + sovCommon(uint64(m.TransactionSize))
	}
	if m.TransactionRate != 0 {
		n += 1 + sovCommon(uint64(m.TransactionRate))
	}
	return n
}

func (m *AttestNetworkFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkFee != nil {
		l = m.NetworkFee.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Attestation != nil {
		l = m.Attestation.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *QuorumNetworkFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkFee != nil {
		l = m.NetworkFee.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *Solvency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovCommon(uint64(m.Height))
	}
	return n
}

func (m *AttestSolvency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Solvency != nil {
		l = m.Solvency.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Attestation != nil {
		l = m.Attestation.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *QuorumSolvency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Solvency != nil {
		l = m.Solvency.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *ErrataTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *AttestErrataTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrataTx != nil {
		l = m.ErrataTx.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Attestation != nil {
		l = m.Attestation.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *QuorumErrataTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrataTx != nil {
		l = m.ErrataTx.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *AttestationBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AttestTxs) > 0 {
		for _, e := range m.AttestTxs {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.AttestNetworkFees) > 0 {
		for _, e := range m.AttestNetworkFees {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.AttestSolvencies) > 0 {
		for _, e := range m.AttestSolvencies {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.AttestErrataTxs) > 0 {
		for _, e := range m.AttestErrataTxs {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ProtoUint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProtoUint{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attestation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attestation{`,
		`PubKey:` + fmt.Sprintf("%v", this.PubKey) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttestTx) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttestTx{`,
		`ObsTx:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObsTx), "ObservedTx", "ObservedTx", 1), `&`, ``, 1) + `,`,
		`Attestation:` + strings.Replace(this.Attestation.String(), "Attestation", "Attestation", 1) + `,`,
		`Inbound:` + fmt.Sprintf("%v", this.Inbound) + `,`,
		`AllowFutureObservation:` + fmt.Sprintf("%v", this.AllowFutureObservation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuorumTx) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttestations := "[]*Attestation{"
	for _, f := range this.Attestations {
		repeatedStringForAttestations += strings.Replace(f.String(), "Attestation", "Attestation", 1) + ","
	}
	repeatedStringForAttestations += "}"
	s := strings.Join([]string{`&QuorumTx{`,
		`ObsTx:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObsTx), "ObservedTx", "ObservedTx", 1), `&`, ``, 1) + `,`,
		`Attestations:` + repeatedStringForAttestations + `,`,
		`Inbound:` + fmt.Sprintf("%v", this.Inbound) + `,`,
		`AllowFutureObservation:` + fmt.Sprintf("%v", this.AllowFutureObservation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuorumState) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQuoTxs := "[]*QuorumTx{"
	for _, f := range this.QuoTxs {
		repeatedStringForQuoTxs += strings.Replace(f.String(), "QuorumTx", "QuorumTx", 1) + ","
	}
	repeatedStringForQuoTxs += "}"
	repeatedStringForQuoNetworkFees := "[]*QuorumNetworkFee{"
	for _, f := range this.QuoNetworkFees {
		repeatedStringForQuoNetworkFees += strings.Replace(f.String(), "QuorumNetworkFee", "QuorumNetworkFee", 1) + ","
	}
	repeatedStringForQuoNetworkFees += "}"
	repeatedStringForQuoSolvencies := "[]*QuorumSolvency{"
	for _, f := range this.QuoSolvencies {
		repeatedStringForQuoSolvencies += strings.Replace(f.String(), "QuorumSolvency", "QuorumSolvency", 1) + ","
	}
	repeatedStringForQuoSolvencies += "}"
	repeatedStringForQuoErrataTxs := "[]*QuorumErrataTx{"
	for _, f := range this.QuoErrataTxs {
		repeatedStringForQuoErrataTxs += strings.Replace(f.String(), "QuorumErrataTx", "QuorumErrataTx", 1) + ","
	}
	repeatedStringForQuoErrataTxs += "}"
	s := strings.Join([]string{`&QuorumState{`,
		`QuoTxs:` + repeatedStringForQuoTxs + `,`,
		`QuoNetworkFees:` + repeatedStringForQuoNetworkFees + `,`,
		`QuoSolvencies:` + repeatedStringForQuoSolvencies + `,`,
		`QuoErrataTxs:` + repeatedStringForQuoErrataTxs + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkFee) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkFee{`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`Chain:` + fmt.Sprintf("%v", this.Chain) + `,`,
		`TransactionSize:` + fmt.Sprintf("%v", this.TransactionSize) + `,`,
		`TransactionRate:` + fmt.Sprintf("%v", this.TransactionRate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttestNetworkFee) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttestNetworkFee{`,
		`NetworkFee:` + strings.Replace(this.NetworkFee.String(), "NetworkFee", "NetworkFee", 1) + `,`,
		`Attestation:` + strings.Replace(this.Attestation.String(), "Attestation", "Attestation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuorumNetworkFee) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttestations := "[]*Attestation{"
	for _, f := range this.Attestations {
		repeatedStringForAttestations += strings.Replace(f.String(), "Attestation", "Attestation", 1) + ","
	}
	repeatedStringForAttestations += "}"
	s := strings.Join([]string{`&QuorumNetworkFee{`,
		`NetworkFee:` + strings.Replace(this.NetworkFee.String(), "NetworkFee", "NetworkFee", 1) + `,`,
		`Attestations:` + repeatedStringForAttestations + `,`,
		`}`,
	}, "")
	return s
}
func (this *Solvency) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCoins := "[]Coin{"
	for _, f := range this.Coins {
		repeatedStringForCoins += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForCoins += "}"
	s := strings.Join([]string{`&Solvency{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Chain:` + fmt.Sprintf("%v", this.Chain) + `,`,
		`PubKey:` + fmt.Sprintf("%v", this.PubKey) + `,`,
		`Coins:` + repeatedStringForCoins + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttestSolvency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttestSolvency{`,
		`Solvency:` + strings.Replace(this.Solvency.String(), "Solvency", "Solvency", 1) + `,`,
		`Attestation:` + strings.Replace(this.Attestation.String(), "Attestation", "Attestation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuorumSolvency) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttestations := "[]*Attestation{"
	for _, f := range this.Attestations {
		repeatedStringForAttestations += strings.Replace(f.String(), "Attestation", "Attestation", 1) + ","
	}
	repeatedStringForAttestations += "}"
	s := strings.Join([]string{`&QuorumSolvency{`,
		`Solvency:` + strings.Replace(this.Solvency.String(), "Solvency", "Solvency", 1) + `,`,
		`Attestations:` + repeatedStringForAttestations + `,`,
		`}`,
	}, "")
	return s
}
func (this *ErrataTx) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ErrataTx{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Chain:` + fmt.Sprintf("%v", this.Chain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttestErrataTx) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttestErrataTx{`,
		`ErrataTx:` + strings.Replace(this.ErrataTx.String(), "ErrataTx", "ErrataTx", 1) + `,`,
		`Attestation:` + strings.Replace(this.Attestation.String(), "Attestation", "Attestation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuorumErrataTx) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttestations := "[]*Attestation{"
	for _, f := range this.Attestations {
		repeatedStringForAttestations += strings.Replace(f.String(), "Attestation", "Attestation", 1) + ","
	}
	repeatedStringForAttestations += "}"
	s := strings.Join([]string{`&QuorumErrataTx{`,
		`ErrataTx:` + strings.Replace(this.ErrataTx.String(), "ErrataTx", "ErrataTx", 1) + `,`,
		`Attestations:` + repeatedStringForAttestations + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttestationBatch) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttestTxs := "[]*AttestTx{"
	for _, f := range this.AttestTxs {
		repeatedStringForAttestTxs += strings.Replace(f.String(), "AttestTx", "AttestTx", 1) + ","
	}
	repeatedStringForAttestTxs += "}"
	repeatedStringForAttestNetworkFees := "[]*AttestNetworkFee{"
	for _, f := range this.AttestNetworkFees {
		repeatedStringForAttestNetworkFees += strings.Replace(f.String(), "AttestNetworkFee", "AttestNetworkFee", 1) + ","
	}
	repeatedStringForAttestNetworkFees += "}"
	repeatedStringForAttestSolvencies := "[]*AttestSolvency{"
	for _, f := range this.AttestSolvencies {
		repeatedStringForAttestSolvencies += strings.Replace(f.String(), "AttestSolvency", "AttestSolvency", 1) + ","
	}
	repeatedStringForAttestSolvencies += "}"
	repeatedStringForAttestErrataTxs := "[]*AttestErrataTx{"
	for _, f := range this.AttestErrataTxs {
		repeatedStringForAttestErrataTxs += strings.Replace(f.String(), "AttestErrataTx", "AttestErrataTx", 1) + ","
	}
	repeatedStringForAttestErrataTxs += "}"
	s := strings.Join([]string{`&AttestationBatch{`,
		`AttestTxs:` + repeatedStringForAttestTxs + `,`,
		`AttestNetworkFees:` + repeatedStringForAttestNetworkFees + `,`,
		`AttestSolvencies:` + repeatedStringForAttestSolvencies + `,`,
		`AttestErrataTxs:` + repeatedStringForAttestErrataTxs + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCommon(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Asset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = Chain(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = Symbol(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticker = Ticker(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Synth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Synth = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Trade = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secured", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Secured = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Coin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubKeySet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubKeySet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubKeySet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secp256k1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secp256k1 = PubKey(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ed25519", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ed25519 = PubKey(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = TxID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = Chain(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gas = append(m.Gas, Coin{})
			if err := m.Gas[len(m.Gas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolDeduct", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolDeduct.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoUint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoUint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoUint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObservedTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObservedTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObservedTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutHashes = append(m.OutHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservedPubKey = PubKey(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeysignMs", wireType)
			}
			m.KeysignMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeysignMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinaliseHeight", wireType)
			}
			m.FinaliseHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinaliseHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aggregator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregatorTarget = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorTargetLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Uint
			m.AggregatorTargetLimit = &v
			if err := m.AggregatorTargetLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attestation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attestation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attestation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObsTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObsTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attestation == nil {
				m.Attestation = &Attestation{}
			}
			if err := m.Attestation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inbound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inbound = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowFutureObservation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowFutureObservation = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuorumTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuorumTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuorumTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObsTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObsTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, &Attestation{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inbound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inbound = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowFutureObservation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowFutureObservation = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuorumState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuorumState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuorumState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoTxs = append(m.QuoTxs, &QuorumTx{})
			if err := m.QuoTxs[len(m.QuoTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoNetworkFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoNetworkFees = append(m.QuoNetworkFees, &QuorumNetworkFee{})
			if err := m.QuoNetworkFees[len(m.QuoNetworkFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoSolvencies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoSolvencies = append(m.QuoSolvencies, &QuorumSolvency{})
			if err := m.QuoSolvencies[len(m.QuoSolvencies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoErrataTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoErrataTxs = append(m.QuoErrataTxs, &QuorumErrataTx{})
			if err := m.QuoErrataTxs[len(m.QuoErrataTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = Chain(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionSize", wireType)
			}
			m.TransactionSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionRate", wireType)
			}
			m.TransactionRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionRate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestNetworkFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestNetworkFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestNetworkFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkFee == nil {
				m.NetworkFee = &NetworkFee{}
			}
			if err := m.NetworkFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attestation == nil {
				m.Attestation = &Attestation{}
			}
			if err := m.Attestation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuorumNetworkFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuorumNetworkFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuorumNetworkFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkFee == nil {
				m.NetworkFee = &NetworkFee{}
			}
			if err := m.NetworkFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, &Attestation{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Solvency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Solvency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Solvency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = TxID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = Chain(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = PubKey(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestSolvency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestSolvency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestSolvency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Solvency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Solvency == nil {
				m.Solvency = &Solvency{}
			}
			if err := m.Solvency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attestation == nil {
				m.Attestation = &Attestation{}
			}
			if err := m.Attestation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuorumSolvency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuorumSolvency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuorumSolvency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Solvency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Solvency == nil {
				m.Solvency = &Solvency{}
			}
			if err := m.Solvency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, &Attestation{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrataTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrataTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrataTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = TxID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = Chain(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestErrataTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestErrataTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestErrataTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrataTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ErrataTx == nil {
				m.ErrataTx = &ErrataTx{}
			}
			if err := m.ErrataTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attestation == nil {
				m.Attestation = &Attestation{}
			}
			if err := m.Attestation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuorumErrataTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuorumErrataTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuorumErrataTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrataTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ErrataTx == nil {
				m.ErrataTx = &ErrataTx{}
			}
			if err := m.ErrataTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, &Attestation{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestationBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestationBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestationBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestTxs = append(m.AttestTxs, &AttestTx{})
			if err := m.AttestTxs[len(m.AttestTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestNetworkFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestNetworkFees = append(m.AttestNetworkFees, &AttestNetworkFee{})
			if err := m.AttestNetworkFees[len(m.AttestNetworkFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestSolvencies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestSolvencies = append(m.AttestSolvencies, &AttestSolvency{})
			if err := m.AttestSolvencies[len(m.AttestSolvencies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestErrataTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestErrataTxs = append(m.AttestErrataTxs, &AttestErrataTx{})
			if err := m.AttestErrataTxs[len(m.AttestErrataTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
