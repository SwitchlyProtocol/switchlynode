// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bifrost/p2p/messages/join_party.proto

package messages

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JoinPartyLeaderComm_ResponseType int32

const (
	JoinPartyLeaderComm_Unknown        JoinPartyLeaderComm_ResponseType = 0
	JoinPartyLeaderComm_Success        JoinPartyLeaderComm_ResponseType = 1
	JoinPartyLeaderComm_Timeout        JoinPartyLeaderComm_ResponseType = 2
	JoinPartyLeaderComm_LeaderNotReady JoinPartyLeaderComm_ResponseType = 3
	JoinPartyLeaderComm_UnknownPeer    JoinPartyLeaderComm_ResponseType = 4
)

var JoinPartyLeaderComm_ResponseType_name = map[int32]string{
	0: "Unknown",
	1: "Success",
	2: "Timeout",
	3: "LeaderNotReady",
	4: "UnknownPeer",
}

var JoinPartyLeaderComm_ResponseType_value = map[string]int32{
	"Unknown":        0,
	"Success":        1,
	"Timeout":        2,
	"LeaderNotReady": 3,
	"UnknownPeer":    4,
}

func (x JoinPartyLeaderComm_ResponseType) String() string {
	return proto.EnumName(JoinPartyLeaderComm_ResponseType_name, int32(x))
}

func (JoinPartyLeaderComm_ResponseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_727397ef7e12a4dc, []int{1, 0}
}

type JoinPartyRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *JoinPartyRequest) Reset()         { *m = JoinPartyRequest{} }
func (m *JoinPartyRequest) String() string { return proto.CompactTextString(m) }
func (*JoinPartyRequest) ProtoMessage()    {}
func (*JoinPartyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_727397ef7e12a4dc, []int{0}
}
func (m *JoinPartyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinPartyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinPartyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinPartyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinPartyRequest.Merge(m, src)
}
func (m *JoinPartyRequest) XXX_Size() int {
	return m.Size()
}
func (m *JoinPartyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinPartyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinPartyRequest proto.InternalMessageInfo

func (m *JoinPartyRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type JoinPartyLeaderComm struct {
	ID      string                           `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	MsgType string                           `protobuf:"bytes,2,opt,name=MsgType,proto3" json:"MsgType,omitempty"`
	Type    JoinPartyLeaderComm_ResponseType `protobuf:"varint,3,opt,name=type,proto3,enum=bifrost.p2p.messages.JoinPartyLeaderComm_ResponseType" json:"type,omitempty"`
	PeerIDs []string                         `protobuf:"bytes,4,rep,name=PeerIDs,proto3" json:"PeerIDs,omitempty"`
}

func (m *JoinPartyLeaderComm) Reset()         { *m = JoinPartyLeaderComm{} }
func (m *JoinPartyLeaderComm) String() string { return proto.CompactTextString(m) }
func (*JoinPartyLeaderComm) ProtoMessage()    {}
func (*JoinPartyLeaderComm) Descriptor() ([]byte, []int) {
	return fileDescriptor_727397ef7e12a4dc, []int{1}
}
func (m *JoinPartyLeaderComm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinPartyLeaderComm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinPartyLeaderComm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinPartyLeaderComm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinPartyLeaderComm.Merge(m, src)
}
func (m *JoinPartyLeaderComm) XXX_Size() int {
	return m.Size()
}
func (m *JoinPartyLeaderComm) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinPartyLeaderComm.DiscardUnknown(m)
}

var xxx_messageInfo_JoinPartyLeaderComm proto.InternalMessageInfo

func (m *JoinPartyLeaderComm) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *JoinPartyLeaderComm) GetMsgType() string {
	if m != nil {
		return m.MsgType
	}
	return ""
}

func (m *JoinPartyLeaderComm) GetType() JoinPartyLeaderComm_ResponseType {
	if m != nil {
		return m.Type
	}
	return JoinPartyLeaderComm_Unknown
}

func (m *JoinPartyLeaderComm) GetPeerIDs() []string {
	if m != nil {
		return m.PeerIDs
	}
	return nil
}

func init() {
	proto.RegisterEnum("bifrost.p2p.messages.JoinPartyLeaderComm_ResponseType", JoinPartyLeaderComm_ResponseType_name, JoinPartyLeaderComm_ResponseType_value)
	proto.RegisterType((*JoinPartyRequest)(nil), "bifrost.p2p.messages.JoinPartyRequest")
	proto.RegisterType((*JoinPartyLeaderComm)(nil), "bifrost.p2p.messages.JoinPartyLeaderComm")
}

func init() {
	proto.RegisterFile("bifrost/p2p/messages/join_party.proto", fileDescriptor_727397ef7e12a4dc)
}

var fileDescriptor_727397ef7e12a4dc = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x4f, 0xf2, 0x30,
	0x1c, 0xc6, 0xd7, 0x41, 0x5e, 0xf2, 0x16, 0x83, 0x4b, 0xf5, 0xb0, 0xd3, 0x42, 0x96, 0x98, 0x70,
	0xea, 0x12, 0x48, 0x3c, 0x1b, 0xe5, 0x02, 0x51, 0x43, 0x26, 0x5e, 0xb8, 0x98, 0x31, 0xfe, 0xc2,
	0x94, 0xf5, 0x5f, 0xd7, 0x4e, 0xb2, 0xa3, 0xdf, 0xc0, 0x8f, 0xe5, 0x91, 0xa3, 0x47, 0x03, 0x5f,
	0xc4, 0x74, 0x02, 0x31, 0x66, 0xc7, 0xe7, 0xc9, 0xaf, 0xcf, 0xaf, 0x69, 0xe9, 0xd9, 0x34, 0x79,
	0xcc, 0x50, 0xe9, 0x40, 0x76, 0x65, 0x90, 0x82, 0x52, 0xd1, 0x1c, 0x54, 0xf0, 0x84, 0x89, 0x78,
	0x90, 0x51, 0xa6, 0x0b, 0x2e, 0x33, 0xd4, 0xc8, 0x4e, 0x77, 0x18, 0x97, 0x5d, 0xc9, 0xf7, 0x98,
	0xef, 0x53, 0x67, 0x88, 0x89, 0x18, 0x19, 0x30, 0x84, 0x97, 0x1c, 0x94, 0x66, 0x2d, 0x6a, 0x0f,
	0xfa, 0x2e, 0x69, 0x93, 0xce, 0xff, 0xd0, 0x1e, 0xf4, 0xfd, 0x37, 0x9b, 0x9e, 0x1c, 0xa0, 0x6b,
	0x88, 0x66, 0x90, 0x5d, 0x61, 0x9a, 0xfe, 0xe5, 0x98, 0x4b, 0x1b, 0x37, 0x6a, 0x3e, 0x2e, 0x24,
	0xb8, 0x76, 0x59, 0xee, 0x23, 0x1b, 0xd2, 0xba, 0x36, 0x75, 0xad, 0x4d, 0x3a, 0xad, 0xee, 0x39,
	0xaf, 0xba, 0x0a, 0xaf, 0x50, 0xf0, 0x10, 0x94, 0x44, 0xa1, 0xc0, 0xac, 0x84, 0xe5, 0x86, 0xb1,
	0x8c, 0x00, 0xb2, 0x41, 0x5f, 0xb9, 0xf5, 0x76, 0xcd, 0x58, 0x76, 0xd1, 0x9f, 0xd0, 0xa3, 0xdf,
	0x3c, 0x6b, 0xd2, 0xc6, 0xbd, 0x78, 0x16, 0xb8, 0x12, 0x8e, 0x65, 0xc2, 0x5d, 0x1e, 0xc7, 0xa0,
	0x94, 0x43, 0x4c, 0x18, 0x27, 0x29, 0x60, 0xae, 0x1d, 0x9b, 0x31, 0xda, 0xfa, 0x31, 0xde, 0xa2,
	0x0e, 0x21, 0x9a, 0x15, 0x4e, 0x8d, 0x1d, 0xd3, 0xe6, 0xee, 0xa8, 0x19, 0x77, 0xea, 0x97, 0x93,
	0x8f, 0x8d, 0x47, 0xd6, 0x1b, 0x8f, 0x7c, 0x6d, 0x3c, 0xf2, 0xbe, 0xf5, 0xac, 0xf5, 0xd6, 0xb3,
	0x3e, 0xb7, 0x9e, 0x35, 0xb9, 0x98, 0x27, 0x7a, 0x91, 0x4f, 0x79, 0x8c, 0x69, 0xa0, 0x56, 0x89,
	0x8e, 0x17, 0xcb, 0xa2, 0x7c, 0xf1, 0x18, 0x97, 0x87, 0x42, 0xe0, 0x0c, 0x82, 0xd7, 0x5e, 0x50,
	0xf5, 0x55, 0xd3, 0x7f, 0x25, 0xde, 0xfb, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x32, 0x8a, 0x3f, 0x4a,
	0xc9, 0x01, 0x00, 0x00,
}

func (m *JoinPartyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinPartyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinPartyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintJoinParty(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JoinPartyLeaderComm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinPartyLeaderComm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinPartyLeaderComm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeerIDs) > 0 {
		for iNdEx := len(m.PeerIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PeerIDs[iNdEx])
			copy(dAtA[i:], m.PeerIDs[iNdEx])
			i = encodeVarintJoinParty(dAtA, i, uint64(len(m.PeerIDs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Type != 0 {
		i = encodeVarintJoinParty(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MsgType) > 0 {
		i -= len(m.MsgType)
		copy(dAtA[i:], m.MsgType)
		i = encodeVarintJoinParty(dAtA, i, uint64(len(m.MsgType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintJoinParty(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintJoinParty(dAtA []byte, offset int, v uint64) int {
	offset -= sovJoinParty(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JoinPartyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovJoinParty(uint64(l))
	}
	return n
}

func (m *JoinPartyLeaderComm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovJoinParty(uint64(l))
	}
	l = len(m.MsgType)
	if l > 0 {
		n += 1 + l + sovJoinParty(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovJoinParty(uint64(m.Type))
	}
	if len(m.PeerIDs) > 0 {
		for _, s := range m.PeerIDs {
			l = len(s)
			n += 1 + l + sovJoinParty(uint64(l))
		}
	}
	return n
}

func sovJoinParty(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozJoinParty(x uint64) (n int) {
	return sovJoinParty(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JoinPartyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJoinParty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinPartyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinPartyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJoinParty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJoinParty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJoinParty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJoinParty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinPartyLeaderComm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJoinParty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinPartyLeaderComm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinPartyLeaderComm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJoinParty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJoinParty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJoinParty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJoinParty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= JoinPartyLeaderComm_ResponseType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinParty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJoinParty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJoinParty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerIDs = append(m.PeerIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJoinParty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJoinParty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJoinParty(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJoinParty
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJoinParty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJoinParty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJoinParty
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJoinParty
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJoinParty
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJoinParty        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJoinParty          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJoinParty = fmt.Errorf("proto: unexpected end of group")
)
