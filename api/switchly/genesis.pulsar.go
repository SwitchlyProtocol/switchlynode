// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package switchly

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	common "github.com/switchlyprotocol/switchlynode/v3/api/common"
	types "github.com/switchlyprotocol/switchlynode/v3/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_LastChainHeight        protoreflect.MessageDescriptor
	fd_LastChainHeight_chain  protoreflect.FieldDescriptor
	fd_LastChainHeight_height protoreflect.FieldDescriptor
)

func init() {
	file_switchly_genesis_proto_init()
	md_LastChainHeight = File_switchly_genesis_proto.Messages().ByName("lastChainHeight")
	fd_LastChainHeight_chain = md_LastChainHeight.Fields().ByName("chain")
	fd_LastChainHeight_height = md_LastChainHeight.Fields().ByName("height")
}

var _ protoreflect.Message = (*fastReflection_LastChainHeight)(nil)

type fastReflection_LastChainHeight LastChainHeight

func (x *LastChainHeight) ProtoReflect() protoreflect.Message {
	return (*fastReflection_LastChainHeight)(x)
}

func (x *LastChainHeight) slowProtoReflect() protoreflect.Message {
	mi := &file_switchly_genesis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_LastChainHeight_messageType fastReflection_LastChainHeight_messageType
var _ protoreflect.MessageType = fastReflection_LastChainHeight_messageType{}

type fastReflection_LastChainHeight_messageType struct{}

func (x fastReflection_LastChainHeight_messageType) Zero() protoreflect.Message {
	return (*fastReflection_LastChainHeight)(nil)
}
func (x fastReflection_LastChainHeight_messageType) New() protoreflect.Message {
	return new(fastReflection_LastChainHeight)
}
func (x fastReflection_LastChainHeight_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_LastChainHeight
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_LastChainHeight) Descriptor() protoreflect.MessageDescriptor {
	return md_LastChainHeight
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_LastChainHeight) Type() protoreflect.MessageType {
	return _fastReflection_LastChainHeight_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_LastChainHeight) New() protoreflect.Message {
	return new(fastReflection_LastChainHeight)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_LastChainHeight) Interface() protoreflect.ProtoMessage {
	return (*LastChainHeight)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_LastChainHeight) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Chain != "" {
		value := protoreflect.ValueOfString(x.Chain)
		if !f(fd_LastChainHeight_chain, value) {
			return
		}
	}
	if x.Height != int64(0) {
		value := protoreflect.ValueOfInt64(x.Height)
		if !f(fd_LastChainHeight_height, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_LastChainHeight) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "switchly.lastChainHeight.chain":
		return x.Chain != ""
	case "switchly.lastChainHeight.height":
		return x.Height != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: switchly.lastChainHeight"))
		}
		panic(fmt.Errorf("message switchly.lastChainHeight does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LastChainHeight) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "switchly.lastChainHeight.chain":
		x.Chain = ""
	case "switchly.lastChainHeight.height":
		x.Height = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: switchly.lastChainHeight"))
		}
		panic(fmt.Errorf("message switchly.lastChainHeight does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_LastChainHeight) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "switchly.lastChainHeight.chain":
		value := x.Chain
		return protoreflect.ValueOfString(value)
	case "switchly.lastChainHeight.height":
		value := x.Height
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: switchly.lastChainHeight"))
		}
		panic(fmt.Errorf("message switchly.lastChainHeight does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LastChainHeight) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "switchly.lastChainHeight.chain":
		x.Chain = value.Interface().(string)
	case "switchly.lastChainHeight.height":
		x.Height = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: switchly.lastChainHeight"))
		}
		panic(fmt.Errorf("message switchly.lastChainHeight does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LastChainHeight) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "switchly.lastChainHeight.chain":
		panic(fmt.Errorf("field chain of message switchly.lastChainHeight is not mutable"))
	case "switchly.lastChainHeight.height":
		panic(fmt.Errorf("field height of message switchly.lastChainHeight is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: switchly.lastChainHeight"))
		}
		panic(fmt.Errorf("message switchly.lastChainHeight does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_LastChainHeight) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "switchly.lastChainHeight.chain":
		return protoreflect.ValueOfString("")
	case "switchly.lastChainHeight.height":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: switchly.lastChainHeight"))
		}
		panic(fmt.Errorf("message switchly.lastChainHeight does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_LastChainHeight) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in switchly.lastChainHeight", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_LastChainHeight) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LastChainHeight) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_LastChainHeight) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_LastChainHeight) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*LastChainHeight)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Chain)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Height != 0 {
			n += 1 + runtime.Sov(uint64(x.Height))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*LastChainHeight)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Height != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Height))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Chain) > 0 {
			i -= len(x.Chain)
			copy(dAtA[i:], x.Chain)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Chain)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*LastChainHeight)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LastChainHeight: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LastChainHeight: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Chain = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
				}
				x.Height = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Height |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Mimir       protoreflect.MessageDescriptor
	fd_Mimir_key   protoreflect.FieldDescriptor
	fd_Mimir_value protoreflect.FieldDescriptor
)

func init() {
	file_switchly_genesis_proto_init()
	md_Mimir = File_switchly_genesis_proto.Messages().ByName("mimir")
	fd_Mimir_key = md_Mimir.Fields().ByName("key")
	fd_Mimir_value = md_Mimir.Fields().ByName("value")
}

var _ protoreflect.Message = (*fastReflection_Mimir)(nil)

type fastReflection_Mimir Mimir

func (x *Mimir) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Mimir)(x)
}

func (x *Mimir) slowProtoReflect() protoreflect.Message {
	mi := &file_switchly_genesis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Mimir_messageType fastReflection_Mimir_messageType
var _ protoreflect.MessageType = fastReflection_Mimir_messageType{}

type fastReflection_Mimir_messageType struct{}

func (x fastReflection_Mimir_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Mimir)(nil)
}
func (x fastReflection_Mimir_messageType) New() protoreflect.Message {
	return new(fastReflection_Mimir)
}
func (x fastReflection_Mimir_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Mimir
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Mimir) Descriptor() protoreflect.MessageDescriptor {
	return md_Mimir
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Mimir) Type() protoreflect.MessageType {
	return _fastReflection_Mimir_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Mimir) New() protoreflect.Message {
	return new(fastReflection_Mimir)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Mimir) Interface() protoreflect.ProtoMessage {
	return (*Mimir)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Mimir) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Key != "" {
		value := protoreflect.ValueOfString(x.Key)
		if !f(fd_Mimir_key, value) {
			return
		}
	}
	if x.Value != int64(0) {
		value := protoreflect.ValueOfInt64(x.Value)
		if !f(fd_Mimir_value, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Mimir) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "switchly.mimir.key":
		return x.Key != ""
	case "switchly.mimir.value":
		return x.Value != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: switchly.mimir"))
		}
		panic(fmt.Errorf("message switchly.mimir does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Mimir) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "switchly.mimir.key":
		x.Key = ""
	case "switchly.mimir.value":
		x.Value = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: switchly.mimir"))
		}
		panic(fmt.Errorf("message switchly.mimir does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Mimir) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "switchly.mimir.key":
		value := x.Key
		return protoreflect.ValueOfString(value)
	case "switchly.mimir.value":
		value := x.Value
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: switchly.mimir"))
		}
		panic(fmt.Errorf("message switchly.mimir does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Mimir) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "switchly.mimir.key":
		x.Key = value.Interface().(string)
	case "switchly.mimir.value":
		x.Value = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: switchly.mimir"))
		}
		panic(fmt.Errorf("message switchly.mimir does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Mimir) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "switchly.mimir.key":
		panic(fmt.Errorf("field key of message switchly.mimir is not mutable"))
	case "switchly.mimir.value":
		panic(fmt.Errorf("field value of message switchly.mimir is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: switchly.mimir"))
		}
		panic(fmt.Errorf("message switchly.mimir does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Mimir) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "switchly.mimir.key":
		return protoreflect.ValueOfString("")
	case "switchly.mimir.value":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: switchly.mimir"))
		}
		panic(fmt.Errorf("message switchly.mimir does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Mimir) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in switchly.mimir", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Mimir) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Mimir) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Mimir) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Mimir) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Mimir)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Key)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Value != 0 {
			n += 1 + runtime.Sov(uint64(x.Value))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Mimir)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Value != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Value))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Key) > 0 {
			i -= len(x.Key)
			copy(dAtA[i:], x.Key)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Key)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Mimir)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Mimir: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Mimir: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Key = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
				}
				x.Value = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Value |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_GenesisState_1_list)(nil)

type _GenesisState_1_list struct {
	list *[]*types.Pool
}

func (x *_GenesisState_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.Pool)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.Pool)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_1_list) AppendMutable() protoreflect.Value {
	v := new(types.Pool)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_1_list) NewElement() protoreflect.Value {
	v := new(types.Pool)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_2_list)(nil)

type _GenesisState_2_list struct {
	list *[]*types.LiquidityProvider
}

func (x *_GenesisState_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.LiquidityProvider)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.LiquidityProvider)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_2_list) AppendMutable() protoreflect.Value {
	v := new(types.LiquidityProvider)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_2_list) NewElement() protoreflect.Value {
	v := new(types.LiquidityProvider)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_3_list)(nil)

type _GenesisState_3_list struct {
	list *[]*types.ObservedTxVoter
}

func (x *_GenesisState_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.ObservedTxVoter)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.ObservedTxVoter)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_3_list) AppendMutable() protoreflect.Value {
	v := new(types.ObservedTxVoter)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_3_list) NewElement() protoreflect.Value {
	v := new(types.ObservedTxVoter)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_4_list)(nil)

type _GenesisState_4_list struct {
	list *[]*types.ObservedTxVoter
}

func (x *_GenesisState_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.ObservedTxVoter)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.ObservedTxVoter)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_4_list) AppendMutable() protoreflect.Value {
	v := new(types.ObservedTxVoter)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_4_list) NewElement() protoreflect.Value {
	v := new(types.ObservedTxVoter)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_5_list)(nil)

type _GenesisState_5_list struct {
	list *[]*types.TxOut
}

func (x *_GenesisState_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.TxOut)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.TxOut)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_5_list) AppendMutable() protoreflect.Value {
	v := new(types.TxOut)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_5_list) NewElement() protoreflect.Value {
	v := new(types.TxOut)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_6_list)(nil)

type _GenesisState_6_list struct {
	list *[]*types.NodeAccount
}

func (x *_GenesisState_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.NodeAccount)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.NodeAccount)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_6_list) AppendMutable() protoreflect.Value {
	v := new(types.NodeAccount)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_6_list) NewElement() protoreflect.Value {
	v := new(types.NodeAccount)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_6_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_7_list)(nil)

type _GenesisState_7_list struct {
	list *[]*types.Vault
}

func (x *_GenesisState_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.Vault)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.Vault)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_7_list) AppendMutable() protoreflect.Value {
	v := new(types.Vault)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_7_list) NewElement() protoreflect.Value {
	v := new(types.Vault)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_7_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_11_list)(nil)

type _GenesisState_11_list struct {
	list *[]*LastChainHeight
}

func (x *_GenesisState_11_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_11_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_11_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*LastChainHeight)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_11_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*LastChainHeight)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_11_list) AppendMutable() protoreflect.Value {
	v := new(LastChainHeight)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_11_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_11_list) NewElement() protoreflect.Value {
	v := new(LastChainHeight)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_11_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_12_list)(nil)

type _GenesisState_12_list struct {
	list *[]*types.ReserveContributor
}

func (x *_GenesisState_12_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_12_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_12_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.ReserveContributor)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_12_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.ReserveContributor)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_12_list) AppendMutable() protoreflect.Value {
	v := new(types.ReserveContributor)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_12_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_12_list) NewElement() protoreflect.Value {
	v := new(types.ReserveContributor)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_12_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_19_list)(nil)

type _GenesisState_19_list struct {
	list *[]*types.MsgSwap
}

func (x *_GenesisState_19_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_19_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_19_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.MsgSwap)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_19_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.MsgSwap)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_19_list) AppendMutable() protoreflect.Value {
	v := new(types.MsgSwap)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_19_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_19_list) NewElement() protoreflect.Value {
	v := new(types.MsgSwap)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_19_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_20_list)(nil)

type _GenesisState_20_list struct {
	list *[]*types.NetworkFee
}

func (x *_GenesisState_20_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_20_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_20_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.NetworkFee)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_20_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.NetworkFee)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_20_list) AppendMutable() protoreflect.Value {
	v := new(types.NetworkFee)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_20_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_20_list) NewElement() protoreflect.Value {
	v := new(types.NetworkFee)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_20_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_22_list)(nil)

type _GenesisState_22_list struct {
	list *[]*types.ChainContract
}

func (x *_GenesisState_22_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_22_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_22_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.ChainContract)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_22_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.ChainContract)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_22_list) AppendMutable() protoreflect.Value {
	v := new(types.ChainContract)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_22_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_22_list) NewElement() protoreflect.Value {
	v := new(types.ChainContract)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_22_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_23_list)(nil)

type _GenesisState_23_list struct {
	list *[]*types.SWITCHName
}

func (x *_GenesisState_23_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_23_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_23_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.SWITCHName)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_23_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.SWITCHName)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_23_list) AppendMutable() protoreflect.Value {
	v := new(types.SWITCHName)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_23_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_23_list) NewElement() protoreflect.Value {
	v := new(types.SWITCHName)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_23_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_24_list)(nil)

type _GenesisState_24_list struct {
	list *[]*Mimir
}

func (x *_GenesisState_24_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_24_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_24_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Mimir)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_24_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Mimir)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_24_list) AppendMutable() protoreflect.Value {
	v := new(Mimir)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_24_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_24_list) NewElement() protoreflect.Value {
	v := new(Mimir)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_24_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_26_list)(nil)

type _GenesisState_26_list struct {
	list *[]*types.BondProviders
}

func (x *_GenesisState_26_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_26_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_26_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.BondProviders)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_26_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.BondProviders)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_26_list) AppendMutable() protoreflect.Value {
	v := new(types.BondProviders)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_26_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_26_list) NewElement() protoreflect.Value {
	v := new(types.BondProviders)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_26_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_28_list)(nil)

type _GenesisState_28_list struct {
	list *[]*types.Loan
}

func (x *_GenesisState_28_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_28_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_28_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.Loan)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_28_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.Loan)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_28_list) AppendMutable() protoreflect.Value {
	v := new(types.Loan)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_28_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_28_list) NewElement() protoreflect.Value {
	v := new(types.Loan)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_28_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_29_list)(nil)

type _GenesisState_29_list struct {
	list *[]*types.StreamingSwap
}

func (x *_GenesisState_29_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_29_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_29_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.StreamingSwap)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_29_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.StreamingSwap)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_29_list) AppendMutable() protoreflect.Value {
	v := new(types.StreamingSwap)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_29_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_29_list) NewElement() protoreflect.Value {
	v := new(types.StreamingSwap)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_29_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_30_list)(nil)

type _GenesisState_30_list struct {
	list *[]*types.MsgSwap
}

func (x *_GenesisState_30_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_30_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_30_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.MsgSwap)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_30_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.MsgSwap)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_30_list) AppendMutable() protoreflect.Value {
	v := new(types.MsgSwap)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_30_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_30_list) NewElement() protoreflect.Value {
	v := new(types.MsgSwap)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_30_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_31_list)(nil)

type _GenesisState_31_list struct {
	list *[]*types.SwapperClout
}

func (x *_GenesisState_31_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_31_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_31_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.SwapperClout)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_31_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.SwapperClout)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_31_list) AppendMutable() protoreflect.Value {
	v := new(types.SwapperClout)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_31_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_31_list) NewElement() protoreflect.Value {
	v := new(types.SwapperClout)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_31_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_32_list)(nil)

type _GenesisState_32_list struct {
	list *[]*types.TradeAccount
}

func (x *_GenesisState_32_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_32_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_32_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.TradeAccount)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_32_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.TradeAccount)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_32_list) AppendMutable() protoreflect.Value {
	v := new(types.TradeAccount)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_32_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_32_list) NewElement() protoreflect.Value {
	v := new(types.TradeAccount)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_32_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_33_list)(nil)

type _GenesisState_33_list struct {
	list *[]*types.TradeUnit
}

func (x *_GenesisState_33_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_33_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_33_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.TradeUnit)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_33_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.TradeUnit)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_33_list) AppendMutable() protoreflect.Value {
	v := new(types.TradeUnit)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_33_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_33_list) NewElement() protoreflect.Value {
	v := new(types.TradeUnit)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_33_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_34_list)(nil)

type _GenesisState_34_list struct {
	list *[]*common.Coin
}

func (x *_GenesisState_34_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_34_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_34_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*common.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_34_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*common.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_34_list) AppendMutable() protoreflect.Value {
	v := new(common.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_34_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_34_list) NewElement() protoreflect.Value {
	v := new(common.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_34_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_35_list)(nil)

type _GenesisState_35_list struct {
	list *[]*common.Coin
}

func (x *_GenesisState_35_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_35_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_35_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*common.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_35_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*common.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_35_list) AppendMutable() protoreflect.Value {
	v := new(common.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_35_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_35_list) NewElement() protoreflect.Value {
	v := new(common.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_35_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_36_list)(nil)

type _GenesisState_36_list struct {
	list *[]*types.SWITCHProvider
}

func (x *_GenesisState_36_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_36_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_36_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.SWITCHProvider)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_36_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.SWITCHProvider)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_36_list) AppendMutable() protoreflect.Value {
	v := new(types.SWITCHProvider)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_36_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_36_list) NewElement() protoreflect.Value {
	v := new(types.SWITCHProvider)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_36_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_38_list)(nil)

type _GenesisState_38_list struct {
	list *[]*types.NodeMimir
}

func (x *_GenesisState_38_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_38_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_38_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.NodeMimir)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_38_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.NodeMimir)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_38_list) AppendMutable() protoreflect.Value {
	v := new(types.NodeMimir)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_38_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_38_list) NewElement() protoreflect.Value {
	v := new(types.NodeMimir)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_38_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_39_list)(nil)

type _GenesisState_39_list struct {
	list *[]*types.AffiliateFeeCollector
}

func (x *_GenesisState_39_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_39_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_39_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.AffiliateFeeCollector)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_39_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.AffiliateFeeCollector)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_39_list) AppendMutable() protoreflect.Value {
	v := new(types.AffiliateFeeCollector)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_39_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_39_list) NewElement() protoreflect.Value {
	v := new(types.AffiliateFeeCollector)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_39_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_40_list)(nil)

type _GenesisState_40_list struct {
	list *[]*common.Coin
}

func (x *_GenesisState_40_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_40_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_40_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*common.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_40_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*common.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_40_list) AppendMutable() protoreflect.Value {
	v := new(common.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_40_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_40_list) NewElement() protoreflect.Value {
	v := new(common.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_40_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_41_list)(nil)

type _GenesisState_41_list struct {
	list *[]*types.SecuredAsset
}

func (x *_GenesisState_41_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_41_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_41_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.SecuredAsset)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_41_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.SecuredAsset)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_41_list) AppendMutable() protoreflect.Value {
	v := new(types.SecuredAsset)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_41_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_41_list) NewElement() protoreflect.Value {
	v := new(types.SecuredAsset)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_41_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_42_list)(nil)

type _GenesisState_42_list struct {
	list *[]*types.SWCYClaimer
}

func (x *_GenesisState_42_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_42_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_42_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.SWCYClaimer)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_42_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.SWCYClaimer)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_42_list) AppendMutable() protoreflect.Value {
	v := new(types.SWCYClaimer)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_42_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_42_list) NewElement() protoreflect.Value {
	v := new(types.SWCYClaimer)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_42_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_43_list)(nil)

type _GenesisState_43_list struct {
	list *[]*types.SWCYStaker
}

func (x *_GenesisState_43_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_43_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_43_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.SWCYStaker)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_43_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*types.SWCYStaker)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_43_list) AppendMutable() protoreflect.Value {
	v := new(types.SWCYStaker)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_43_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_43_list) NewElement() protoreflect.Value {
	v := new(types.SWCYStaker)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_43_list) IsValid() bool {
	return x.list != nil
}

var (
	md_GenesisState                              protoreflect.MessageDescriptor
	fd_GenesisState_pools                        protoreflect.FieldDescriptor
	fd_GenesisState_liquidity_providers          protoreflect.FieldDescriptor
	fd_GenesisState_observed_tx_in_voters        protoreflect.FieldDescriptor
	fd_GenesisState_observed_tx_out_voters       protoreflect.FieldDescriptor
	fd_GenesisState_tx_outs                      protoreflect.FieldDescriptor
	fd_GenesisState_node_accounts                protoreflect.FieldDescriptor
	fd_GenesisState_vaults                       protoreflect.FieldDescriptor
	fd_GenesisState_reserve                      protoreflect.FieldDescriptor
	fd_GenesisState_last_signed_height           protoreflect.FieldDescriptor
	fd_GenesisState_last_chain_heights           protoreflect.FieldDescriptor
	fd_GenesisState_reserve_contributors         protoreflect.FieldDescriptor
	fd_GenesisState_network                      protoreflect.FieldDescriptor
	fd_GenesisState_adv_swap_queue_items         protoreflect.FieldDescriptor
	fd_GenesisState_network_fees                 protoreflect.FieldDescriptor
	fd_GenesisState_chain_contracts              protoreflect.FieldDescriptor
	fd_GenesisState_SWITCHNames                  protoreflect.FieldDescriptor
	fd_GenesisState_mimirs                       protoreflect.FieldDescriptor
	fd_GenesisState_store_version                protoreflect.FieldDescriptor
	fd_GenesisState_bond_providers               protoreflect.FieldDescriptor
	fd_GenesisState_POL                          protoreflect.FieldDescriptor
	fd_GenesisState_loans                        protoreflect.FieldDescriptor
	fd_GenesisState_streaming_swaps              protoreflect.FieldDescriptor
	fd_GenesisState_swap_queue_items             protoreflect.FieldDescriptor
	fd_GenesisState_swapper_clout                protoreflect.FieldDescriptor
	fd_GenesisState_trade_accounts               protoreflect.FieldDescriptor
	fd_GenesisState_trade_units                  protoreflect.FieldDescriptor
	fd_GenesisState_outbound_fee_withheld_switch protoreflect.FieldDescriptor
	fd_GenesisState_outbound_fee_spent_switch    protoreflect.FieldDescriptor
	fd_GenesisState_switch_providers             protoreflect.FieldDescriptor
	fd_GenesisState_switch_pool                  protoreflect.FieldDescriptor
	fd_GenesisState_nodeMimirs                   protoreflect.FieldDescriptor
	fd_GenesisState_affiliate_collectors         protoreflect.FieldDescriptor
	fd_GenesisState_loan_total_collateral        protoreflect.FieldDescriptor
	fd_GenesisState_secured_assets               protoreflect.FieldDescriptor
	fd_GenesisState_swcy_claimers                protoreflect.FieldDescriptor
	fd_GenesisState_swcy_stakers                 protoreflect.FieldDescriptor
)

func init() {
	file_switchly_genesis_proto_init()
	md_GenesisState = File_switchly_genesis_proto.Messages().ByName("GenesisState")
	fd_GenesisState_pools = md_GenesisState.Fields().ByName("pools")
	fd_GenesisState_liquidity_providers = md_GenesisState.Fields().ByName("liquidity_providers")
	fd_GenesisState_observed_tx_in_voters = md_GenesisState.Fields().ByName("observed_tx_in_voters")
	fd_GenesisState_observed_tx_out_voters = md_GenesisState.Fields().ByName("observed_tx_out_voters")
	fd_GenesisState_tx_outs = md_GenesisState.Fields().ByName("tx_outs")
	fd_GenesisState_node_accounts = md_GenesisState.Fields().ByName("node_accounts")
	fd_GenesisState_vaults = md_GenesisState.Fields().ByName("vaults")
	fd_GenesisState_reserve = md_GenesisState.Fields().ByName("reserve")
	fd_GenesisState_last_signed_height = md_GenesisState.Fields().ByName("last_signed_height")
	fd_GenesisState_last_chain_heights = md_GenesisState.Fields().ByName("last_chain_heights")
	fd_GenesisState_reserve_contributors = md_GenesisState.Fields().ByName("reserve_contributors")
	fd_GenesisState_network = md_GenesisState.Fields().ByName("network")
	fd_GenesisState_adv_swap_queue_items = md_GenesisState.Fields().ByName("adv_swap_queue_items")
	fd_GenesisState_network_fees = md_GenesisState.Fields().ByName("network_fees")
	fd_GenesisState_chain_contracts = md_GenesisState.Fields().ByName("chain_contracts")
	fd_GenesisState_SWITCHNames = md_GenesisState.Fields().ByName("SWITCHNames")
	fd_GenesisState_mimirs = md_GenesisState.Fields().ByName("mimirs")
	fd_GenesisState_store_version = md_GenesisState.Fields().ByName("store_version")
	fd_GenesisState_bond_providers = md_GenesisState.Fields().ByName("bond_providers")
	fd_GenesisState_POL = md_GenesisState.Fields().ByName("POL")
	fd_GenesisState_loans = md_GenesisState.Fields().ByName("loans")
	fd_GenesisState_streaming_swaps = md_GenesisState.Fields().ByName("streaming_swaps")
	fd_GenesisState_swap_queue_items = md_GenesisState.Fields().ByName("swap_queue_items")
	fd_GenesisState_swapper_clout = md_GenesisState.Fields().ByName("swapper_clout")
	fd_GenesisState_trade_accounts = md_GenesisState.Fields().ByName("trade_accounts")
	fd_GenesisState_trade_units = md_GenesisState.Fields().ByName("trade_units")
	fd_GenesisState_outbound_fee_withheld_switch = md_GenesisState.Fields().ByName("outbound_fee_withheld_switch")
	fd_GenesisState_outbound_fee_spent_switch = md_GenesisState.Fields().ByName("outbound_fee_spent_switch")
	fd_GenesisState_switch_providers = md_GenesisState.Fields().ByName("switch_providers")
	fd_GenesisState_switch_pool = md_GenesisState.Fields().ByName("switch_pool")
	fd_GenesisState_nodeMimirs = md_GenesisState.Fields().ByName("nodeMimirs")
	fd_GenesisState_affiliate_collectors = md_GenesisState.Fields().ByName("affiliate_collectors")
	fd_GenesisState_loan_total_collateral = md_GenesisState.Fields().ByName("loan_total_collateral")
	fd_GenesisState_secured_assets = md_GenesisState.Fields().ByName("secured_assets")
	fd_GenesisState_swcy_claimers = md_GenesisState.Fields().ByName("swcy_claimers")
	fd_GenesisState_swcy_stakers = md_GenesisState.Fields().ByName("swcy_stakers")
}

var _ protoreflect.Message = (*fastReflection_GenesisState)(nil)

type fastReflection_GenesisState GenesisState

func (x *GenesisState) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GenesisState)(x)
}

func (x *GenesisState) slowProtoReflect() protoreflect.Message {
	mi := &file_switchly_genesis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GenesisState_messageType fastReflection_GenesisState_messageType
var _ protoreflect.MessageType = fastReflection_GenesisState_messageType{}

type fastReflection_GenesisState_messageType struct{}

func (x fastReflection_GenesisState_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GenesisState)(nil)
}
func (x fastReflection_GenesisState_messageType) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}
func (x fastReflection_GenesisState_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GenesisState) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GenesisState) Type() protoreflect.MessageType {
	return _fastReflection_GenesisState_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GenesisState) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GenesisState) Interface() protoreflect.ProtoMessage {
	return (*GenesisState)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GenesisState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Pools) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_1_list{list: &x.Pools})
		if !f(fd_GenesisState_pools, value) {
			return
		}
	}
	if len(x.LiquidityProviders) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_2_list{list: &x.LiquidityProviders})
		if !f(fd_GenesisState_liquidity_providers, value) {
			return
		}
	}
	if len(x.ObservedTxInVoters) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_3_list{list: &x.ObservedTxInVoters})
		if !f(fd_GenesisState_observed_tx_in_voters, value) {
			return
		}
	}
	if len(x.ObservedTxOutVoters) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_4_list{list: &x.ObservedTxOutVoters})
		if !f(fd_GenesisState_observed_tx_out_voters, value) {
			return
		}
	}
	if len(x.TxOuts) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_5_list{list: &x.TxOuts})
		if !f(fd_GenesisState_tx_outs, value) {
			return
		}
	}
	if len(x.NodeAccounts) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_6_list{list: &x.NodeAccounts})
		if !f(fd_GenesisState_node_accounts, value) {
			return
		}
	}
	if len(x.Vaults) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_7_list{list: &x.Vaults})
		if !f(fd_GenesisState_vaults, value) {
			return
		}
	}
	if x.Reserve != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Reserve)
		if !f(fd_GenesisState_reserve, value) {
			return
		}
	}
	if x.LastSignedHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.LastSignedHeight)
		if !f(fd_GenesisState_last_signed_height, value) {
			return
		}
	}
	if len(x.LastChainHeights) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_11_list{list: &x.LastChainHeights})
		if !f(fd_GenesisState_last_chain_heights, value) {
			return
		}
	}
	if len(x.ReserveContributors) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_12_list{list: &x.ReserveContributors})
		if !f(fd_GenesisState_reserve_contributors, value) {
			return
		}
	}
	if x.Network != nil {
		value := protoreflect.ValueOfMessage(x.Network.ProtoReflect())
		if !f(fd_GenesisState_network, value) {
			return
		}
	}
	if len(x.AdvSwapQueueItems) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_19_list{list: &x.AdvSwapQueueItems})
		if !f(fd_GenesisState_adv_swap_queue_items, value) {
			return
		}
	}
	if len(x.NetworkFees) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_20_list{list: &x.NetworkFees})
		if !f(fd_GenesisState_network_fees, value) {
			return
		}
	}
	if len(x.ChainContracts) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_22_list{list: &x.ChainContracts})
		if !f(fd_GenesisState_chain_contracts, value) {
			return
		}
	}
	if len(x.SWITCHNames) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_23_list{list: &x.SWITCHNames})
		if !f(fd_GenesisState_SWITCHNames, value) {
			return
		}
	}
	if len(x.Mimirs) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_24_list{list: &x.Mimirs})
		if !f(fd_GenesisState_mimirs, value) {
			return
		}
	}
	if x.StoreVersion != int64(0) {
		value := protoreflect.ValueOfInt64(x.StoreVersion)
		if !f(fd_GenesisState_store_version, value) {
			return
		}
	}
	if len(x.BondProviders) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_26_list{list: &x.BondProviders})
		if !f(fd_GenesisState_bond_providers, value) {
			return
		}
	}
	if x.POL != nil {
		value := protoreflect.ValueOfMessage(x.POL.ProtoReflect())
		if !f(fd_GenesisState_POL, value) {
			return
		}
	}
	if len(x.Loans) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_28_list{list: &x.Loans})
		if !f(fd_GenesisState_loans, value) {
			return
		}
	}
	if len(x.StreamingSwaps) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_29_list{list: &x.StreamingSwaps})
		if !f(fd_GenesisState_streaming_swaps, value) {
			return
		}
	}
	if len(x.SwapQueueItems) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_30_list{list: &x.SwapQueueItems})
		if !f(fd_GenesisState_swap_queue_items, value) {
			return
		}
	}
	if len(x.SwapperClout) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_31_list{list: &x.SwapperClout})
		if !f(fd_GenesisState_swapper_clout, value) {
			return
		}
	}
	if len(x.TradeAccounts) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_32_list{list: &x.TradeAccounts})
		if !f(fd_GenesisState_trade_accounts, value) {
			return
		}
	}
	if len(x.TradeUnits) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_33_list{list: &x.TradeUnits})
		if !f(fd_GenesisState_trade_units, value) {
			return
		}
	}
	if len(x.OutboundFeeWithheldSwitch) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_34_list{list: &x.OutboundFeeWithheldSwitch})
		if !f(fd_GenesisState_outbound_fee_withheld_switch, value) {
			return
		}
	}
	if len(x.OutboundFeeSpentSwitch) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_35_list{list: &x.OutboundFeeSpentSwitch})
		if !f(fd_GenesisState_outbound_fee_spent_switch, value) {
			return
		}
	}
	if len(x.SwitchProviders) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_36_list{list: &x.SwitchProviders})
		if !f(fd_GenesisState_switch_providers, value) {
			return
		}
	}
	if x.SwitchPool != nil {
		value := protoreflect.ValueOfMessage(x.SwitchPool.ProtoReflect())
		if !f(fd_GenesisState_switch_pool, value) {
			return
		}
	}
	if len(x.NodeMimirs) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_38_list{list: &x.NodeMimirs})
		if !f(fd_GenesisState_nodeMimirs, value) {
			return
		}
	}
	if len(x.AffiliateCollectors) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_39_list{list: &x.AffiliateCollectors})
		if !f(fd_GenesisState_affiliate_collectors, value) {
			return
		}
	}
	if len(x.LoanTotalCollateral) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_40_list{list: &x.LoanTotalCollateral})
		if !f(fd_GenesisState_loan_total_collateral, value) {
			return
		}
	}
	if len(x.SecuredAssets) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_41_list{list: &x.SecuredAssets})
		if !f(fd_GenesisState_secured_assets, value) {
			return
		}
	}
	if len(x.SwcyClaimers) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_42_list{list: &x.SwcyClaimers})
		if !f(fd_GenesisState_swcy_claimers, value) {
			return
		}
	}
	if len(x.SwcyStakers) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_43_list{list: &x.SwcyStakers})
		if !f(fd_GenesisState_swcy_stakers, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GenesisState) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "switchly.GenesisState.pools":
		return len(x.Pools) != 0
	case "switchly.GenesisState.liquidity_providers":
		return len(x.LiquidityProviders) != 0
	case "switchly.GenesisState.observed_tx_in_voters":
		return len(x.ObservedTxInVoters) != 0
	case "switchly.GenesisState.observed_tx_out_voters":
		return len(x.ObservedTxOutVoters) != 0
	case "switchly.GenesisState.tx_outs":
		return len(x.TxOuts) != 0
	case "switchly.GenesisState.node_accounts":
		return len(x.NodeAccounts) != 0
	case "switchly.GenesisState.vaults":
		return len(x.Vaults) != 0
	case "switchly.GenesisState.reserve":
		return x.Reserve != uint64(0)
	case "switchly.GenesisState.last_signed_height":
		return x.LastSignedHeight != int64(0)
	case "switchly.GenesisState.last_chain_heights":
		return len(x.LastChainHeights) != 0
	case "switchly.GenesisState.reserve_contributors":
		return len(x.ReserveContributors) != 0
	case "switchly.GenesisState.network":
		return x.Network != nil
	case "switchly.GenesisState.adv_swap_queue_items":
		return len(x.AdvSwapQueueItems) != 0
	case "switchly.GenesisState.network_fees":
		return len(x.NetworkFees) != 0
	case "switchly.GenesisState.chain_contracts":
		return len(x.ChainContracts) != 0
	case "switchly.GenesisState.SWITCHNames":
		return len(x.SWITCHNames) != 0
	case "switchly.GenesisState.mimirs":
		return len(x.Mimirs) != 0
	case "switchly.GenesisState.store_version":
		return x.StoreVersion != int64(0)
	case "switchly.GenesisState.bond_providers":
		return len(x.BondProviders) != 0
	case "switchly.GenesisState.POL":
		return x.POL != nil
	case "switchly.GenesisState.loans":
		return len(x.Loans) != 0
	case "switchly.GenesisState.streaming_swaps":
		return len(x.StreamingSwaps) != 0
	case "switchly.GenesisState.swap_queue_items":
		return len(x.SwapQueueItems) != 0
	case "switchly.GenesisState.swapper_clout":
		return len(x.SwapperClout) != 0
	case "switchly.GenesisState.trade_accounts":
		return len(x.TradeAccounts) != 0
	case "switchly.GenesisState.trade_units":
		return len(x.TradeUnits) != 0
	case "switchly.GenesisState.outbound_fee_withheld_switch":
		return len(x.OutboundFeeWithheldSwitch) != 0
	case "switchly.GenesisState.outbound_fee_spent_switch":
		return len(x.OutboundFeeSpentSwitch) != 0
	case "switchly.GenesisState.switch_providers":
		return len(x.SwitchProviders) != 0
	case "switchly.GenesisState.switch_pool":
		return x.SwitchPool != nil
	case "switchly.GenesisState.nodeMimirs":
		return len(x.NodeMimirs) != 0
	case "switchly.GenesisState.affiliate_collectors":
		return len(x.AffiliateCollectors) != 0
	case "switchly.GenesisState.loan_total_collateral":
		return len(x.LoanTotalCollateral) != 0
	case "switchly.GenesisState.secured_assets":
		return len(x.SecuredAssets) != 0
	case "switchly.GenesisState.swcy_claimers":
		return len(x.SwcyClaimers) != 0
	case "switchly.GenesisState.swcy_stakers":
		return len(x.SwcyStakers) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: switchly.GenesisState"))
		}
		panic(fmt.Errorf("message switchly.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "switchly.GenesisState.pools":
		x.Pools = nil
	case "switchly.GenesisState.liquidity_providers":
		x.LiquidityProviders = nil
	case "switchly.GenesisState.observed_tx_in_voters":
		x.ObservedTxInVoters = nil
	case "switchly.GenesisState.observed_tx_out_voters":
		x.ObservedTxOutVoters = nil
	case "switchly.GenesisState.tx_outs":
		x.TxOuts = nil
	case "switchly.GenesisState.node_accounts":
		x.NodeAccounts = nil
	case "switchly.GenesisState.vaults":
		x.Vaults = nil
	case "switchly.GenesisState.reserve":
		x.Reserve = uint64(0)
	case "switchly.GenesisState.last_signed_height":
		x.LastSignedHeight = int64(0)
	case "switchly.GenesisState.last_chain_heights":
		x.LastChainHeights = nil
	case "switchly.GenesisState.reserve_contributors":
		x.ReserveContributors = nil
	case "switchly.GenesisState.network":
		x.Network = nil
	case "switchly.GenesisState.adv_swap_queue_items":
		x.AdvSwapQueueItems = nil
	case "switchly.GenesisState.network_fees":
		x.NetworkFees = nil
	case "switchly.GenesisState.chain_contracts":
		x.ChainContracts = nil
	case "switchly.GenesisState.SWITCHNames":
		x.SWITCHNames = nil
	case "switchly.GenesisState.mimirs":
		x.Mimirs = nil
	case "switchly.GenesisState.store_version":
		x.StoreVersion = int64(0)
	case "switchly.GenesisState.bond_providers":
		x.BondProviders = nil
	case "switchly.GenesisState.POL":
		x.POL = nil
	case "switchly.GenesisState.loans":
		x.Loans = nil
	case "switchly.GenesisState.streaming_swaps":
		x.StreamingSwaps = nil
	case "switchly.GenesisState.swap_queue_items":
		x.SwapQueueItems = nil
	case "switchly.GenesisState.swapper_clout":
		x.SwapperClout = nil
	case "switchly.GenesisState.trade_accounts":
		x.TradeAccounts = nil
	case "switchly.GenesisState.trade_units":
		x.TradeUnits = nil
	case "switchly.GenesisState.outbound_fee_withheld_switch":
		x.OutboundFeeWithheldSwitch = nil
	case "switchly.GenesisState.outbound_fee_spent_switch":
		x.OutboundFeeSpentSwitch = nil
	case "switchly.GenesisState.switch_providers":
		x.SwitchProviders = nil
	case "switchly.GenesisState.switch_pool":
		x.SwitchPool = nil
	case "switchly.GenesisState.nodeMimirs":
		x.NodeMimirs = nil
	case "switchly.GenesisState.affiliate_collectors":
		x.AffiliateCollectors = nil
	case "switchly.GenesisState.loan_total_collateral":
		x.LoanTotalCollateral = nil
	case "switchly.GenesisState.secured_assets":
		x.SecuredAssets = nil
	case "switchly.GenesisState.swcy_claimers":
		x.SwcyClaimers = nil
	case "switchly.GenesisState.swcy_stakers":
		x.SwcyStakers = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: switchly.GenesisState"))
		}
		panic(fmt.Errorf("message switchly.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GenesisState) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "switchly.GenesisState.pools":
		if len(x.Pools) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_1_list{})
		}
		listValue := &_GenesisState_1_list{list: &x.Pools}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.liquidity_providers":
		if len(x.LiquidityProviders) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_2_list{})
		}
		listValue := &_GenesisState_2_list{list: &x.LiquidityProviders}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.observed_tx_in_voters":
		if len(x.ObservedTxInVoters) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_3_list{})
		}
		listValue := &_GenesisState_3_list{list: &x.ObservedTxInVoters}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.observed_tx_out_voters":
		if len(x.ObservedTxOutVoters) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_4_list{})
		}
		listValue := &_GenesisState_4_list{list: &x.ObservedTxOutVoters}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.tx_outs":
		if len(x.TxOuts) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_5_list{})
		}
		listValue := &_GenesisState_5_list{list: &x.TxOuts}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.node_accounts":
		if len(x.NodeAccounts) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_6_list{})
		}
		listValue := &_GenesisState_6_list{list: &x.NodeAccounts}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.vaults":
		if len(x.Vaults) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_7_list{})
		}
		listValue := &_GenesisState_7_list{list: &x.Vaults}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.reserve":
		value := x.Reserve
		return protoreflect.ValueOfUint64(value)
	case "switchly.GenesisState.last_signed_height":
		value := x.LastSignedHeight
		return protoreflect.ValueOfInt64(value)
	case "switchly.GenesisState.last_chain_heights":
		if len(x.LastChainHeights) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_11_list{})
		}
		listValue := &_GenesisState_11_list{list: &x.LastChainHeights}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.reserve_contributors":
		if len(x.ReserveContributors) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_12_list{})
		}
		listValue := &_GenesisState_12_list{list: &x.ReserveContributors}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.network":
		value := x.Network
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "switchly.GenesisState.adv_swap_queue_items":
		if len(x.AdvSwapQueueItems) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_19_list{})
		}
		listValue := &_GenesisState_19_list{list: &x.AdvSwapQueueItems}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.network_fees":
		if len(x.NetworkFees) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_20_list{})
		}
		listValue := &_GenesisState_20_list{list: &x.NetworkFees}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.chain_contracts":
		if len(x.ChainContracts) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_22_list{})
		}
		listValue := &_GenesisState_22_list{list: &x.ChainContracts}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.SWITCHNames":
		if len(x.SWITCHNames) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_23_list{})
		}
		listValue := &_GenesisState_23_list{list: &x.SWITCHNames}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.mimirs":
		if len(x.Mimirs) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_24_list{})
		}
		listValue := &_GenesisState_24_list{list: &x.Mimirs}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.store_version":
		value := x.StoreVersion
		return protoreflect.ValueOfInt64(value)
	case "switchly.GenesisState.bond_providers":
		if len(x.BondProviders) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_26_list{})
		}
		listValue := &_GenesisState_26_list{list: &x.BondProviders}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.POL":
		value := x.POL
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "switchly.GenesisState.loans":
		if len(x.Loans) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_28_list{})
		}
		listValue := &_GenesisState_28_list{list: &x.Loans}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.streaming_swaps":
		if len(x.StreamingSwaps) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_29_list{})
		}
		listValue := &_GenesisState_29_list{list: &x.StreamingSwaps}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.swap_queue_items":
		if len(x.SwapQueueItems) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_30_list{})
		}
		listValue := &_GenesisState_30_list{list: &x.SwapQueueItems}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.swapper_clout":
		if len(x.SwapperClout) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_31_list{})
		}
		listValue := &_GenesisState_31_list{list: &x.SwapperClout}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.trade_accounts":
		if len(x.TradeAccounts) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_32_list{})
		}
		listValue := &_GenesisState_32_list{list: &x.TradeAccounts}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.trade_units":
		if len(x.TradeUnits) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_33_list{})
		}
		listValue := &_GenesisState_33_list{list: &x.TradeUnits}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.outbound_fee_withheld_switch":
		if len(x.OutboundFeeWithheldSwitch) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_34_list{})
		}
		listValue := &_GenesisState_34_list{list: &x.OutboundFeeWithheldSwitch}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.outbound_fee_spent_switch":
		if len(x.OutboundFeeSpentSwitch) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_35_list{})
		}
		listValue := &_GenesisState_35_list{list: &x.OutboundFeeSpentSwitch}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.switch_providers":
		if len(x.SwitchProviders) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_36_list{})
		}
		listValue := &_GenesisState_36_list{list: &x.SwitchProviders}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.switch_pool":
		value := x.SwitchPool
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "switchly.GenesisState.nodeMimirs":
		if len(x.NodeMimirs) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_38_list{})
		}
		listValue := &_GenesisState_38_list{list: &x.NodeMimirs}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.affiliate_collectors":
		if len(x.AffiliateCollectors) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_39_list{})
		}
		listValue := &_GenesisState_39_list{list: &x.AffiliateCollectors}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.loan_total_collateral":
		if len(x.LoanTotalCollateral) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_40_list{})
		}
		listValue := &_GenesisState_40_list{list: &x.LoanTotalCollateral}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.secured_assets":
		if len(x.SecuredAssets) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_41_list{})
		}
		listValue := &_GenesisState_41_list{list: &x.SecuredAssets}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.swcy_claimers":
		if len(x.SwcyClaimers) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_42_list{})
		}
		listValue := &_GenesisState_42_list{list: &x.SwcyClaimers}
		return protoreflect.ValueOfList(listValue)
	case "switchly.GenesisState.swcy_stakers":
		if len(x.SwcyStakers) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_43_list{})
		}
		listValue := &_GenesisState_43_list{list: &x.SwcyStakers}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: switchly.GenesisState"))
		}
		panic(fmt.Errorf("message switchly.GenesisState does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "switchly.GenesisState.pools":
		lv := value.List()
		clv := lv.(*_GenesisState_1_list)
		x.Pools = *clv.list
	case "switchly.GenesisState.liquidity_providers":
		lv := value.List()
		clv := lv.(*_GenesisState_2_list)
		x.LiquidityProviders = *clv.list
	case "switchly.GenesisState.observed_tx_in_voters":
		lv := value.List()
		clv := lv.(*_GenesisState_3_list)
		x.ObservedTxInVoters = *clv.list
	case "switchly.GenesisState.observed_tx_out_voters":
		lv := value.List()
		clv := lv.(*_GenesisState_4_list)
		x.ObservedTxOutVoters = *clv.list
	case "switchly.GenesisState.tx_outs":
		lv := value.List()
		clv := lv.(*_GenesisState_5_list)
		x.TxOuts = *clv.list
	case "switchly.GenesisState.node_accounts":
		lv := value.List()
		clv := lv.(*_GenesisState_6_list)
		x.NodeAccounts = *clv.list
	case "switchly.GenesisState.vaults":
		lv := value.List()
		clv := lv.(*_GenesisState_7_list)
		x.Vaults = *clv.list
	case "switchly.GenesisState.reserve":
		x.Reserve = value.Uint()
	case "switchly.GenesisState.last_signed_height":
		x.LastSignedHeight = value.Int()
	case "switchly.GenesisState.last_chain_heights":
		lv := value.List()
		clv := lv.(*_GenesisState_11_list)
		x.LastChainHeights = *clv.list
	case "switchly.GenesisState.reserve_contributors":
		lv := value.List()
		clv := lv.(*_GenesisState_12_list)
		x.ReserveContributors = *clv.list
	case "switchly.GenesisState.network":
		x.Network = value.Message().Interface().(*types.Network)
	case "switchly.GenesisState.adv_swap_queue_items":
		lv := value.List()
		clv := lv.(*_GenesisState_19_list)
		x.AdvSwapQueueItems = *clv.list
	case "switchly.GenesisState.network_fees":
		lv := value.List()
		clv := lv.(*_GenesisState_20_list)
		x.NetworkFees = *clv.list
	case "switchly.GenesisState.chain_contracts":
		lv := value.List()
		clv := lv.(*_GenesisState_22_list)
		x.ChainContracts = *clv.list
	case "switchly.GenesisState.SWITCHNames":
		lv := value.List()
		clv := lv.(*_GenesisState_23_list)
		x.SWITCHNames = *clv.list
	case "switchly.GenesisState.mimirs":
		lv := value.List()
		clv := lv.(*_GenesisState_24_list)
		x.Mimirs = *clv.list
	case "switchly.GenesisState.store_version":
		x.StoreVersion = value.Int()
	case "switchly.GenesisState.bond_providers":
		lv := value.List()
		clv := lv.(*_GenesisState_26_list)
		x.BondProviders = *clv.list
	case "switchly.GenesisState.POL":
		x.POL = value.Message().Interface().(*types.ProtocolOwnedLiquidity)
	case "switchly.GenesisState.loans":
		lv := value.List()
		clv := lv.(*_GenesisState_28_list)
		x.Loans = *clv.list
	case "switchly.GenesisState.streaming_swaps":
		lv := value.List()
		clv := lv.(*_GenesisState_29_list)
		x.StreamingSwaps = *clv.list
	case "switchly.GenesisState.swap_queue_items":
		lv := value.List()
		clv := lv.(*_GenesisState_30_list)
		x.SwapQueueItems = *clv.list
	case "switchly.GenesisState.swapper_clout":
		lv := value.List()
		clv := lv.(*_GenesisState_31_list)
		x.SwapperClout = *clv.list
	case "switchly.GenesisState.trade_accounts":
		lv := value.List()
		clv := lv.(*_GenesisState_32_list)
		x.TradeAccounts = *clv.list
	case "switchly.GenesisState.trade_units":
		lv := value.List()
		clv := lv.(*_GenesisState_33_list)
		x.TradeUnits = *clv.list
	case "switchly.GenesisState.outbound_fee_withheld_switch":
		lv := value.List()
		clv := lv.(*_GenesisState_34_list)
		x.OutboundFeeWithheldSwitch = *clv.list
	case "switchly.GenesisState.outbound_fee_spent_switch":
		lv := value.List()
		clv := lv.(*_GenesisState_35_list)
		x.OutboundFeeSpentSwitch = *clv.list
	case "switchly.GenesisState.switch_providers":
		lv := value.List()
		clv := lv.(*_GenesisState_36_list)
		x.SwitchProviders = *clv.list
	case "switchly.GenesisState.switch_pool":
		x.SwitchPool = value.Message().Interface().(*types.SwitchPool)
	case "switchly.GenesisState.nodeMimirs":
		lv := value.List()
		clv := lv.(*_GenesisState_38_list)
		x.NodeMimirs = *clv.list
	case "switchly.GenesisState.affiliate_collectors":
		lv := value.List()
		clv := lv.(*_GenesisState_39_list)
		x.AffiliateCollectors = *clv.list
	case "switchly.GenesisState.loan_total_collateral":
		lv := value.List()
		clv := lv.(*_GenesisState_40_list)
		x.LoanTotalCollateral = *clv.list
	case "switchly.GenesisState.secured_assets":
		lv := value.List()
		clv := lv.(*_GenesisState_41_list)
		x.SecuredAssets = *clv.list
	case "switchly.GenesisState.swcy_claimers":
		lv := value.List()
		clv := lv.(*_GenesisState_42_list)
		x.SwcyClaimers = *clv.list
	case "switchly.GenesisState.swcy_stakers":
		lv := value.List()
		clv := lv.(*_GenesisState_43_list)
		x.SwcyStakers = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: switchly.GenesisState"))
		}
		panic(fmt.Errorf("message switchly.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "switchly.GenesisState.pools":
		if x.Pools == nil {
			x.Pools = []*types.Pool{}
		}
		value := &_GenesisState_1_list{list: &x.Pools}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.liquidity_providers":
		if x.LiquidityProviders == nil {
			x.LiquidityProviders = []*types.LiquidityProvider{}
		}
		value := &_GenesisState_2_list{list: &x.LiquidityProviders}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.observed_tx_in_voters":
		if x.ObservedTxInVoters == nil {
			x.ObservedTxInVoters = []*types.ObservedTxVoter{}
		}
		value := &_GenesisState_3_list{list: &x.ObservedTxInVoters}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.observed_tx_out_voters":
		if x.ObservedTxOutVoters == nil {
			x.ObservedTxOutVoters = []*types.ObservedTxVoter{}
		}
		value := &_GenesisState_4_list{list: &x.ObservedTxOutVoters}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.tx_outs":
		if x.TxOuts == nil {
			x.TxOuts = []*types.TxOut{}
		}
		value := &_GenesisState_5_list{list: &x.TxOuts}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.node_accounts":
		if x.NodeAccounts == nil {
			x.NodeAccounts = []*types.NodeAccount{}
		}
		value := &_GenesisState_6_list{list: &x.NodeAccounts}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.vaults":
		if x.Vaults == nil {
			x.Vaults = []*types.Vault{}
		}
		value := &_GenesisState_7_list{list: &x.Vaults}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.last_chain_heights":
		if x.LastChainHeights == nil {
			x.LastChainHeights = []*LastChainHeight{}
		}
		value := &_GenesisState_11_list{list: &x.LastChainHeights}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.reserve_contributors":
		if x.ReserveContributors == nil {
			x.ReserveContributors = []*types.ReserveContributor{}
		}
		value := &_GenesisState_12_list{list: &x.ReserveContributors}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.network":
		if x.Network == nil {
			x.Network = new(types.Network)
		}
		return protoreflect.ValueOfMessage(x.Network.ProtoReflect())
	case "switchly.GenesisState.adv_swap_queue_items":
		if x.AdvSwapQueueItems == nil {
			x.AdvSwapQueueItems = []*types.MsgSwap{}
		}
		value := &_GenesisState_19_list{list: &x.AdvSwapQueueItems}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.network_fees":
		if x.NetworkFees == nil {
			x.NetworkFees = []*types.NetworkFee{}
		}
		value := &_GenesisState_20_list{list: &x.NetworkFees}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.chain_contracts":
		if x.ChainContracts == nil {
			x.ChainContracts = []*types.ChainContract{}
		}
		value := &_GenesisState_22_list{list: &x.ChainContracts}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.SWITCHNames":
		if x.SWITCHNames == nil {
			x.SWITCHNames = []*types.SWITCHName{}
		}
		value := &_GenesisState_23_list{list: &x.SWITCHNames}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.mimirs":
		if x.Mimirs == nil {
			x.Mimirs = []*Mimir{}
		}
		value := &_GenesisState_24_list{list: &x.Mimirs}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.bond_providers":
		if x.BondProviders == nil {
			x.BondProviders = []*types.BondProviders{}
		}
		value := &_GenesisState_26_list{list: &x.BondProviders}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.POL":
		if x.POL == nil {
			x.POL = new(types.ProtocolOwnedLiquidity)
		}
		return protoreflect.ValueOfMessage(x.POL.ProtoReflect())
	case "switchly.GenesisState.loans":
		if x.Loans == nil {
			x.Loans = []*types.Loan{}
		}
		value := &_GenesisState_28_list{list: &x.Loans}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.streaming_swaps":
		if x.StreamingSwaps == nil {
			x.StreamingSwaps = []*types.StreamingSwap{}
		}
		value := &_GenesisState_29_list{list: &x.StreamingSwaps}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.swap_queue_items":
		if x.SwapQueueItems == nil {
			x.SwapQueueItems = []*types.MsgSwap{}
		}
		value := &_GenesisState_30_list{list: &x.SwapQueueItems}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.swapper_clout":
		if x.SwapperClout == nil {
			x.SwapperClout = []*types.SwapperClout{}
		}
		value := &_GenesisState_31_list{list: &x.SwapperClout}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.trade_accounts":
		if x.TradeAccounts == nil {
			x.TradeAccounts = []*types.TradeAccount{}
		}
		value := &_GenesisState_32_list{list: &x.TradeAccounts}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.trade_units":
		if x.TradeUnits == nil {
			x.TradeUnits = []*types.TradeUnit{}
		}
		value := &_GenesisState_33_list{list: &x.TradeUnits}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.outbound_fee_withheld_switch":
		if x.OutboundFeeWithheldSwitch == nil {
			x.OutboundFeeWithheldSwitch = []*common.Coin{}
		}
		value := &_GenesisState_34_list{list: &x.OutboundFeeWithheldSwitch}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.outbound_fee_spent_switch":
		if x.OutboundFeeSpentSwitch == nil {
			x.OutboundFeeSpentSwitch = []*common.Coin{}
		}
		value := &_GenesisState_35_list{list: &x.OutboundFeeSpentSwitch}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.switch_providers":
		if x.SwitchProviders == nil {
			x.SwitchProviders = []*types.SWITCHProvider{}
		}
		value := &_GenesisState_36_list{list: &x.SwitchProviders}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.switch_pool":
		if x.SwitchPool == nil {
			x.SwitchPool = new(types.SwitchPool)
		}
		return protoreflect.ValueOfMessage(x.SwitchPool.ProtoReflect())
	case "switchly.GenesisState.nodeMimirs":
		if x.NodeMimirs == nil {
			x.NodeMimirs = []*types.NodeMimir{}
		}
		value := &_GenesisState_38_list{list: &x.NodeMimirs}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.affiliate_collectors":
		if x.AffiliateCollectors == nil {
			x.AffiliateCollectors = []*types.AffiliateFeeCollector{}
		}
		value := &_GenesisState_39_list{list: &x.AffiliateCollectors}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.loan_total_collateral":
		if x.LoanTotalCollateral == nil {
			x.LoanTotalCollateral = []*common.Coin{}
		}
		value := &_GenesisState_40_list{list: &x.LoanTotalCollateral}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.secured_assets":
		if x.SecuredAssets == nil {
			x.SecuredAssets = []*types.SecuredAsset{}
		}
		value := &_GenesisState_41_list{list: &x.SecuredAssets}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.swcy_claimers":
		if x.SwcyClaimers == nil {
			x.SwcyClaimers = []*types.SWCYClaimer{}
		}
		value := &_GenesisState_42_list{list: &x.SwcyClaimers}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.swcy_stakers":
		if x.SwcyStakers == nil {
			x.SwcyStakers = []*types.SWCYStaker{}
		}
		value := &_GenesisState_43_list{list: &x.SwcyStakers}
		return protoreflect.ValueOfList(value)
	case "switchly.GenesisState.reserve":
		panic(fmt.Errorf("field reserve of message switchly.GenesisState is not mutable"))
	case "switchly.GenesisState.last_signed_height":
		panic(fmt.Errorf("field last_signed_height of message switchly.GenesisState is not mutable"))
	case "switchly.GenesisState.store_version":
		panic(fmt.Errorf("field store_version of message switchly.GenesisState is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: switchly.GenesisState"))
		}
		panic(fmt.Errorf("message switchly.GenesisState does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GenesisState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "switchly.GenesisState.pools":
		list := []*types.Pool{}
		return protoreflect.ValueOfList(&_GenesisState_1_list{list: &list})
	case "switchly.GenesisState.liquidity_providers":
		list := []*types.LiquidityProvider{}
		return protoreflect.ValueOfList(&_GenesisState_2_list{list: &list})
	case "switchly.GenesisState.observed_tx_in_voters":
		list := []*types.ObservedTxVoter{}
		return protoreflect.ValueOfList(&_GenesisState_3_list{list: &list})
	case "switchly.GenesisState.observed_tx_out_voters":
		list := []*types.ObservedTxVoter{}
		return protoreflect.ValueOfList(&_GenesisState_4_list{list: &list})
	case "switchly.GenesisState.tx_outs":
		list := []*types.TxOut{}
		return protoreflect.ValueOfList(&_GenesisState_5_list{list: &list})
	case "switchly.GenesisState.node_accounts":
		list := []*types.NodeAccount{}
		return protoreflect.ValueOfList(&_GenesisState_6_list{list: &list})
	case "switchly.GenesisState.vaults":
		list := []*types.Vault{}
		return protoreflect.ValueOfList(&_GenesisState_7_list{list: &list})
	case "switchly.GenesisState.reserve":
		return protoreflect.ValueOfUint64(uint64(0))
	case "switchly.GenesisState.last_signed_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "switchly.GenesisState.last_chain_heights":
		list := []*LastChainHeight{}
		return protoreflect.ValueOfList(&_GenesisState_11_list{list: &list})
	case "switchly.GenesisState.reserve_contributors":
		list := []*types.ReserveContributor{}
		return protoreflect.ValueOfList(&_GenesisState_12_list{list: &list})
	case "switchly.GenesisState.network":
		m := new(types.Network)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "switchly.GenesisState.adv_swap_queue_items":
		list := []*types.MsgSwap{}
		return protoreflect.ValueOfList(&_GenesisState_19_list{list: &list})
	case "switchly.GenesisState.network_fees":
		list := []*types.NetworkFee{}
		return protoreflect.ValueOfList(&_GenesisState_20_list{list: &list})
	case "switchly.GenesisState.chain_contracts":
		list := []*types.ChainContract{}
		return protoreflect.ValueOfList(&_GenesisState_22_list{list: &list})
	case "switchly.GenesisState.SWITCHNames":
		list := []*types.SWITCHName{}
		return protoreflect.ValueOfList(&_GenesisState_23_list{list: &list})
	case "switchly.GenesisState.mimirs":
		list := []*Mimir{}
		return protoreflect.ValueOfList(&_GenesisState_24_list{list: &list})
	case "switchly.GenesisState.store_version":
		return protoreflect.ValueOfInt64(int64(0))
	case "switchly.GenesisState.bond_providers":
		list := []*types.BondProviders{}
		return protoreflect.ValueOfList(&_GenesisState_26_list{list: &list})
	case "switchly.GenesisState.POL":
		m := new(types.ProtocolOwnedLiquidity)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "switchly.GenesisState.loans":
		list := []*types.Loan{}
		return protoreflect.ValueOfList(&_GenesisState_28_list{list: &list})
	case "switchly.GenesisState.streaming_swaps":
		list := []*types.StreamingSwap{}
		return protoreflect.ValueOfList(&_GenesisState_29_list{list: &list})
	case "switchly.GenesisState.swap_queue_items":
		list := []*types.MsgSwap{}
		return protoreflect.ValueOfList(&_GenesisState_30_list{list: &list})
	case "switchly.GenesisState.swapper_clout":
		list := []*types.SwapperClout{}
		return protoreflect.ValueOfList(&_GenesisState_31_list{list: &list})
	case "switchly.GenesisState.trade_accounts":
		list := []*types.TradeAccount{}
		return protoreflect.ValueOfList(&_GenesisState_32_list{list: &list})
	case "switchly.GenesisState.trade_units":
		list := []*types.TradeUnit{}
		return protoreflect.ValueOfList(&_GenesisState_33_list{list: &list})
	case "switchly.GenesisState.outbound_fee_withheld_switch":
		list := []*common.Coin{}
		return protoreflect.ValueOfList(&_GenesisState_34_list{list: &list})
	case "switchly.GenesisState.outbound_fee_spent_switch":
		list := []*common.Coin{}
		return protoreflect.ValueOfList(&_GenesisState_35_list{list: &list})
	case "switchly.GenesisState.switch_providers":
		list := []*types.SWITCHProvider{}
		return protoreflect.ValueOfList(&_GenesisState_36_list{list: &list})
	case "switchly.GenesisState.switch_pool":
		m := new(types.SwitchPool)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "switchly.GenesisState.nodeMimirs":
		list := []*types.NodeMimir{}
		return protoreflect.ValueOfList(&_GenesisState_38_list{list: &list})
	case "switchly.GenesisState.affiliate_collectors":
		list := []*types.AffiliateFeeCollector{}
		return protoreflect.ValueOfList(&_GenesisState_39_list{list: &list})
	case "switchly.GenesisState.loan_total_collateral":
		list := []*common.Coin{}
		return protoreflect.ValueOfList(&_GenesisState_40_list{list: &list})
	case "switchly.GenesisState.secured_assets":
		list := []*types.SecuredAsset{}
		return protoreflect.ValueOfList(&_GenesisState_41_list{list: &list})
	case "switchly.GenesisState.swcy_claimers":
		list := []*types.SWCYClaimer{}
		return protoreflect.ValueOfList(&_GenesisState_42_list{list: &list})
	case "switchly.GenesisState.swcy_stakers":
		list := []*types.SWCYStaker{}
		return protoreflect.ValueOfList(&_GenesisState_43_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: switchly.GenesisState"))
		}
		panic(fmt.Errorf("message switchly.GenesisState does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GenesisState) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in switchly.GenesisState", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GenesisState) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GenesisState) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GenesisState) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Pools) > 0 {
			for _, e := range x.Pools {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.LiquidityProviders) > 0 {
			for _, e := range x.LiquidityProviders {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.ObservedTxInVoters) > 0 {
			for _, e := range x.ObservedTxInVoters {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.ObservedTxOutVoters) > 0 {
			for _, e := range x.ObservedTxOutVoters {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.TxOuts) > 0 {
			for _, e := range x.TxOuts {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.NodeAccounts) > 0 {
			for _, e := range x.NodeAccounts {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Vaults) > 0 {
			for _, e := range x.Vaults {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Reserve != 0 {
			n += 1 + runtime.Sov(uint64(x.Reserve))
		}
		if x.LastSignedHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.LastSignedHeight))
		}
		if len(x.LastChainHeights) > 0 {
			for _, e := range x.LastChainHeights {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.ReserveContributors) > 0 {
			for _, e := range x.ReserveContributors {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Network != nil {
			l = options.Size(x.Network)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.AdvSwapQueueItems) > 0 {
			for _, e := range x.AdvSwapQueueItems {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.NetworkFees) > 0 {
			for _, e := range x.NetworkFees {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.ChainContracts) > 0 {
			for _, e := range x.ChainContracts {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.SWITCHNames) > 0 {
			for _, e := range x.SWITCHNames {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Mimirs) > 0 {
			for _, e := range x.Mimirs {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if x.StoreVersion != 0 {
			n += 2 + runtime.Sov(uint64(x.StoreVersion))
		}
		if len(x.BondProviders) > 0 {
			for _, e := range x.BondProviders {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if x.POL != nil {
			l = options.Size(x.POL)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if len(x.Loans) > 0 {
			for _, e := range x.Loans {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.StreamingSwaps) > 0 {
			for _, e := range x.StreamingSwaps {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.SwapQueueItems) > 0 {
			for _, e := range x.SwapQueueItems {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.SwapperClout) > 0 {
			for _, e := range x.SwapperClout {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.TradeAccounts) > 0 {
			for _, e := range x.TradeAccounts {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.TradeUnits) > 0 {
			for _, e := range x.TradeUnits {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.OutboundFeeWithheldSwitch) > 0 {
			for _, e := range x.OutboundFeeWithheldSwitch {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.OutboundFeeSpentSwitch) > 0 {
			for _, e := range x.OutboundFeeSpentSwitch {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.SwitchProviders) > 0 {
			for _, e := range x.SwitchProviders {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if x.SwitchPool != nil {
			l = options.Size(x.SwitchPool)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if len(x.NodeMimirs) > 0 {
			for _, e := range x.NodeMimirs {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.AffiliateCollectors) > 0 {
			for _, e := range x.AffiliateCollectors {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.LoanTotalCollateral) > 0 {
			for _, e := range x.LoanTotalCollateral {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.SecuredAssets) > 0 {
			for _, e := range x.SecuredAssets {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.SwcyClaimers) > 0 {
			for _, e := range x.SwcyClaimers {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.SwcyStakers) > 0 {
			for _, e := range x.SwcyStakers {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.SwcyStakers) > 0 {
			for iNdEx := len(x.SwcyStakers) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.SwcyStakers[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2
				i--
				dAtA[i] = 0xda
			}
		}
		if len(x.SwcyClaimers) > 0 {
			for iNdEx := len(x.SwcyClaimers) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.SwcyClaimers[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2
				i--
				dAtA[i] = 0xd2
			}
		}
		if len(x.SecuredAssets) > 0 {
			for iNdEx := len(x.SecuredAssets) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.SecuredAssets[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2
				i--
				dAtA[i] = 0xca
			}
		}
		if len(x.LoanTotalCollateral) > 0 {
			for iNdEx := len(x.LoanTotalCollateral) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.LoanTotalCollateral[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2
				i--
				dAtA[i] = 0xc2
			}
		}
		if len(x.AffiliateCollectors) > 0 {
			for iNdEx := len(x.AffiliateCollectors) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AffiliateCollectors[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2
				i--
				dAtA[i] = 0xba
			}
		}
		if len(x.NodeMimirs) > 0 {
			for iNdEx := len(x.NodeMimirs) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.NodeMimirs[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2
				i--
				dAtA[i] = 0xb2
			}
		}
		if x.SwitchPool != nil {
			encoded, err := options.Marshal(x.SwitchPool)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
		if len(x.SwitchProviders) > 0 {
			for iNdEx := len(x.SwitchProviders) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.SwitchProviders[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2
				i--
				dAtA[i] = 0xa2
			}
		}
		if len(x.OutboundFeeSpentSwitch) > 0 {
			for iNdEx := len(x.OutboundFeeSpentSwitch) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.OutboundFeeSpentSwitch[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2
				i--
				dAtA[i] = 0x9a
			}
		}
		if len(x.OutboundFeeWithheldSwitch) > 0 {
			for iNdEx := len(x.OutboundFeeWithheldSwitch) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.OutboundFeeWithheldSwitch[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2
				i--
				dAtA[i] = 0x92
			}
		}
		if len(x.TradeUnits) > 0 {
			for iNdEx := len(x.TradeUnits) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TradeUnits[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2
				i--
				dAtA[i] = 0x8a
			}
		}
		if len(x.TradeAccounts) > 0 {
			for iNdEx := len(x.TradeAccounts) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TradeAccounts[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2
				i--
				dAtA[i] = 0x82
			}
		}
		if len(x.SwapperClout) > 0 {
			for iNdEx := len(x.SwapperClout) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.SwapperClout[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xfa
			}
		}
		if len(x.SwapQueueItems) > 0 {
			for iNdEx := len(x.SwapQueueItems) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.SwapQueueItems[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xf2
			}
		}
		if len(x.StreamingSwaps) > 0 {
			for iNdEx := len(x.StreamingSwaps) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.StreamingSwaps[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xea
			}
		}
		if len(x.Loans) > 0 {
			for iNdEx := len(x.Loans) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Loans[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xe2
			}
		}
		if x.POL != nil {
			encoded, err := options.Marshal(x.POL)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
		if len(x.BondProviders) > 0 {
			for iNdEx := len(x.BondProviders) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.BondProviders[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xd2
			}
		}
		if x.StoreVersion != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StoreVersion))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc8
		}
		if len(x.Mimirs) > 0 {
			for iNdEx := len(x.Mimirs) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Mimirs[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xc2
			}
		}
		if len(x.SWITCHNames) > 0 {
			for iNdEx := len(x.SWITCHNames) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.SWITCHNames[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xba
			}
		}
		if len(x.ChainContracts) > 0 {
			for iNdEx := len(x.ChainContracts) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ChainContracts[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xb2
			}
		}
		if len(x.NetworkFees) > 0 {
			for iNdEx := len(x.NetworkFees) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.NetworkFees[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xa2
			}
		}
		if len(x.AdvSwapQueueItems) > 0 {
			for iNdEx := len(x.AdvSwapQueueItems) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AdvSwapQueueItems[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0x9a
			}
		}
		if x.Network != nil {
			encoded, err := options.Marshal(x.Network)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x6a
		}
		if len(x.ReserveContributors) > 0 {
			for iNdEx := len(x.ReserveContributors) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ReserveContributors[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x62
			}
		}
		if len(x.LastChainHeights) > 0 {
			for iNdEx := len(x.LastChainHeights) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.LastChainHeights[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x5a
			}
		}
		if x.LastSignedHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastSignedHeight))
			i--
			dAtA[i] = 0x50
		}
		if x.Reserve != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Reserve))
			i--
			dAtA[i] = 0x40
		}
		if len(x.Vaults) > 0 {
			for iNdEx := len(x.Vaults) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Vaults[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.NodeAccounts) > 0 {
			for iNdEx := len(x.NodeAccounts) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.NodeAccounts[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if len(x.TxOuts) > 0 {
			for iNdEx := len(x.TxOuts) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TxOuts[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.ObservedTxOutVoters) > 0 {
			for iNdEx := len(x.ObservedTxOutVoters) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ObservedTxOutVoters[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.ObservedTxInVoters) > 0 {
			for iNdEx := len(x.ObservedTxInVoters) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ObservedTxInVoters[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.LiquidityProviders) > 0 {
			for iNdEx := len(x.LiquidityProviders) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.LiquidityProviders[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.Pools) > 0 {
			for iNdEx := len(x.Pools) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Pools[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pools = append(x.Pools, &types.Pool{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pools[len(x.Pools)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LiquidityProviders", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LiquidityProviders = append(x.LiquidityProviders, &types.LiquidityProvider{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LiquidityProviders[len(x.LiquidityProviders)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ObservedTxInVoters", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ObservedTxInVoters = append(x.ObservedTxInVoters, &types.ObservedTxVoter{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ObservedTxInVoters[len(x.ObservedTxInVoters)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ObservedTxOutVoters", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ObservedTxOutVoters = append(x.ObservedTxOutVoters, &types.ObservedTxVoter{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ObservedTxOutVoters[len(x.ObservedTxOutVoters)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TxOuts", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TxOuts = append(x.TxOuts, &types.TxOut{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TxOuts[len(x.TxOuts)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NodeAccounts", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NodeAccounts = append(x.NodeAccounts, &types.NodeAccount{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.NodeAccounts[len(x.NodeAccounts)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Vaults", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Vaults = append(x.Vaults, &types.Vault{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Vaults[len(x.Vaults)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
				}
				x.Reserve = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Reserve |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastSignedHeight", wireType)
				}
				x.LastSignedHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastSignedHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastChainHeights", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LastChainHeights = append(x.LastChainHeights, &LastChainHeight{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastChainHeights[len(x.LastChainHeights)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReserveContributors", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ReserveContributors = append(x.ReserveContributors, &types.ReserveContributor{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ReserveContributors[len(x.ReserveContributors)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Network == nil {
					x.Network = &types.Network{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Network); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 19:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AdvSwapQueueItems", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AdvSwapQueueItems = append(x.AdvSwapQueueItems, &types.MsgSwap{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AdvSwapQueueItems[len(x.AdvSwapQueueItems)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 20:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NetworkFees", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NetworkFees = append(x.NetworkFees, &types.NetworkFee{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.NetworkFees[len(x.NetworkFees)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 22:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChainContracts", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ChainContracts = append(x.ChainContracts, &types.ChainContract{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ChainContracts[len(x.ChainContracts)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 23:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SWITCHNames", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SWITCHNames = append(x.SWITCHNames, &types.SWITCHName{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SWITCHNames[len(x.SWITCHNames)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 24:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Mimirs", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Mimirs = append(x.Mimirs, &Mimir{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Mimirs[len(x.Mimirs)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 25:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StoreVersion", wireType)
				}
				x.StoreVersion = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StoreVersion |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 26:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BondProviders", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BondProviders = append(x.BondProviders, &types.BondProviders{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BondProviders[len(x.BondProviders)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 27:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field POL", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.POL == nil {
					x.POL = &types.ProtocolOwnedLiquidity{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.POL); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 28:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Loans", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Loans = append(x.Loans, &types.Loan{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Loans[len(x.Loans)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 29:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StreamingSwaps", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StreamingSwaps = append(x.StreamingSwaps, &types.StreamingSwap{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.StreamingSwaps[len(x.StreamingSwaps)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 30:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SwapQueueItems", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SwapQueueItems = append(x.SwapQueueItems, &types.MsgSwap{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SwapQueueItems[len(x.SwapQueueItems)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 31:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SwapperClout", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SwapperClout = append(x.SwapperClout, &types.SwapperClout{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SwapperClout[len(x.SwapperClout)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 32:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TradeAccounts", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TradeAccounts = append(x.TradeAccounts, &types.TradeAccount{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TradeAccounts[len(x.TradeAccounts)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 33:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TradeUnits", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TradeUnits = append(x.TradeUnits, &types.TradeUnit{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TradeUnits[len(x.TradeUnits)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 34:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OutboundFeeWithheldSwitch", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OutboundFeeWithheldSwitch = append(x.OutboundFeeWithheldSwitch, &common.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OutboundFeeWithheldSwitch[len(x.OutboundFeeWithheldSwitch)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 35:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OutboundFeeSpentSwitch", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OutboundFeeSpentSwitch = append(x.OutboundFeeSpentSwitch, &common.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OutboundFeeSpentSwitch[len(x.OutboundFeeSpentSwitch)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 36:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SwitchProviders", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SwitchProviders = append(x.SwitchProviders, &types.SWITCHProvider{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SwitchProviders[len(x.SwitchProviders)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 37:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SwitchPool", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.SwitchPool == nil {
					x.SwitchPool = &types.SwitchPool{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SwitchPool); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 38:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NodeMimirs", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NodeMimirs = append(x.NodeMimirs, &types.NodeMimir{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.NodeMimirs[len(x.NodeMimirs)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 39:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AffiliateCollectors", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AffiliateCollectors = append(x.AffiliateCollectors, &types.AffiliateFeeCollector{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AffiliateCollectors[len(x.AffiliateCollectors)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 40:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LoanTotalCollateral", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LoanTotalCollateral = append(x.LoanTotalCollateral, &common.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LoanTotalCollateral[len(x.LoanTotalCollateral)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 41:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SecuredAssets", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SecuredAssets = append(x.SecuredAssets, &types.SecuredAsset{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SecuredAssets[len(x.SecuredAssets)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 42:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SwcyClaimers", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SwcyClaimers = append(x.SwcyClaimers, &types.SWCYClaimer{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SwcyClaimers[len(x.SwcyClaimers)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 43:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SwcyStakers", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SwcyStakers = append(x.SwcyStakers, &types.SWCYStaker{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SwcyStakers[len(x.SwcyStakers)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: switchly/genesis.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LastChainHeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain  string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Height int64  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *LastChainHeight) Reset() {
	*x = LastChainHeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_switchly_genesis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastChainHeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastChainHeight) ProtoMessage() {}

// Deprecated: Use LastChainHeight.ProtoReflect.Descriptor instead.
func (*LastChainHeight) Descriptor() ([]byte, []int) {
	return file_switchly_genesis_proto_rawDescGZIP(), []int{0}
}

func (x *LastChainHeight) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *LastChainHeight) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type Mimir struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Mimir) Reset() {
	*x = Mimir{}
	if protoimpl.UnsafeEnabled {
		mi := &file_switchly_genesis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mimir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mimir) ProtoMessage() {}

// Deprecated: Use Mimir.ProtoReflect.Descriptor instead.
func (*Mimir) Descriptor() ([]byte, []int) {
	return file_switchly_genesis_proto_rawDescGZIP(), []int{1}
}

func (x *Mimir) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Mimir) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GenesisState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools               []*types.Pool               `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
	LiquidityProviders  []*types.LiquidityProvider  `protobuf:"bytes,2,rep,name=liquidity_providers,json=liquidityProviders,proto3" json:"liquidity_providers,omitempty"`
	ObservedTxInVoters  []*types.ObservedTxVoter    `protobuf:"bytes,3,rep,name=observed_tx_in_voters,json=observedTxInVoters,proto3" json:"observed_tx_in_voters,omitempty"`
	ObservedTxOutVoters []*types.ObservedTxVoter    `protobuf:"bytes,4,rep,name=observed_tx_out_voters,json=observedTxOutVoters,proto3" json:"observed_tx_out_voters,omitempty"`
	TxOuts              []*types.TxOut              `protobuf:"bytes,5,rep,name=tx_outs,json=txOuts,proto3" json:"tx_outs,omitempty"`
	NodeAccounts        []*types.NodeAccount        `protobuf:"bytes,6,rep,name=node_accounts,json=nodeAccounts,proto3" json:"node_accounts,omitempty"`
	Vaults              []*types.Vault              `protobuf:"bytes,7,rep,name=vaults,proto3" json:"vaults,omitempty"`
	Reserve             uint64                      `protobuf:"varint,8,opt,name=reserve,proto3" json:"reserve,omitempty"`
	LastSignedHeight    int64                       `protobuf:"varint,10,opt,name=last_signed_height,json=lastSignedHeight,proto3" json:"last_signed_height,omitempty"`
	LastChainHeights    []*LastChainHeight          `protobuf:"bytes,11,rep,name=last_chain_heights,json=lastChainHeights,proto3" json:"last_chain_heights,omitempty"`
	ReserveContributors []*types.ReserveContributor `protobuf:"bytes,12,rep,name=reserve_contributors,json=reserveContributors,proto3" json:"reserve_contributors,omitempty"`
	Network             *types.Network              `protobuf:"bytes,13,opt,name=network,proto3" json:"network,omitempty"`
	AdvSwapQueueItems   []*types.MsgSwap            `protobuf:"bytes,19,rep,name=adv_swap_queue_items,json=advSwapQueueItems,proto3" json:"adv_swap_queue_items,omitempty"`
	NetworkFees         []*types.NetworkFee         `protobuf:"bytes,20,rep,name=network_fees,json=networkFees,proto3" json:"network_fees,omitempty"`
	ChainContracts      []*types.ChainContract      `protobuf:"bytes,22,rep,name=chain_contracts,json=chainContracts,proto3" json:"chain_contracts,omitempty"`
	SWITCHNames         []*types.SWITCHName         `protobuf:"bytes,23,rep,name=SWITCHNames,proto3" json:"SWITCHNames,omitempty"`
	Mimirs              []*Mimir                    `protobuf:"bytes,24,rep,name=mimirs,proto3" json:"mimirs,omitempty"`
	// store_version is deprecated in v3.0.0
	//
	// Deprecated: Do not use.
	StoreVersion              int64                          `protobuf:"varint,25,opt,name=store_version,json=storeVersion,proto3" json:"store_version,omitempty"`
	BondProviders             []*types.BondProviders         `protobuf:"bytes,26,rep,name=bond_providers,json=bondProviders,proto3" json:"bond_providers,omitempty"`
	POL                       *types.ProtocolOwnedLiquidity  `protobuf:"bytes,27,opt,name=POL,proto3" json:"POL,omitempty"`
	Loans                     []*types.Loan                  `protobuf:"bytes,28,rep,name=loans,proto3" json:"loans,omitempty"`
	StreamingSwaps            []*types.StreamingSwap         `protobuf:"bytes,29,rep,name=streaming_swaps,json=streamingSwaps,proto3" json:"streaming_swaps,omitempty"`
	SwapQueueItems            []*types.MsgSwap               `protobuf:"bytes,30,rep,name=swap_queue_items,json=swapQueueItems,proto3" json:"swap_queue_items,omitempty"`
	SwapperClout              []*types.SwapperClout          `protobuf:"bytes,31,rep,name=swapper_clout,json=swapperClout,proto3" json:"swapper_clout,omitempty"`
	TradeAccounts             []*types.TradeAccount          `protobuf:"bytes,32,rep,name=trade_accounts,json=tradeAccounts,proto3" json:"trade_accounts,omitempty"`
	TradeUnits                []*types.TradeUnit             `protobuf:"bytes,33,rep,name=trade_units,json=tradeUnits,proto3" json:"trade_units,omitempty"`
	OutboundFeeWithheldSwitch []*common.Coin                 `protobuf:"bytes,34,rep,name=outbound_fee_withheld_switch,json=outboundFeeWithheldSwitch,proto3" json:"outbound_fee_withheld_switch,omitempty"`
	OutboundFeeSpentSwitch    []*common.Coin                 `protobuf:"bytes,35,rep,name=outbound_fee_spent_switch,json=outboundFeeSpentSwitch,proto3" json:"outbound_fee_spent_switch,omitempty"`
	SwitchProviders           []*types.SWITCHProvider        `protobuf:"bytes,36,rep,name=switch_providers,json=switchProviders,proto3" json:"switch_providers,omitempty"`
	SwitchPool                *types.SwitchPool              `protobuf:"bytes,37,opt,name=switch_pool,json=switchPool,proto3" json:"switch_pool,omitempty"`
	NodeMimirs                []*types.NodeMimir             `protobuf:"bytes,38,rep,name=nodeMimirs,proto3" json:"nodeMimirs,omitempty"`
	AffiliateCollectors       []*types.AffiliateFeeCollector `protobuf:"bytes,39,rep,name=affiliate_collectors,json=affiliateCollectors,proto3" json:"affiliate_collectors,omitempty"`
	LoanTotalCollateral       []*common.Coin                 `protobuf:"bytes,40,rep,name=loan_total_collateral,json=loanTotalCollateral,proto3" json:"loan_total_collateral,omitempty"`
	SecuredAssets             []*types.SecuredAsset          `protobuf:"bytes,41,rep,name=secured_assets,json=securedAssets,proto3" json:"secured_assets,omitempty"`
	SwcyClaimers              []*types.SWCYClaimer           `protobuf:"bytes,42,rep,name=swcy_claimers,json=swcyClaimers,proto3" json:"swcy_claimers,omitempty"`
	SwcyStakers               []*types.SWCYStaker            `protobuf:"bytes,43,rep,name=swcy_stakers,json=swcyStakers,proto3" json:"swcy_stakers,omitempty"`
}

func (x *GenesisState) Reset() {
	*x = GenesisState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_switchly_genesis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisState) ProtoMessage() {}

// Deprecated: Use GenesisState.ProtoReflect.Descriptor instead.
func (*GenesisState) Descriptor() ([]byte, []int) {
	return file_switchly_genesis_proto_rawDescGZIP(), []int{2}
}

func (x *GenesisState) GetPools() []*types.Pool {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *GenesisState) GetLiquidityProviders() []*types.LiquidityProvider {
	if x != nil {
		return x.LiquidityProviders
	}
	return nil
}

func (x *GenesisState) GetObservedTxInVoters() []*types.ObservedTxVoter {
	if x != nil {
		return x.ObservedTxInVoters
	}
	return nil
}

func (x *GenesisState) GetObservedTxOutVoters() []*types.ObservedTxVoter {
	if x != nil {
		return x.ObservedTxOutVoters
	}
	return nil
}

func (x *GenesisState) GetTxOuts() []*types.TxOut {
	if x != nil {
		return x.TxOuts
	}
	return nil
}

func (x *GenesisState) GetNodeAccounts() []*types.NodeAccount {
	if x != nil {
		return x.NodeAccounts
	}
	return nil
}

func (x *GenesisState) GetVaults() []*types.Vault {
	if x != nil {
		return x.Vaults
	}
	return nil
}

func (x *GenesisState) GetReserve() uint64 {
	if x != nil {
		return x.Reserve
	}
	return 0
}

func (x *GenesisState) GetLastSignedHeight() int64 {
	if x != nil {
		return x.LastSignedHeight
	}
	return 0
}

func (x *GenesisState) GetLastChainHeights() []*LastChainHeight {
	if x != nil {
		return x.LastChainHeights
	}
	return nil
}

func (x *GenesisState) GetReserveContributors() []*types.ReserveContributor {
	if x != nil {
		return x.ReserveContributors
	}
	return nil
}

func (x *GenesisState) GetNetwork() *types.Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *GenesisState) GetAdvSwapQueueItems() []*types.MsgSwap {
	if x != nil {
		return x.AdvSwapQueueItems
	}
	return nil
}

func (x *GenesisState) GetNetworkFees() []*types.NetworkFee {
	if x != nil {
		return x.NetworkFees
	}
	return nil
}

func (x *GenesisState) GetChainContracts() []*types.ChainContract {
	if x != nil {
		return x.ChainContracts
	}
	return nil
}

func (x *GenesisState) GetSWITCHNames() []*types.SWITCHName {
	if x != nil {
		return x.SWITCHNames
	}
	return nil
}

func (x *GenesisState) GetMimirs() []*Mimir {
	if x != nil {
		return x.Mimirs
	}
	return nil
}

// Deprecated: Do not use.
func (x *GenesisState) GetStoreVersion() int64 {
	if x != nil {
		return x.StoreVersion
	}
	return 0
}

func (x *GenesisState) GetBondProviders() []*types.BondProviders {
	if x != nil {
		return x.BondProviders
	}
	return nil
}

func (x *GenesisState) GetPOL() *types.ProtocolOwnedLiquidity {
	if x != nil {
		return x.POL
	}
	return nil
}

func (x *GenesisState) GetLoans() []*types.Loan {
	if x != nil {
		return x.Loans
	}
	return nil
}

func (x *GenesisState) GetStreamingSwaps() []*types.StreamingSwap {
	if x != nil {
		return x.StreamingSwaps
	}
	return nil
}

func (x *GenesisState) GetSwapQueueItems() []*types.MsgSwap {
	if x != nil {
		return x.SwapQueueItems
	}
	return nil
}

func (x *GenesisState) GetSwapperClout() []*types.SwapperClout {
	if x != nil {
		return x.SwapperClout
	}
	return nil
}

func (x *GenesisState) GetTradeAccounts() []*types.TradeAccount {
	if x != nil {
		return x.TradeAccounts
	}
	return nil
}

func (x *GenesisState) GetTradeUnits() []*types.TradeUnit {
	if x != nil {
		return x.TradeUnits
	}
	return nil
}

func (x *GenesisState) GetOutboundFeeWithheldSwitch() []*common.Coin {
	if x != nil {
		return x.OutboundFeeWithheldSwitch
	}
	return nil
}

func (x *GenesisState) GetOutboundFeeSpentSwitch() []*common.Coin {
	if x != nil {
		return x.OutboundFeeSpentSwitch
	}
	return nil
}

func (x *GenesisState) GetSwitchProviders() []*types.SWITCHProvider {
	if x != nil {
		return x.SwitchProviders
	}
	return nil
}

func (x *GenesisState) GetSwitchPool() *types.SwitchPool {
	if x != nil {
		return x.SwitchPool
	}
	return nil
}

func (x *GenesisState) GetNodeMimirs() []*types.NodeMimir {
	if x != nil {
		return x.NodeMimirs
	}
	return nil
}

func (x *GenesisState) GetAffiliateCollectors() []*types.AffiliateFeeCollector {
	if x != nil {
		return x.AffiliateCollectors
	}
	return nil
}

func (x *GenesisState) GetLoanTotalCollateral() []*common.Coin {
	if x != nil {
		return x.LoanTotalCollateral
	}
	return nil
}

func (x *GenesisState) GetSecuredAssets() []*types.SecuredAsset {
	if x != nil {
		return x.SecuredAssets
	}
	return nil
}

func (x *GenesisState) GetSwcyClaimers() []*types.SWCYClaimer {
	if x != nil {
		return x.SwcyClaimers
	}
	return nil
}

func (x *GenesisState) GetSwcyStakers() []*types.SWCYStaker {
	if x != nil {
		return x.SwcyStakers
	}
	return nil
}

var File_switchly_genesis_proto protoreflect.FileDescriptor

var file_switchly_genesis_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x6c, 0x79, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6d, 0x69, 0x6d, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x6c, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x77, 0x63, 0x79, 0x5f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x77, 0x63, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x3f, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x2f, 0x0a, 0x05, 0x6d, 0x69, 0x6d, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x9a, 0x17, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0xa2, 0x01, 0x0a,
	0x13, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x42, 0x57, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x4f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6c,
	0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x6c, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x78, 0x2f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x6c, 0x79, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x12, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x12, 0xa0, 0x01, 0x0a, 0x15, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x74,
	0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x54, 0x78, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x42, 0x55, 0xc8, 0xde, 0x1f, 0x00, 0xaa,
	0xdf, 0x1f, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x78,
	0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54, 0x78, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54, 0x78, 0x49, 0x6e, 0x56, 0x6f,
	0x74, 0x65, 0x72, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x16, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54, 0x78, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x42, 0x55, 0xc8,
	0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2f,
	0x76, 0x33, 0x2f, 0x78, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54, 0x78, 0x56, 0x6f,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54, 0x78,
	0x4f, 0x75, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x6f, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06,
	0x74, 0x78, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x51, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x49, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6c, 0x79,
	0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x78, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x6c, 0x79, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x71, 0x0a, 0x06, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x75, 0x6c,
	0x74, 0x42, 0x4b, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0x6e,
	0x6f, 0x64, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x78, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6c,
	0x79, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x06,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4d,
	0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x6c, 0x79, 0x2e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0xa6, 0x01,
	0x0a, 0x14, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x42, 0x58, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f,
	0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x6c, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x6c, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x78, 0x2f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x13, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x45, 0x0a, 0x14, 0x61, 0x64, 0x76, 0x5f, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67,
	0x53, 0x77, 0x61, 0x70, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x11, 0x61, 0x64, 0x76, 0x53,
	0x77, 0x61, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3a, 0x0a,
	0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x39,
	0x0a, 0x0b, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0b, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x69, 0x6d,
	0x69, 0x72, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x6c, 0x79, 0x2e, 0x6d, 0x69, 0x6d, 0x69, 0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x06, 0x6d, 0x69, 0x6d, 0x69, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d, 0x62, 0x6f, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x03, 0x50, 0x4f, 0x4c, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x03, 0x50, 0x4f, 0x4c, 0x12, 0x27, 0x0a, 0x05, 0x6c,
	0x6f, 0x61, 0x6e, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x6c,
	0x6f, 0x61, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53,
	0x77, 0x61, 0x70, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x53, 0x77, 0x61, 0x70, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x53,
	0x77, 0x61, 0x70, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x77, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x74, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x43, 0x6c, 0x6f, 0x75, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c, 0x73, 0x77, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x1c, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x40, 0xc8, 0xde, 0x1f, 0x00, 0xaa,
	0xdf, 0x1f, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x19, 0x6f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x57, 0x69, 0x74, 0x68, 0x68, 0x65, 0x6c, 0x64,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x89, 0x01, 0x0a, 0x19, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x40, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf,
	0x1f, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x6c, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x16, 0x6f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f,
	0x6f, 0x6c, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x36, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x6d, 0x69,
	0x72, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x6d, 0x69, 0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x6d, 0x69, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x14,
	0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x13,
	0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x28, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x42, 0x40, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0x6e,
	0x6f, 0x64, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x52, 0x13, 0x6c, 0x6f, 0x61, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x64,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x77,
	0x63, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x57, 0x43, 0x59, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c, 0x73, 0x77, 0x63,
	0x79, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x77, 0x63,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x57, 0x43, 0x59, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0b, 0x73, 0x77, 0x63, 0x79, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x73, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0e, 0x10,
	0x0f, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04, 0x08,
	0x11, 0x10, 0x12, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x4a, 0x04, 0x08, 0x15, 0x10, 0x16, 0x42,
	0x96, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6c, 0x79,
	0x42, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x6c, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58,
	0xaa, 0x02, 0x08, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0xca, 0x02, 0x08, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0xe2, 0x02, 0x14, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6c,
	0x79, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6c, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_switchly_genesis_proto_rawDescOnce sync.Once
	file_switchly_genesis_proto_rawDescData = file_switchly_genesis_proto_rawDesc
)

func file_switchly_genesis_proto_rawDescGZIP() []byte {
	file_switchly_genesis_proto_rawDescOnce.Do(func() {
		file_switchly_genesis_proto_rawDescData = protoimpl.X.CompressGZIP(file_switchly_genesis_proto_rawDescData)
	})
	return file_switchly_genesis_proto_rawDescData
}

var file_switchly_genesis_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_switchly_genesis_proto_goTypes = []interface{}{
	(*LastChainHeight)(nil),              // 0: switchly.lastChainHeight
	(*Mimir)(nil),                        // 1: switchly.mimir
	(*GenesisState)(nil),                 // 2: switchly.GenesisState
	(*types.Pool)(nil),                   // 3: types.Pool
	(*types.LiquidityProvider)(nil),      // 4: types.LiquidityProvider
	(*types.ObservedTxVoter)(nil),        // 5: types.ObservedTxVoter
	(*types.TxOut)(nil),                  // 6: types.TxOut
	(*types.NodeAccount)(nil),            // 7: types.NodeAccount
	(*types.Vault)(nil),                  // 8: types.Vault
	(*types.ReserveContributor)(nil),     // 9: types.ReserveContributor
	(*types.Network)(nil),                // 10: types.Network
	(*types.MsgSwap)(nil),                // 11: types.MsgSwap
	(*types.NetworkFee)(nil),             // 12: types.NetworkFee
	(*types.ChainContract)(nil),          // 13: types.ChainContract
	(*types.SWITCHName)(nil),             // 14: types.SWITCHName
	(*types.BondProviders)(nil),          // 15: types.BondProviders
	(*types.ProtocolOwnedLiquidity)(nil), // 16: types.ProtocolOwnedLiquidity
	(*types.Loan)(nil),                   // 17: types.Loan
	(*types.StreamingSwap)(nil),          // 18: types.StreamingSwap
	(*types.SwapperClout)(nil),           // 19: types.SwapperClout
	(*types.TradeAccount)(nil),           // 20: types.TradeAccount
	(*types.TradeUnit)(nil),              // 21: types.TradeUnit
	(*common.Coin)(nil),                  // 22: common.Coin
	(*types.SWITCHProvider)(nil),         // 23: types.SWITCHProvider
	(*types.SwitchPool)(nil),             // 24: types.SwitchPool
	(*types.NodeMimir)(nil),              // 25: types.NodeMimir
	(*types.AffiliateFeeCollector)(nil),  // 26: types.AffiliateFeeCollector
	(*types.SecuredAsset)(nil),           // 27: types.SecuredAsset
	(*types.SWCYClaimer)(nil),            // 28: types.SWCYClaimer
	(*types.SWCYStaker)(nil),             // 29: types.SWCYStaker
}
var file_switchly_genesis_proto_depIdxs = []int32{
	3,  // 0: switchly.GenesisState.pools:type_name -> types.Pool
	4,  // 1: switchly.GenesisState.liquidity_providers:type_name -> types.LiquidityProvider
	5,  // 2: switchly.GenesisState.observed_tx_in_voters:type_name -> types.ObservedTxVoter
	5,  // 3: switchly.GenesisState.observed_tx_out_voters:type_name -> types.ObservedTxVoter
	6,  // 4: switchly.GenesisState.tx_outs:type_name -> types.TxOut
	7,  // 5: switchly.GenesisState.node_accounts:type_name -> types.NodeAccount
	8,  // 6: switchly.GenesisState.vaults:type_name -> types.Vault
	0,  // 7: switchly.GenesisState.last_chain_heights:type_name -> switchly.lastChainHeight
	9,  // 8: switchly.GenesisState.reserve_contributors:type_name -> types.ReserveContributor
	10, // 9: switchly.GenesisState.network:type_name -> types.Network
	11, // 10: switchly.GenesisState.adv_swap_queue_items:type_name -> types.MsgSwap
	12, // 11: switchly.GenesisState.network_fees:type_name -> types.NetworkFee
	13, // 12: switchly.GenesisState.chain_contracts:type_name -> types.ChainContract
	14, // 13: switchly.GenesisState.SWITCHNames:type_name -> types.SWITCHName
	1,  // 14: switchly.GenesisState.mimirs:type_name -> switchly.mimir
	15, // 15: switchly.GenesisState.bond_providers:type_name -> types.BondProviders
	16, // 16: switchly.GenesisState.POL:type_name -> types.ProtocolOwnedLiquidity
	17, // 17: switchly.GenesisState.loans:type_name -> types.Loan
	18, // 18: switchly.GenesisState.streaming_swaps:type_name -> types.StreamingSwap
	11, // 19: switchly.GenesisState.swap_queue_items:type_name -> types.MsgSwap
	19, // 20: switchly.GenesisState.swapper_clout:type_name -> types.SwapperClout
	20, // 21: switchly.GenesisState.trade_accounts:type_name -> types.TradeAccount
	21, // 22: switchly.GenesisState.trade_units:type_name -> types.TradeUnit
	22, // 23: switchly.GenesisState.outbound_fee_withheld_switch:type_name -> common.Coin
	22, // 24: switchly.GenesisState.outbound_fee_spent_switch:type_name -> common.Coin
	23, // 25: switchly.GenesisState.switch_providers:type_name -> types.SWITCHProvider
	24, // 26: switchly.GenesisState.switch_pool:type_name -> types.SwitchPool
	25, // 27: switchly.GenesisState.nodeMimirs:type_name -> types.NodeMimir
	26, // 28: switchly.GenesisState.affiliate_collectors:type_name -> types.AffiliateFeeCollector
	22, // 29: switchly.GenesisState.loan_total_collateral:type_name -> common.Coin
	27, // 30: switchly.GenesisState.secured_assets:type_name -> types.SecuredAsset
	28, // 31: switchly.GenesisState.swcy_claimers:type_name -> types.SWCYClaimer
	29, // 32: switchly.GenesisState.swcy_stakers:type_name -> types.SWCYStaker
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_switchly_genesis_proto_init() }
func file_switchly_genesis_proto_init() {
	if File_switchly_genesis_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_switchly_genesis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastChainHeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_switchly_genesis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mimir); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_switchly_genesis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_switchly_genesis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_switchly_genesis_proto_goTypes,
		DependencyIndexes: file_switchly_genesis_proto_depIdxs,
		MessageInfos:      file_switchly_genesis_proto_msgTypes,
	}.Build()
	File_switchly_genesis_proto = out.File
	file_switchly_genesis_proto_rawDesc = nil
	file_switchly_genesis_proto_goTypes = nil
	file_switchly_genesis_proto_depIdxs = nil
}
