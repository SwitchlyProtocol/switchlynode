/*
Thornode API

Thornode REST API.

Contact: devs@thorchain.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Code struct for Code
type Code struct {
	Code *string `json:"code,omitempty"`
	Deployers []string `json:"deployers,omitempty"`
	Origin *string `json:"origin,omitempty"`
}

// NewCode instantiates a new Code object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCode() *Code {
	this := Code{}
	return &this
}

// NewCodeWithDefaults instantiates a new Code object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeWithDefaults() *Code {
	this := Code{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Code) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Code) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Code) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Code) SetCode(v string) {
	o.Code = &v
}

// GetDeployers returns the Deployers field value if set, zero value otherwise.
func (o *Code) GetDeployers() []string {
	if o == nil || o.Deployers == nil {
		var ret []string
		return ret
	}
	return o.Deployers
}

// GetDeployersOk returns a tuple with the Deployers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Code) GetDeployersOk() ([]string, bool) {
	if o == nil || o.Deployers == nil {
		return nil, false
	}
	return o.Deployers, true
}

// HasDeployers returns a boolean if a field has been set.
func (o *Code) HasDeployers() bool {
	if o != nil && o.Deployers != nil {
		return true
	}

	return false
}

// SetDeployers gets a reference to the given []string and assigns it to the Deployers field.
func (o *Code) SetDeployers(v []string) {
	o.Deployers = v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *Code) GetOrigin() string {
	if o == nil || o.Origin == nil {
		var ret string
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Code) GetOriginOk() (*string, bool) {
	if o == nil || o.Origin == nil {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *Code) HasOrigin() bool {
	if o != nil && o.Origin != nil {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given string and assigns it to the Origin field.
func (o *Code) SetOrigin(v string) {
	o.Origin = &v
}

func (o Code) MarshalJSON_deprecated() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Deployers != nil {
		toSerialize["deployers"] = o.Deployers
	}
	if o.Origin != nil {
		toSerialize["origin"] = o.Origin
	}
	return json.Marshal(toSerialize)
}

type NullableCode struct {
	value *Code
	isSet bool
}

func (v NullableCode) Get() *Code {
	return v.value
}

func (v *NullableCode) Set(val *Code) {
	v.value = val
	v.isSet = true
}

func (v NullableCode) IsSet() bool {
	return v.isSet
}

func (v *NullableCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCode(val *Code) *NullableCode {
	return &NullableCode{value: val, isSet: true}
}

func (v NullableCode) MarshalJSON_deprecated() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


