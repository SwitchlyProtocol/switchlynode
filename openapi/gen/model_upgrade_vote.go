/*
Thornode API

Thornode REST API.

Contact: devs@thorchain.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpgradeVote struct for UpgradeVote
type UpgradeVote struct {
	// the node address of the voter
	NodeAddress string `json:"node_address"`
	// the vote cast by the node
	Vote string `json:"vote"`
}

// NewUpgradeVote instantiates a new UpgradeVote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeVote(nodeAddress string, vote string) *UpgradeVote {
	this := UpgradeVote{}
	this.NodeAddress = nodeAddress
	this.Vote = vote
	return &this
}

// NewUpgradeVoteWithDefaults instantiates a new UpgradeVote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeVoteWithDefaults() *UpgradeVote {
	this := UpgradeVote{}
	return &this
}

// GetNodeAddress returns the NodeAddress field value
func (o *UpgradeVote) GetNodeAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeAddress
}

// GetNodeAddressOk returns a tuple with the NodeAddress field value
// and a boolean to check if the value has been set.
func (o *UpgradeVote) GetNodeAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeAddress, true
}

// SetNodeAddress sets field value
func (o *UpgradeVote) SetNodeAddress(v string) {
	o.NodeAddress = v
}

// GetVote returns the Vote field value
func (o *UpgradeVote) GetVote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vote
}

// GetVoteOk returns a tuple with the Vote field value
// and a boolean to check if the value has been set.
func (o *UpgradeVote) GetVoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vote, true
}

// SetVote sets field value
func (o *UpgradeVote) SetVote(v string) {
	o.Vote = v
}

func (o UpgradeVote) MarshalJSON_deprecated() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["node_address"] = o.NodeAddress
	}
	if true {
		toSerialize["vote"] = o.Vote
	}
	return json.Marshal(toSerialize)
}

type NullableUpgradeVote struct {
	value *UpgradeVote
	isSet bool
}

func (v NullableUpgradeVote) Get() *UpgradeVote {
	return v.value
}

func (v *NullableUpgradeVote) Set(val *UpgradeVote) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeVote) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeVote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeVote(val *UpgradeVote) *NullableUpgradeVote {
	return &NullableUpgradeVote{value: val, isSet: true}
}

func (v NullableUpgradeVote) MarshalJSON_deprecated() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeVote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


